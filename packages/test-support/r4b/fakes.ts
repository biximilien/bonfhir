/**
 * NOTE: This file is auto generated by the `yarn codegen` code generator program.
 *
 * Do not edit this file manually
 * instead, edit packages/test-support/r4b/fakes.ts.hbs
 *
 */

import {
  build,
  buildCodeableConcept,
  ExtractResource,
  ResourceType,
} from "@bonfhir/core/r4b";
import {
  rand,
  randAddress,
  randAlpha,
  randBoolean,
  randCompanyName,
  randEmail,
  randFirstName,
  randLastName,
  randNumber,
  randParagraph,
  randPastDate,
  randPhoneNumber,
  randRecentDate,
  randText,
  randUrl,
  randUuid,
} from "@ngneat/falso";
import type {
  Account,
  ActivityDefinition,
  Address,
  AdministrableProductDefinition,
  AdverseEvent,
  AllergyIntolerance,
  Appointment,
  AppointmentResponse,
  AuditEvent,
  Basic,
  BiologicallyDerivedProduct,
  BodyStructure,
  CapabilityStatement,
  CarePlan,
  CareTeam,
  CatalogEntry,
  ChargeItem,
  ChargeItemDefinition,
  Citation,
  Claim,
  ClaimResponse,
  ClinicalImpression,
  ClinicalUseDefinition,
  CodeSystem,
  Communication,
  CommunicationRequest,
  CompartmentDefinition,
  Composition,
  ConceptMap,
  Condition,
  Consent,
  ContactPoint,
  Contract,
  Coverage,
  CoverageEligibilityRequest,
  CoverageEligibilityResponse,
  DetectedIssue,
  Device,
  DeviceDefinition,
  DeviceMetric,
  DeviceRequest,
  DeviceUseStatement,
  DiagnosticReport,
  DocumentManifest,
  DocumentReference,
  Encounter,
  Endpoint,
  EnrollmentRequest,
  EnrollmentResponse,
  EpisodeOfCare,
  EventDefinition,
  Evidence,
  EvidenceReport,
  EvidenceVariable,
  ExampleScenario,
  ExplanationOfBenefit,
  FamilyMemberHistory,
  Flag,
  Goal,
  GraphDefinition,
  Group,
  GuidanceResponse,
  HealthcareService,
  HumanName,
  Identifier,
  ImagingStudy,
  Immunization,
  ImmunizationEvaluation,
  ImmunizationRecommendation,
  ImplementationGuide,
  Ingredient,
  InsurancePlan,
  Invoice,
  Library,
  Linkage,
  List,
  Location,
  ManufacturedItemDefinition,
  Measure,
  MeasureReport,
  Media,
  Medication,
  MedicationAdministration,
  MedicationDispense,
  MedicationKnowledge,
  MedicationRequest,
  MedicationStatement,
  MedicinalProductDefinition,
  MessageDefinition,
  MessageHeader,
  MolecularSequence,
  NamingSystem,
  NutritionOrder,
  NutritionProduct,
  Observation,
  ObservationDefinition,
  OperationDefinition,
  OperationOutcome,
  Organization,
  OrganizationAffiliation,
  PackagedProductDefinition,
  Patient,
  PaymentNotice,
  PaymentReconciliation,
  Person,
  PlanDefinition,
  Practitioner,
  PractitionerRole,
  Procedure,
  Provenance,
  Questionnaire,
  QuestionnaireResponse,
  RegulatedAuthorization,
  RelatedPerson,
  RequestGroup,
  ResearchDefinition,
  ResearchElementDefinition,
  ResearchStudy,
  ResearchSubject,
  RiskAssessment,
  Schedule,
  SearchParameter,
  ServiceRequest,
  Slot,
  Specimen,
  SpecimenDefinition,
  StructureDefinition,
  StructureMap,
  Subscription,
  SubscriptionStatus,
  SubscriptionTopic,
  Substance,
  SubstanceDefinition,
  SupplyDelivery,
  SupplyRequest,
  Task,
  TerminologyCapabilities,
  TestReport,
  TestScript,
  ValueSet,
  VerificationResult,
  VisionPrescription,
} from "fhir/r4";

/**
 * Create a fake FHIR resource.
 * This is NOT synthetic data. Every value is randomized.
 */
export function fake<TResource extends ResourceType>(
  resourceType: TResource,
  override?:
    | Partial<Omit<ExtractResource<TResource>, "resourceType">>
    | null
    | undefined
): ExtractResource<TResource> {
  switch (resourceType) {
    case "Account":
      return build(resourceType, {
        ...fakeAccount(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ActivityDefinition":
      return build(resourceType, {
        ...fakeActivityDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "AdministrableProductDefinition":
      return build(resourceType, {
        ...fakeAdministrableProductDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "AdverseEvent":
      return build(resourceType, {
        ...fakeAdverseEvent(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "AllergyIntolerance":
      return build(resourceType, {
        ...fakeAllergyIntolerance(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Appointment":
      return build(resourceType, {
        ...fakeAppointment(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "AppointmentResponse":
      return build(resourceType, {
        ...fakeAppointmentResponse(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "AuditEvent":
      return build(resourceType, {
        ...fakeAuditEvent(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Basic":
      return build(resourceType, {
        ...fakeBasic(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "BiologicallyDerivedProduct":
      return build(resourceType, {
        ...fakeBiologicallyDerivedProduct(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "BodyStructure":
      return build(resourceType, {
        ...fakeBodyStructure(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CapabilityStatement":
      return build(resourceType, {
        ...fakeCapabilityStatement(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CarePlan":
      return build(resourceType, {
        ...fakeCarePlan(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CareTeam":
      return build(resourceType, {
        ...fakeCareTeam(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CatalogEntry":
      return build(resourceType, {
        ...fakeCatalogEntry(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ChargeItem":
      return build(resourceType, {
        ...fakeChargeItem(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ChargeItemDefinition":
      return build(resourceType, {
        ...fakeChargeItemDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Citation":
      return build(resourceType, {
        ...fakeCitation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Claim":
      return build(resourceType, {
        ...fakeClaim(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ClaimResponse":
      return build(resourceType, {
        ...fakeClaimResponse(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ClinicalImpression":
      return build(resourceType, {
        ...fakeClinicalImpression(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ClinicalUseDefinition":
      return build(resourceType, {
        ...fakeClinicalUseDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CodeSystem":
      return build(resourceType, {
        ...fakeCodeSystem(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Communication":
      return build(resourceType, {
        ...fakeCommunication(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CommunicationRequest":
      return build(resourceType, {
        ...fakeCommunicationRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CompartmentDefinition":
      return build(resourceType, {
        ...fakeCompartmentDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Composition":
      return build(resourceType, {
        ...fakeComposition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ConceptMap":
      return build(resourceType, {
        ...fakeConceptMap(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Condition":
      return build(resourceType, {
        ...fakeCondition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Consent":
      return build(resourceType, {
        ...fakeConsent(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Contract":
      return build(resourceType, {
        ...fakeContract(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Coverage":
      return build(resourceType, {
        ...fakeCoverage(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CoverageEligibilityRequest":
      return build(resourceType, {
        ...fakeCoverageEligibilityRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "CoverageEligibilityResponse":
      return build(resourceType, {
        ...fakeCoverageEligibilityResponse(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DetectedIssue":
      return build(resourceType, {
        ...fakeDetectedIssue(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Device":
      return build(resourceType, {
        ...fakeDevice(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DeviceDefinition":
      return build(resourceType, {
        ...fakeDeviceDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DeviceMetric":
      return build(resourceType, {
        ...fakeDeviceMetric(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DeviceRequest":
      return build(resourceType, {
        ...fakeDeviceRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DeviceUseStatement":
      return build(resourceType, {
        ...fakeDeviceUseStatement(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DiagnosticReport":
      return build(resourceType, {
        ...fakeDiagnosticReport(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DocumentManifest":
      return build(resourceType, {
        ...fakeDocumentManifest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "DocumentReference":
      return build(resourceType, {
        ...fakeDocumentReference(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Encounter":
      return build(resourceType, {
        ...fakeEncounter(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Endpoint":
      return build(resourceType, {
        ...fakeEndpoint(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "EnrollmentRequest":
      return build(resourceType, {
        ...fakeEnrollmentRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "EnrollmentResponse":
      return build(resourceType, {
        ...fakeEnrollmentResponse(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "EpisodeOfCare":
      return build(resourceType, {
        ...fakeEpisodeOfCare(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "EventDefinition":
      return build(resourceType, {
        ...fakeEventDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Evidence":
      return build(resourceType, {
        ...fakeEvidence(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "EvidenceReport":
      return build(resourceType, {
        ...fakeEvidenceReport(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "EvidenceVariable":
      return build(resourceType, {
        ...fakeEvidenceVariable(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ExampleScenario":
      return build(resourceType, {
        ...fakeExampleScenario(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ExplanationOfBenefit":
      return build(resourceType, {
        ...fakeExplanationOfBenefit(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "FamilyMemberHistory":
      return build(resourceType, {
        ...fakeFamilyMemberHistory(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Flag":
      return build(resourceType, {
        ...fakeFlag(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Goal":
      return build(resourceType, {
        ...fakeGoal(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "GraphDefinition":
      return build(resourceType, {
        ...fakeGraphDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Group":
      return build(resourceType, {
        ...fakeGroup(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "GuidanceResponse":
      return build(resourceType, {
        ...fakeGuidanceResponse(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "HealthcareService":
      return build(resourceType, {
        ...fakeHealthcareService(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ImagingStudy":
      return build(resourceType, {
        ...fakeImagingStudy(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Immunization":
      return build(resourceType, {
        ...fakeImmunization(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ImmunizationEvaluation":
      return build(resourceType, {
        ...fakeImmunizationEvaluation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ImmunizationRecommendation":
      return build(resourceType, {
        ...fakeImmunizationRecommendation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ImplementationGuide":
      return build(resourceType, {
        ...fakeImplementationGuide(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Ingredient":
      return build(resourceType, {
        ...fakeIngredient(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "InsurancePlan":
      return build(resourceType, {
        ...fakeInsurancePlan(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Invoice":
      return build(resourceType, {
        ...fakeInvoice(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Library":
      return build(resourceType, {
        ...fakeLibrary(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Linkage":
      return build(resourceType, {
        ...fakeLinkage(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "List":
      return build(resourceType, {
        ...fakeList(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Location":
      return build(resourceType, {
        ...fakeLocation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ManufacturedItemDefinition":
      return build(resourceType, {
        ...fakeManufacturedItemDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Measure":
      return build(resourceType, {
        ...fakeMeasure(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MeasureReport":
      return build(resourceType, {
        ...fakeMeasureReport(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Media":
      return build(resourceType, {
        ...fakeMedia(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Medication":
      return build(resourceType, {
        ...fakeMedication(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MedicationAdministration":
      return build(resourceType, {
        ...fakeMedicationAdministration(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MedicationDispense":
      return build(resourceType, {
        ...fakeMedicationDispense(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MedicationKnowledge":
      return build(resourceType, {
        ...fakeMedicationKnowledge(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MedicationRequest":
      return build(resourceType, {
        ...fakeMedicationRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MedicationStatement":
      return build(resourceType, {
        ...fakeMedicationStatement(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MedicinalProductDefinition":
      return build(resourceType, {
        ...fakeMedicinalProductDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MessageDefinition":
      return build(resourceType, {
        ...fakeMessageDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MessageHeader":
      return build(resourceType, {
        ...fakeMessageHeader(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "MolecularSequence":
      return build(resourceType, {
        ...fakeMolecularSequence(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "NamingSystem":
      return build(resourceType, {
        ...fakeNamingSystem(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "NutritionOrder":
      return build(resourceType, {
        ...fakeNutritionOrder(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "NutritionProduct":
      return build(resourceType, {
        ...fakeNutritionProduct(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Observation":
      return build(resourceType, {
        ...fakeObservation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ObservationDefinition":
      return build(resourceType, {
        ...fakeObservationDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "OperationDefinition":
      return build(resourceType, {
        ...fakeOperationDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "OperationOutcome":
      return build(resourceType, {
        ...fakeOperationOutcome(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Organization":
      return build(resourceType, {
        ...fakeOrganization(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "OrganizationAffiliation":
      return build(resourceType, {
        ...fakeOrganizationAffiliation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "PackagedProductDefinition":
      return build(resourceType, {
        ...fakePackagedProductDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Patient":
      return build(resourceType, {
        ...fakePatient(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "PaymentNotice":
      return build(resourceType, {
        ...fakePaymentNotice(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "PaymentReconciliation":
      return build(resourceType, {
        ...fakePaymentReconciliation(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Person":
      return build(resourceType, {
        ...fakePerson(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "PlanDefinition":
      return build(resourceType, {
        ...fakePlanDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Practitioner":
      return build(resourceType, {
        ...fakePractitioner(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "PractitionerRole":
      return build(resourceType, {
        ...fakePractitionerRole(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Procedure":
      return build(resourceType, {
        ...fakeProcedure(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Provenance":
      return build(resourceType, {
        ...fakeProvenance(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Questionnaire":
      return build(resourceType, {
        ...fakeQuestionnaire(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "QuestionnaireResponse":
      return build(resourceType, {
        ...fakeQuestionnaireResponse(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "RegulatedAuthorization":
      return build(resourceType, {
        ...fakeRegulatedAuthorization(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "RelatedPerson":
      return build(resourceType, {
        ...fakeRelatedPerson(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "RequestGroup":
      return build(resourceType, {
        ...fakeRequestGroup(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ResearchDefinition":
      return build(resourceType, {
        ...fakeResearchDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ResearchElementDefinition":
      return build(resourceType, {
        ...fakeResearchElementDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ResearchStudy":
      return build(resourceType, {
        ...fakeResearchStudy(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ResearchSubject":
      return build(resourceType, {
        ...fakeResearchSubject(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "RiskAssessment":
      return build(resourceType, {
        ...fakeRiskAssessment(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Schedule":
      return build(resourceType, {
        ...fakeSchedule(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SearchParameter":
      return build(resourceType, {
        ...fakeSearchParameter(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ServiceRequest":
      return build(resourceType, {
        ...fakeServiceRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Slot":
      return build(resourceType, {
        ...fakeSlot(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Specimen":
      return build(resourceType, {
        ...fakeSpecimen(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SpecimenDefinition":
      return build(resourceType, {
        ...fakeSpecimenDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "StructureDefinition":
      return build(resourceType, {
        ...fakeStructureDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "StructureMap":
      return build(resourceType, {
        ...fakeStructureMap(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Subscription":
      return build(resourceType, {
        ...fakeSubscription(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SubscriptionStatus":
      return build(resourceType, {
        ...fakeSubscriptionStatus(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SubscriptionTopic":
      return build(resourceType, {
        ...fakeSubscriptionTopic(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Substance":
      return build(resourceType, {
        ...fakeSubstance(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SubstanceDefinition":
      return build(resourceType, {
        ...fakeSubstanceDefinition(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SupplyDelivery":
      return build(resourceType, {
        ...fakeSupplyDelivery(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "SupplyRequest":
      return build(resourceType, {
        ...fakeSupplyRequest(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "Task":
      return build(resourceType, {
        ...fakeTask(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "TerminologyCapabilities":
      return build(resourceType, {
        ...fakeTerminologyCapabilities(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "TestReport":
      return build(resourceType, {
        ...fakeTestReport(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "TestScript":
      return build(resourceType, {
        ...fakeTestScript(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "ValueSet":
      return build(resourceType, {
        ...fakeValueSet(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "VerificationResult":
      return build(resourceType, {
        ...fakeVerificationResult(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    case "VisionPrescription":
      return build(resourceType, {
        ...fakeVisionPrescription(),
        ...override,
      } as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    default:
      throw new Error(`Unsupported fake for resource type ${resourceType}`);
  }
}

function fakeAccount(): Account {
  return {
    resourceType: "Account",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "active",
      "inactive",
      "entered-in-error",
      "on-hold",
      "unknown",
    ]),
    type: undefined,
    name: randText(),
    subject: undefined,
    servicePeriod: undefined,
    coverage: undefined,
    owner: undefined,
    description: randText(),
    guarantor: undefined,
    partOf: undefined,
  };
}

function fakeActivityDefinition(): ActivityDefinition {
  return {
    resourceType: "ActivityDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    library: undefined,
    kind: rand([
      "Appointment",
      "AppointmentResponse",
      "CarePlan",
      "Claim",
      "CommunicationRequest",
      "Contract",
      "DeviceRequest",
      "EnrollmentRequest",
      "ImmunizationRecommendation",
      "MedicationRequest",
      "NutritionOrder",
      "ServiceRequest",
      "SupplyRequest",
      "Task",
      "VisionPrescription",
    ]),
    profile: undefined,
    code: undefined,
    intent: rand(["proposal", "plan", "directive", "order", "option"]),
    priority: rand(["routine", "urgent", "asap", "stat"]),
    doNotPerform: randBoolean(),
    location: undefined,
    participant: undefined,
    quantity: undefined,
    dosage: undefined,
    bodySite: undefined,
    specimenRequirement: undefined,
    observationRequirement: undefined,
    observationResultRequirement: undefined,
    transform: undefined,
    dynamicValue: undefined,
  };
}

function fakeAdministrableProductDefinition(): AdministrableProductDefinition {
  return {
    resourceType: "AdministrableProductDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["draft", "active", "retired", "unknown"]),
    formOf: undefined,
    administrableDoseForm: {
      coding: [
        {
          system: "http://hl7.org/fhir/administrable-dose-form",
          code: rand([
            "100000073362",
            "100000073363",
            "100000073364",
            "100000073365",
            "100000073367",
            "100000073368",
            "100000073369",
            "100000073370",
            "100000073371",
            "100000073372",
            "100000073373",
            "100000073374",
            "100000073375",
            "100000073376",
            "100000073377",
            "100000073378",
            "100000073379",
            "100000073380",
            "100000073642",
            "100000073643",
            "100000073644",
            "100000073645",
            "100000073646",
            "100000073647",
            "100000073648",
            "100000073649",
            "100000073650",
            "100000073652",
            "100000073653",
            "100000073654",
            "100000073655",
            "100000073656",
            "100000073657",
            "100000073658",
            "100000073659",
            "100000073660",
            "100000073661",
            "100000073662",
            "100000073663",
            "100000073664",
            "100000073665",
            "100000073666",
            "100000073667",
            "100000073668",
            "100000073669",
            "100000073670",
            "100000073671",
            "100000073672",
            "100000073673",
            "100000073674",
            "100000073675",
            "100000073676",
            "100000073677",
            "100000073678",
            "100000073679",
            "100000073680",
            "100000073681",
            "100000073682",
            "100000073683",
            "100000073684",
            "100000073685",
            "100000073686",
            "100000073687",
            "100000073688",
            "100000073689",
            "100000073690",
            "100000073691",
            "100000073692",
            "100000073693",
            "100000073694",
            "100000073695",
            "100000073696",
            "100000073697",
            "100000073698",
            "100000073699",
            "100000073700",
            "100000073701",
            "100000073702",
            "100000073703",
            "100000073704",
            "100000073705",
            "100000073706",
            "100000073707",
            "100000073708",
            "100000073709",
            "100000073710",
            "100000073711",
            "100000073712",
            "100000073713",
            "100000073714",
            "100000073715",
            "100000073716",
            "100000073717",
            "100000073718",
            "100000073719",
            "100000073720",
            "100000073721",
            "100000073722",
            "100000073723",
            "100000073724",
            "100000073725",
            "100000073726",
            "100000073727",
            "100000073728",
            "100000073729",
            "100000073730",
            "100000073731",
            "100000073732",
            "100000073733",
            "100000073734",
            "100000073735",
            "100000073736",
            "100000073737",
            "100000073738",
            "100000073739",
            "100000073740",
            "100000073741",
            "100000073742",
            "100000073743",
            "100000073744",
            "100000073745",
            "100000073746",
            "100000073747",
            "100000073748",
            "100000073749",
            "100000073750",
            "100000073751",
            "100000073752",
            "100000073753",
            "100000073754",
            "100000073755",
            "100000073756",
            "100000073757",
            "100000073758",
            "100000073759",
            "100000073760",
            "100000073761",
            "100000073762",
            "100000073763",
            "100000073764",
            "100000073765",
            "100000073766",
            "100000073767",
            "100000073768",
            "100000073769",
            "100000073770",
            "100000073771",
            "100000073772",
            "100000073773",
            "100000073775",
            "100000073776",
            "100000073777",
            "100000073778",
            "100000073779",
            "100000073780",
            "100000073782",
            "100000073783",
            "100000073784",
            "100000073785",
            "100000073786",
            "100000073787",
            "100000073788",
            "100000073789",
            "100000073790",
            "100000073791",
            "100000073792",
            "100000073793",
            "100000073794",
            "100000073795",
            "100000073796",
            "100000073797",
            "100000073798",
            "100000073799",
            "100000073800",
            "100000073802",
            "100000073803",
            "100000073804",
            "100000073805",
            "100000073806",
            "100000073807",
            "100000073808",
            "100000073809",
            "100000073810",
            "100000073811",
            "100000073812",
            "100000073813",
            "100000073814",
            "100000073815",
            "100000073816",
            "100000073817",
            "100000073818",
            "100000073819",
            "100000073820",
            "100000073821",
            "100000073822",
            "100000073823",
            "100000073824",
            "100000073825",
            "100000073826",
            "100000073827",
            "100000073863",
          ]),
        },
      ],
    },
    unitOfPresentation: {
      coding: [
        {
          system: "http://hl7.org/fhir/unit-of-presentation",
          code: rand([
            "200000002108",
            "200000002109",
            "200000002110",
            "200000002111",
            "200000002112",
            "200000002113",
            "200000002114",
            "200000002115",
            "200000002116",
            "200000002117",
            "200000002118",
            "200000002119",
            "200000002120",
            "200000002121",
            "200000002122",
            "200000002123",
            "200000002124",
            "200000002125",
            "200000002126",
            "200000002127",
            "200000002128",
            "200000002129",
            "200000002130",
            "200000002131",
            "200000002132",
            "200000002133",
            "200000002134",
            "200000002135",
            "200000002136",
            "200000002137",
            "200000002138",
            "200000002139",
            "200000002140",
            "200000002141",
            "200000002142",
            "200000002143",
            "200000002144",
            "200000002145",
            "200000002146",
            "200000002147",
            "200000002148",
            "200000002149",
            "200000002150",
            "200000002151",
            "200000002152",
            "200000002153",
            "200000002154",
            "200000002155",
            "200000002156",
            "200000002157",
            "200000002158",
            "200000002159",
            "200000002163",
            "200000002164",
            "200000002165",
            "200000002166",
          ]),
        },
      ],
    },
    producedFrom: undefined,
    ingredient: undefined,
    device: undefined,
    property: undefined,
    routeOfAdministration: [],
  };
}

function fakeAdverseEvent(): AdverseEvent {
  return {
    resourceType: "AdverseEvent",
    id: randUuid(),
    identifier: fakeIdentifier(randAlpha()),
    actuality: rand(["actual", "potential"]),
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/adverse-event-category",
            code: rand([
              "product-problem",
              "product-quality",
              "product-use-error",
              "medical-device-use-error",
              "problem-different-manufacturer",
              "unsafe-physical-environment",
            ]),
          },
        ],
      },
    ],
    event: undefined,
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    date: randRecentDate().toISOString(),
    detected: randRecentDate().toISOString(),
    recordedDate: randRecentDate().toISOString(),
    resultingCondition: undefined,
    location: undefined,
    seriousness: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/adverse-event-seriousness",
          code: rand(["Non-serious", "Serious"]),
        },
      ],
    },
    severity: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/adverse-event-severity",
          code: rand(["mild", "moderate", "severe"]),
        },
      ],
    },
    outcome: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
          code: rand([
            "resolved",
            "recovering",
            "ongoing",
            "resolvedWithSequelae",
            "fatal",
            "unknown",
          ]),
        },
      ],
    },
    recorder: undefined,
    contributor: undefined,
    suspectEntity: undefined,
    subjectMedicalHistory: undefined,
    referenceDocument: undefined,
    study: undefined,
  };
}

function fakeAllergyIntolerance(): AllergyIntolerance {
  return {
    resourceType: "AllergyIntolerance",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    clinicalStatus: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
          code: rand(["active", "inactive"]),
        },
      ],
    },
    verificationStatus: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
          code: rand([
            "unconfirmed",
            "confirmed",
            "refuted",
            "entered-in-error",
          ]),
        },
      ],
    },
    type: rand(["allergy", "intolerance"]),
    category: [rand(["food", "medication", "environment", "biologic"])],
    criticality: rand(["low", "high", "unable-to-assess"]),
    code: undefined,
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    recordedDate: randRecentDate().toISOString(),
    recorder: undefined,
    asserter: undefined,
    lastOccurrence: randRecentDate().toISOString(),
    note: undefined,
    reaction: undefined,
  };
}

function fakeAppointment(): Appointment {
  return {
    resourceType: "Appointment",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "proposed",
      "pending",
      "booked",
      "arrived",
      "fulfilled",
      "cancelled",
      "noshow",
      "entered-in-error",
      "checked-in",
      "waitlist",
    ]),
    cancelationReason: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/appointment-cancellation-reason",
          code: rand(["pat", "prov", "maint", "meds-inc", "other"]),
        },
      ],
    },
    serviceCategory: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-category",
            code: rand([
              "1",
              "2",
              "34",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "36",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "35",
              "18",
              "19",
              "20",
              "21",
              "22",
              "38",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "37",
              "33",
            ]),
          },
        ],
      },
    ],
    serviceType: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-type",
            code: rand([
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60",
              "61",
              "62",
              "63",
              "64",
              "65",
              "66",
              "67",
              "68",
              "69",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "78",
              "79",
              "80",
              "81",
              "82",
              "83",
              "84",
              "85",
              "86",
              "87",
              "88",
              "89",
              "90",
              "91",
              "92",
              "93",
              "94",
              "95",
              "96",
              "97",
              "98",
              "99",
              "100",
              "101",
              "102",
              "103",
              "104",
              "105",
              "106",
              "107",
              "108",
              "109",
              "110",
              "111",
              "112",
              "113",
              "114",
              "115",
              "116",
              "117",
              "118",
              "119",
              "120",
              "121",
              "122",
              "123",
              "124",
              "125",
              "126",
              "127",
              "128",
              "129",
              "130",
              "131",
              "132",
              "133",
              "134",
              "135",
              "136",
              "137",
              "138",
              "139",
              "140",
              "141",
              "142",
              "143",
              "144",
              "145",
              "146",
              "147",
              "148",
              "149",
              "150",
              "151",
              "152",
              "153",
              "154",
              "155",
              "156",
              "157",
              "158",
              "159",
              "160",
              "161",
              "162",
              "163",
              "164",
              "165",
              "166",
              "167",
              "168",
              "169",
              "170",
              "171",
              "172",
              "173",
              "174",
              "175",
              "176",
              "177",
              "178",
              "179",
              "180",
              "181",
              "182",
              "183",
              "184",
              "185",
              "186",
              "187",
              "188",
              "189",
              "190",
              "191",
              "192",
              "193",
              "194",
              "195",
              "196",
              "197",
              "198",
              "199",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "208",
              "209",
              "210",
              "211",
              "212",
              "213",
              "214",
              "215",
              "216",
              "217",
              "218",
              "219",
              "220",
              "221",
              "222",
              "223",
              "224",
              "225",
              "226",
              "227",
              "228",
              "229",
              "230",
              "231",
              "232",
              "233",
              "234",
              "235",
              "236",
              "237",
              "238",
              "239",
              "240",
              "241",
              "242",
              "243",
              "244",
              "245",
              "246",
              "247",
              "248",
              "249",
              "250",
              "251",
              "252",
              "253",
              "254",
              "255",
              "256",
              "257",
              "258",
              "259",
              "260",
              "261",
              "262",
              "263",
              "264",
              "265",
              "266",
              "267",
              "268",
              "269",
              "270",
              "271",
              "272",
              "273",
              "274",
              "275",
              "276",
              "277",
              "278",
              "279",
              "280",
              "281",
              "282",
              "283",
              "284",
              "285",
              "286",
              "287",
              "288",
              "289",
              "290",
              "291",
              "292",
              "293",
              "294",
              "295",
              "296",
              "297",
              "298",
              "299",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "306",
              "307",
              "308",
              "309",
              "310",
              "311",
              "312",
              "313",
              "314",
              "315",
              "316",
              "317",
              "318",
              "319",
              "320",
              "321",
              "322",
              "323",
              "324",
              "325",
              "326",
              "327",
              "328",
              "330",
              "331",
              "332",
              "333",
              "334",
              "335",
              "336",
              "337",
              "338",
              "339",
              "340",
              "341",
              "342",
              "343",
              "344",
              "345",
              "346",
              "347",
              "348",
              "349",
              "350",
              "351",
              "352",
              "353",
              "354",
              "355",
              "356",
              "357",
              "358",
              "359",
              "360",
              "361",
              "362",
              "364",
              "365",
              "366",
              "367",
              "368",
              "369",
              "370",
              "371",
              "372",
              "373",
              "374",
              "375",
              "376",
              "377",
              "378",
              "379",
              "380",
              "381",
              "382",
              "383",
              "384",
              "385",
              "386",
              "387",
              "388",
              "389",
              "390",
              "391",
              "392",
              "393",
              "394",
              "395",
              "396",
              "397",
              "398",
              "399",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "418",
              "419",
              "420",
              "421",
              "422",
              "423",
              "424",
              "425",
              "426",
              "427",
              "428",
              "429",
              "430",
              "431",
              "432",
              "433",
              "434",
              "435",
              "436",
              "437",
              "438",
              "439",
              "440",
              "441",
              "442",
              "443",
              "444",
              "445",
              "446",
              "447",
              "448",
              "449",
              "450",
              "451",
              "452",
              "453",
              "454",
              "455",
              "456",
              "457",
              "458",
              "459",
              "460",
              "461",
              "462",
              "463",
              "464",
              "465",
              "466",
              "467",
              "468",
              "469",
              "470",
              "471",
              "472",
              "473",
              "474",
              "475",
              "476",
              "477",
              "478",
              "479",
              "480",
              "481",
              "482",
              "483",
              "484",
              "485",
              "486",
              "488",
              "489",
              "490",
              "491",
              "492",
              "493",
              "494",
              "495",
              "496",
              "497",
              "498",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "506",
              "507",
              "508",
              "509",
              "510",
              "513",
              "514",
              "530",
              "531",
              "532",
              "533",
              "534",
              "535",
              "536",
              "537",
              "538",
              "539",
              "540",
              "541",
              "542",
              "543",
              "544",
              "545",
              "546",
              "547",
              "548",
              "550",
              "551",
              "552",
              "553",
              "554",
              "555",
              "556",
              "557",
              "558",
              "559",
              "560",
              "561",
              "562",
              "563",
              "564",
              "565",
              "566",
              "567",
              "568",
              "569",
              "570",
              "571",
              "572",
              "573",
              "574",
              "575",
              "576",
              "577",
              "580",
              "581",
              "582",
              "583",
              "584",
              "585",
              "589",
              "590",
              "591",
              "593",
              "599",
              "600",
              "601",
              "602",
              "603",
              "604",
              "605",
              "606",
              "607",
              "608",
              "609",
              "610",
              "611",
              "612",
              "613",
              "614",
              "615",
              "616",
              "617",
              "618",
              "619",
              "620",
              "621",
              "622",
              "623",
              "624",
              "625",
              "626",
              "627",
              "628",
              "629",
            ]),
          },
        ],
      },
    ],
    specialty: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "408467006",
              "394577000",
              "394578005",
              "421661004",
              "408462000",
              "394579002",
              "394804000",
              "394580004",
              "394803006",
              "408480009",
              "408454008",
              "394809005",
              "394592004",
              "394600006",
              "394601005",
              "394581000",
              "408478003",
              "394812008",
              "408444009",
              "394582007",
              "408475000",
              "410005002",
              "394583002",
              "419772000",
              "394584008",
              "408443003",
              "394802001",
              "394915009",
              "394814009",
              "394808002",
              "394811001",
              "408446006",
              "394586005",
              "394916005",
              "408472002",
              "394597005",
              "394598000",
              "394807007",
              "419192003",
              "408468001",
              "394593009",
              "394813003",
              "410001006",
              "394589003",
              "394591006",
              "394599008",
              "394649004",
              "408470005",
              "394585009",
              "394821009",
              "422191005",
              "394594003",
              "416304004",
              "418960008",
              "394882004",
              "394806003",
              "394588006",
              "408459003",
              "394607009",
              "419610006",
              "418058008",
              "420208008",
              "418652005",
              "418535003",
              "418862001",
              "419365004",
              "418002000",
              "419983000",
              "419170002",
              "419472004",
              "394539006",
              "420112009",
              "409968004",
              "394587001",
              "394913002",
              "408440000",
              "418112009",
              "419815003",
              "394914008",
              "408455009",
              "394602003",
              "408447002",
              "394810000",
              "408450004",
              "408476004",
              "408469009",
              "408466002",
              "408471009",
              "408464004",
              "408441001",
              "408465003",
              "394605001",
              "394608004",
              "408461007",
              "408460008",
              "408460008",
              "394606000",
              "408449004",
              "394608004",
              "418018006",
              "394604002",
              "394609007",
              "408474001",
              "394610002",
              "394611003",
              "408477008",
              "394801008",
              "408463005",
              "419321007",
              "394576009",
              "394590007",
              "409967009",
              "408448007",
              "419043006",
              "394612005",
              "394733009",
              "394732004",
            ]),
          },
        ],
      },
    ],
    appointmentType: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    priority: undefined,
    description: randText(),
    supportingInformation: undefined,
    start: randRecentDate().toISOString(),
    end: randRecentDate().toISOString(),
    minutesDuration: undefined,
    slot: undefined,
    created: randRecentDate().toISOString(),
    comment: randText(),
    patientInstruction: randText(),
    basedOn: undefined,
    participant: [],
    requestedPeriod: undefined,
  };
}

function fakeAppointmentResponse(): AppointmentResponse {
  return {
    resourceType: "AppointmentResponse",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    appointment: {
      reference: `Appointment/${randUuid()}`,
    },
    start: randRecentDate().toISOString(),
    end: randRecentDate().toISOString(),
    participantType: undefined,
    actor: undefined,
    participantStatus: rand([
      "accepted",
      "declined",
      "tentative",
      "needs-action",
    ]),
    comment: randText(),
  };
}

function fakeAuditEvent(): AuditEvent {
  return {
    resourceType: "AuditEvent",
    id: randUuid(),
    type: {
      system: "http://dicom.nema.org/resources/ontology/DCM",
      code: rand([
        "110100",
        "110101",
        "110102",
        "110103",
        "110104",
        "110105",
        "110106",
        "110107",
        "110108",
        "110109",
        "110110",
        "110111",
        "110112",
        "110113",
        "110114",
      ]),
    },
    subtype: [
      {
        system: "http://dicom.nema.org/resources/ontology/DCM",
        code: rand([
          "110120",
          "110121",
          "110122",
          "110123",
          "110124",
          "110125",
          "110126",
          "110127",
          "110128",
          "110129",
          "110130",
          "110131",
          "110132",
          "110133",
          "110134",
          "110135",
          "110136",
          "110137",
          "110138",
          "110139",
          "110140",
          "110141",
          "110142",
        ]),
      },
    ],
    action: rand(["C", "R", "U", "D", "E"]),
    period: undefined,
    recorded: randRecentDate().toISOString(),
    outcome: rand(["0", "4", "8", "12"]),
    outcomeDesc: randText(),
    purposeOfEvent: undefined,
    agent: [],
    source: { observer: {} },
    entity: undefined,
  };
}

function fakeBasic(): Basic {
  return {
    resourceType: "Basic",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    code: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/basic-resource-type",
          code: rand([
            "consent",
            "referral",
            "advevent",
            "aptmtreq",
            "transfer",
            "diet",
            "adminact",
            "exposure",
            "investigation",
            "account",
            "invoice",
            "adjudicat",
            "predetreq",
            "predetermine",
            "study",
            "protocol",
          ]),
        },
      ],
    },
    subject: undefined,
    created: randRecentDate().toISOString().slice(0, 10),
    author: undefined,
  };
}

function fakeBiologicallyDerivedProduct(): BiologicallyDerivedProduct {
  return {
    resourceType: "BiologicallyDerivedProduct",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    productCategory: rand([
      "organ",
      "tissue",
      "fluid",
      "cells",
      "biologicalAgent",
    ]),
    productCode: undefined,
    status: rand(["available", "unavailable"]),
    request: undefined,
    quantity: randNumber(),
    parent: undefined,
    collection: undefined,
    processing: undefined,
    manipulation: undefined,
    storage: undefined,
  };
}

function fakeBodyStructure(): BodyStructure {
  return {
    resourceType: "BodyStructure",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    morphology: undefined,
    location: undefined,
    locationQualifier: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "419161000",
              "419465000",
              "51440002",
              "261183002",
              "261122009",
              "255561001",
              "49370004",
              "264217000",
              "261089000",
              "255551008",
              "351726001",
              "352730000",
            ]),
          },
        ],
      },
    ],
    description: randText(),
    image: undefined,
    patient: {
      reference: `Patient/${randUuid()}`,
    },
  };
}

function fakeCapabilityStatement(): CapabilityStatement {
  return {
    resourceType: "CapabilityStatement",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    kind: rand(["instance", "capability", "requirements"]),
    instantiates: undefined,
    imports: undefined,
    software: undefined,
    implementation: undefined,
    fhirVersion: rand([
      "0.01",
      "0.05",
      "0.06",
      "0.11",
      "0.0.80",
      "0.0.81",
      "0.0.82",
      "0.4.0",
      "0.5.0",
      "1.0.0",
      "1.0.1",
      "1.0.2",
      "1.1.0",
      "1.4.0",
      "1.6.0",
      "1.8.0",
      "3.0.0",
      "3.0.1",
      "3.0.2",
      "3.3.0",
      "3.5.0",
      "4.0.0",
      "4.0.1",
      "4.1.0",
      "4.3.0-cibuild",
      "4.3.0-snapshot1",
      "4.3.0",
    ]),
    format: [randText()],
    patchFormat: [randText()],
    implementationGuide: undefined,
    rest: undefined,
    messaging: undefined,
    document: undefined,
  };
}

function fakeCarePlan(): CarePlan {
  return {
    resourceType: "CarePlan",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    replaces: undefined,
    partOf: undefined,
    status: rand([
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    intent: rand(["proposal", "plan", "order", "option"]),
    category: undefined,
    title: randText(),
    description: randText(),
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    period: undefined,
    created: randRecentDate().toISOString(),
    author: undefined,
    contributor: undefined,
    careTeam: undefined,
    addresses: undefined,
    supportingInfo: undefined,
    goal: undefined,
    activity: undefined,
    note: undefined,
  };
}

function fakeCareTeam(): CareTeam {
  return {
    resourceType: "CareTeam",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "proposed",
      "active",
      "suspended",
      "inactive",
      "entered-in-error",
    ]),
    category: undefined,
    name: randText(),
    subject: undefined,
    encounter: undefined,
    period: undefined,
    participant: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    managingOrganization: undefined,
    telecom: [fakeContactPoint()],
    note: undefined,
  };
}

function fakeCatalogEntry(): CatalogEntry {
  return {
    resourceType: "CatalogEntry",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    type: undefined,
    orderable: randBoolean(),
    referencedItem: {
      reference: `Medication/${randUuid()}`,
    },
    additionalIdentifier: undefined,
    classification: undefined,
    status: rand(["draft", "active", "retired", "unknown"]),
    validityPeriod: undefined,
    validTo: randRecentDate().toISOString(),
    lastUpdated: randRecentDate().toISOString(),
    additionalCharacteristic: undefined,
    additionalClassification: undefined,
    relatedEntry: undefined,
  };
}

function fakeChargeItem(): ChargeItem {
  return {
    resourceType: "ChargeItem",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    definitionUri: [randUrl()],
    definitionCanonical: undefined,
    status: rand([
      "planned",
      "billable",
      "not-billable",
      "aborted",
      "billed",
      "entered-in-error",
      "unknown",
    ]),
    partOf: undefined,
    code: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/chargeitem-billingcodes",
          code: rand(["1100", "1210", "1320"]),
        },
      ],
    },
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    context: undefined,
    performer: undefined,
    performingOrganization: undefined,
    requestingOrganization: undefined,
    costCenter: undefined,
    quantity: undefined,
    bodysite: undefined,
    factorOverride: undefined,
    priceOverride: undefined,
    overrideReason: randText(),
    enterer: undefined,
    enteredDate: randRecentDate().toISOString(),
    reason: undefined,
    service: undefined,
    account: undefined,
    note: undefined,
    supportingInformation: undefined,
  };
}

function fakeChargeItemDefinition(): ChargeItemDefinition {
  return {
    resourceType: "ChargeItemDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    title: randText(),
    derivedFromUri: [randUrl()],
    partOf: undefined,
    replaces: undefined,
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    code: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/chargeitem-billingcodes",
          code: rand(["1100", "1210", "1320"]),
        },
      ],
    },
    instance: undefined,
    applicability: undefined,
    propertyGroup: undefined,
  };
}

function fakeCitation(): Citation {
  return {
    resourceType: "Citation",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    summary: undefined,
    classification: undefined,
    note: undefined,
    currentState: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/citation-status-type",
            code: rand([
              "pubmed-pubstatus-received",
              "pubmed-pubstatus-accepted",
              "pubmed-pubstatus-epublish",
              "pubmed-pubstatus-ppublish",
              "pubmed-pubstatus-revised",
              "pubmed-pubstatus-aheadofprint",
              "pubmed-pubstatus-retracted",
              "pubmed-pubstatus-ecollection",
              "pubmed-pubstatus-pmc",
              "pubmed-pubstatus-pmcr",
              "pubmed-pubstatus-pubmed",
              "pubmed-pubstatus-pubmedr",
              "pubmed-pubstatus-premedline",
              "pubmed-pubstatus-medline",
              "pubmed-pubstatus-medliner",
              "pubmed-pubstatus-entrez",
              "pubmed-pubstatus-pmc-release",
              "medline-completed",
              "medline-in-process",
              "medline-pubmed-not-medline",
              "medline-in-data-review",
              "medline-publisher",
              "medline-medline",
              "medline-oldmedline",
              "pubmed-publication-status-ppublish",
              "pubmed-publication-status-epublish",
              "pubmed-publication-status-aheadofprint",
            ]),
          },
        ],
      },
    ],
    statusDate: undefined,
    relatesTo: undefined,
    citedArtifact: undefined,
  };
}

function fakeClaim(): Claim {
  return {
    resourceType: "Claim",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/claim-type",
          code: rand([
            "institutional",
            "oral",
            "pharmacy",
            "professional",
            "vision",
          ]),
        },
      ],
    },
    subType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/ex-claimsubtype",
          code: rand(["ortho", "emergency"]),
        },
      ],
    },
    use: rand(["claim", "preauthorization", "predetermination"]),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    billablePeriod: undefined,
    created: randRecentDate().toISOString(),
    enterer: undefined,
    insurer: undefined,
    provider: {
      reference: `Practitioner/${randUuid()}`,
    },
    priority: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/processpriority",
          code: rand(["stat", "normal", "deferred"]),
        },
      ],
    },
    fundsReserve: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/fundsreserve",
          code: rand(["patient", "provider", "none"]),
        },
      ],
    },
    related: undefined,
    prescription: undefined,
    originalPrescription: undefined,
    payee: undefined,
    referral: undefined,
    facility: undefined,
    careTeam: undefined,
    supportingInfo: undefined,
    diagnosis: undefined,
    procedure: undefined,
    insurance: [],
    accident: undefined,
    item: undefined,
    total: undefined,
  };
}

function fakeClaimResponse(): ClaimResponse {
  return {
    resourceType: "ClaimResponse",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/claim-type",
          code: rand([
            "institutional",
            "oral",
            "pharmacy",
            "professional",
            "vision",
          ]),
        },
      ],
    },
    subType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/ex-claimsubtype",
          code: rand(["ortho", "emergency"]),
        },
      ],
    },
    use: rand(["claim", "preauthorization", "predetermination"]),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    created: randRecentDate().toISOString(),
    insurer: {
      reference: `Organization/${randUuid()}`,
    },
    requestor: undefined,
    request: undefined,
    outcome: rand(["queued", "complete", "error", "partial"]),
    disposition: randText(),
    preAuthRef: randText(),
    preAuthPeriod: undefined,
    payeeType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/payeetype",
          code: rand(["subscriber", "provider", "other"]),
        },
      ],
    },
    item: undefined,
    addItem: undefined,
    adjudication: undefined,
    total: undefined,
    payment: undefined,
    fundsReserve: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/fundsreserve",
          code: rand(["patient", "provider", "none"]),
        },
      ],
    },
    formCode: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/forms-codes",
          code: rand(["1", "2"]),
        },
      ],
    },
    form: undefined,
    processNote: undefined,
    communicationRequest: undefined,
    insurance: undefined,
    error: undefined,
  };
}

function fakeClinicalImpression(): ClinicalImpression {
  return {
    resourceType: "ClinicalImpression",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["in-progress", "completed", "entered-in-error"]),
    statusReason: undefined,
    code: undefined,
    description: randText(),
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    date: randRecentDate().toISOString(),
    assessor: undefined,
    previous: undefined,
    problem: undefined,
    investigation: undefined,
    protocol: [randUrl()],
    summary: randText(),
    finding: undefined,
    prognosisCodeableConcept: undefined,
    prognosisReference: undefined,
    supportingInfo: undefined,
    note: undefined,
  };
}

function fakeClinicalUseDefinition(): ClinicalUseDefinition {
  return {
    resourceType: "ClinicalUseDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    type: rand([
      "indication",
      "contraindication",
      "interaction",
      "undesirable-effect",
      "warning",
    ]),
    category: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/clinical-use-definition-category",
            code: rand(["Pregnancy", "Overdose", "DriveAndMachines"]),
          },
        ],
      },
    ],
    subject: undefined,
    status: {
      coding: [
        {
          system: "http://hl7.org/fhir/publication-status",
          code: rand(["draft", "active", "retired", "unknown"]),
        },
      ],
    },
    contraindication: undefined,
    indication: undefined,
    interaction: undefined,
    population: undefined,
    undesirableEffect: undefined,
    warning: undefined,
  };
}

function fakeCodeSystem(): CodeSystem {
  return {
    resourceType: "CodeSystem",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    caseSensitive: randBoolean(),
    valueSet: undefined,
    hierarchyMeaning: rand([
      "grouped-by",
      "is-a",
      "part-of",
      "classified-with",
    ]),
    compositional: randBoolean(),
    versionNeeded: randBoolean(),
    content: rand([
      "not-present",
      "example",
      "fragment",
      "complete",
      "supplement",
    ]),
    supplements: undefined,
    count: undefined,
    filter: undefined,
    property: undefined,
    concept: undefined,
  };
}

function fakeCommunication(): Communication {
  return {
    resourceType: "Communication",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    partOf: undefined,
    inResponseTo: undefined,
    status: rand([
      "preparation",
      "in-progress",
      "not-done",
      "on-hold",
      "stopped",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    statusReason: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/communication-not-done-reason",
          code: rand([
            "unknown",
            "system-error",
            "invalid-phone-number",
            "recipient-unavailable",
            "family-objection",
            "patient-objection",
          ]),
        },
      ],
    },
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/communication-category",
            code: rand(["alert", "notification", "reminder", "instruction"]),
          },
        ],
      },
    ],
    priority: rand(["routine", "urgent", "asap", "stat"]),
    medium: undefined,
    subject: undefined,
    topic: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/communication-topic",
          code: rand([
            "prescription-refill-request",
            "progress-update",
            "report-labs",
            "appointment-reminder",
            "phone-consult",
            "summary-report",
          ]),
        },
      ],
    },
    about: undefined,
    encounter: undefined,
    sent: randRecentDate().toISOString(),
    received: randRecentDate().toISOString(),
    recipient: undefined,
    sender: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    payload: undefined,
    note: undefined,
  };
}

function fakeCommunicationRequest(): CommunicationRequest {
  return {
    resourceType: "CommunicationRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    replaces: undefined,
    groupIdentifier: undefined,
    status: rand([
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    statusReason: undefined,
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/communication-category",
            code: rand(["alert", "notification", "reminder", "instruction"]),
          },
        ],
      },
    ],
    priority: rand(["routine", "urgent", "asap", "stat"]),
    doNotPerform: randBoolean(),
    medium: undefined,
    subject: undefined,
    about: undefined,
    encounter: undefined,
    payload: undefined,
    authoredOn: randRecentDate().toISOString(),
    requester: undefined,
    recipient: undefined,
    sender: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    note: undefined,
  };
}

function fakeCompartmentDefinition(): CompartmentDefinition {
  return {
    resourceType: "CompartmentDefinition",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    purpose: randParagraph(),
    code: rand([
      "Patient",
      "Encounter",
      "RelatedPerson",
      "Practitioner",
      "Device",
    ]),
    search: randBoolean(),
    resource: undefined,
  };
}

function fakeComposition(): Composition {
  return {
    resourceType: "Composition",
    id: randUuid(),
    identifier: fakeIdentifier(randAlpha()),
    status: rand(["preliminary", "final", "amended", "entered-in-error"]),
    type: {},
    category: undefined,
    subject: undefined,
    encounter: undefined,
    date: randRecentDate().toISOString(),
    author: [
      {
        reference: `Practitioner/${randUuid()}`,
      },
    ],
    title: randText(),
    confidentiality: randText(),
    attester: undefined,
    custodian: undefined,
    relatesTo: undefined,
    event: undefined,
    section: undefined,
  };
}

function fakeConceptMap(): ConceptMap {
  return {
    resourceType: "ConceptMap",
    id: randUuid(),
    url: randUrl(),
    identifier: fakeIdentifier(randAlpha()),
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    group: undefined,
  };
}

function fakeCondition(): Condition {
  return {
    resourceType: "Condition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    clinicalStatus: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/condition-clinical",
          code: rand(["active", "inactive"]),
        },
      ],
    },
    verificationStatus: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
          code: rand([
            "unconfirmed",
            "confirmed",
            "refuted",
            "entered-in-error",
          ]),
        },
      ],
    },
    category: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/condition-category",
            code: rand(["problem-list-item", "encounter-diagnosis"]),
          },
        ],
      },
    ],
    severity: {
      coding: [
        {
          system: "http://snomed.info/sct",
          code: rand(["24484000", "6736007", "255604002"]),
        },
      ],
    },
    code: undefined,
    bodySite: undefined,
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    recordedDate: randRecentDate().toISOString(),
    recorder: undefined,
    asserter: undefined,
    stage: undefined,
    evidence: undefined,
    note: undefined,
  };
}

function fakeConsent(): Consent {
  return {
    resourceType: "Consent",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "draft",
      "proposed",
      "active",
      "rejected",
      "inactive",
      "entered-in-error",
    ]),
    scope: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/consentscope",
          code: rand(["adr", "research", "patient-privacy", "treatment"]),
        },
      ],
    },
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
            code: rand([
              "acd",
              "dnr",
              "emrgonly",
              "hcd",
              "npp",
              "polst",
              "research",
              "rsdid",
              "rsreid",
            ]),
          },
        ],
      },
    ],
    patient: undefined,
    dateTime: randRecentDate().toISOString(),
    performer: undefined,
    organization: undefined,
    policy: undefined,
    policyRule: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/consentpolicycodes",
          code: rand([
            "cric",
            "illinois-minor-procedure",
            "hipaa-auth",
            "hipaa-npp",
            "hipaa-restrictions",
            "hipaa-research",
            "hipaa-self-pay",
            "mdhhs-5515",
            "nyssipp",
            "va-10-0484",
            "va-10-0485",
            "va-10-5345",
            "va-10-5345a",
            "va-10-5345a-mhv",
            "va-10-10116",
            "va-21-4142",
            "ssa-827",
            "dch-3927",
            "squaxin",
            "nl-lsp",
            "at-elga",
            "nih-hipaa",
            "nci",
            "nih-grdr",
            "nih-527",
            "ga4gh",
          ]),
        },
      ],
    },
    verification: undefined,
    provision: undefined,
  };
}

function fakeContract(): Contract {
  return {
    resourceType: "Contract",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    url: randUrl(),
    version: randText(),
    status: rand([
      "amended",
      "appended",
      "cancelled",
      "disputed",
      "entered-in-error",
      "executable",
      "executed",
      "negotiable",
      "offered",
      "policy",
      "rejected",
      "renewed",
      "revoked",
      "resolved",
      "terminated",
    ]),
    legalState: {
      coding: [
        {
          system: "http://hl7.org/fhir/contract-legalstate",
          code: rand([
            "amended",
            "appended",
            "cancelled",
            "disputed",
            "entered-in-error",
            "executable",
            "executed",
            "negotiable",
            "offered",
            "policy",
            "rejected",
            "renewed",
            "revoked",
            "resolved",
            "terminated",
          ]),
        },
      ],
    },
    instantiatesCanonical: undefined,
    instantiatesUri: randUrl(),
    contentDerivative: undefined,
    issued: randRecentDate().toISOString(),
    applies: undefined,
    expirationType: {
      coding: [
        {
          system: "http://hl7.org/fhir/contract-expiration-type",
          code: rand(["breach"]),
        },
      ],
    },
    subject: undefined,
    authority: undefined,
    domain: undefined,
    site: undefined,
    name: randText(),
    title: randText(),
    subtitle: randText(),
    alias: [randText()],
    author: undefined,
    scope: {
      coding: [
        {
          system: "http://hl7.org/fhir/contract-scope",
          code: rand(["policy"]),
        },
      ],
    },
    type: undefined,
    subType: undefined,
    contentDefinition: undefined,
    term: undefined,
    supportingInfo: undefined,
    relevantHistory: undefined,
    signer: undefined,
    friendly: undefined,
    legal: undefined,
    rule: undefined,
  };
}

function fakeCoverage(): Coverage {
  return {
    resourceType: "Coverage",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    type: undefined,
    policyHolder: undefined,
    subscriber: undefined,
    subscriberId: randText(),
    beneficiary: {
      reference: `Patient/${randUuid()}`,
    },
    dependent: randText(),
    relationship: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
          code: rand([
            "child",
            "parent",
            "spouse",
            "common",
            "other",
            "self",
            "injured",
          ]),
        },
      ],
    },
    period: undefined,
    payor: [
      {
        reference: `Organization/${randUuid()}`,
      },
    ],
    class: undefined,
    order: undefined,
    network: randText(),
    costToBeneficiary: undefined,
    subrogation: randBoolean(),
    contract: undefined,
  };
}

function fakeCoverageEligibilityRequest(): CoverageEligibilityRequest {
  return {
    resourceType: "CoverageEligibilityRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    priority: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/processpriority",
          code: rand(["stat", "normal", "deferred"]),
        },
      ],
    },
    purpose: [
      rand(["auth-requirements", "benefits", "discovery", "validation"]),
    ],
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    created: randRecentDate().toISOString(),
    enterer: undefined,
    provider: undefined,
    insurer: {
      reference: `Organization/${randUuid()}`,
    },
    facility: undefined,
    supportingInfo: undefined,
    insurance: undefined,
    item: undefined,
  };
}

function fakeCoverageEligibilityResponse(): CoverageEligibilityResponse {
  return {
    resourceType: "CoverageEligibilityResponse",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    purpose: [
      rand(["auth-requirements", "benefits", "discovery", "validation"]),
    ],
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    created: randRecentDate().toISOString(),
    requestor: undefined,
    request: {
      reference: `CoverageEligibilityRequest/${randUuid()}`,
    },
    outcome: rand(["queued", "complete", "error", "partial"]),
    disposition: randText(),
    insurer: {
      reference: `Organization/${randUuid()}`,
    },
    insurance: undefined,
    preAuthRef: randText(),
    form: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/forms-codes",
          code: rand(["1", "2"]),
        },
      ],
    },
    error: undefined,
  };
}

function fakeDetectedIssue(): DetectedIssue {
  return {
    resourceType: "DetectedIssue",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "registered",
      "preliminary",
      "final",
      "amended",
      "cancelled",
      "entered-in-error",
      "unknown",
    ]),
    code: undefined,
    severity: rand(["high", "moderate", "low"]),
    patient: undefined,
    author: undefined,
    implicated: undefined,
    evidence: undefined,
    detail: randText(),
    reference: randUrl(),
    mitigation: undefined,
  };
}

function fakeDevice(): Device {
  return {
    resourceType: "Device",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    definition: undefined,
    udiCarrier: undefined,
    status: rand(["active", "inactive", "entered-in-error", "unknown"]),
    statusReason: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/device-status-reason",
            code: rand([
              "online",
              "paused",
              "standby",
              "offline",
              "not-ready",
              "transduc-discon",
              "hw-discon",
              "off",
            ]),
          },
        ],
      },
    ],
    distinctIdentifier: randText(),
    manufacturer: randText(),
    manufactureDate: randRecentDate().toISOString(),
    expirationDate: randRecentDate().toISOString(),
    lotNumber: randText(),
    serialNumber: randText(),
    deviceName: undefined,
    modelNumber: randText(),
    partNumber: randText(),
    type: undefined,
    specialization: undefined,
    version: undefined,
    property: undefined,
    patient: undefined,
    owner: undefined,
    contact: [fakeContactPoint()],
    location: undefined,
    url: randUrl(),
    note: undefined,
    safety: undefined,
    parent: undefined,
  };
}

function fakeDeviceDefinition(): DeviceDefinition {
  return {
    resourceType: "DeviceDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    udiDeviceIdentifier: undefined,
    deviceName: undefined,
    modelNumber: randText(),
    type: undefined,
    specialization: undefined,
    version: [randText()],
    safety: undefined,
    shelfLifeStorage: undefined,
    physicalCharacteristics: undefined,
    languageCode: undefined,
    capability: undefined,
    property: undefined,
    owner: undefined,
    contact: [fakeContactPoint()],
    url: randUrl(),
    onlineInformation: randUrl(),
    note: undefined,
    quantity: undefined,
    parentDevice: undefined,
    material: undefined,
  };
}

function fakeDeviceMetric(): DeviceMetric {
  return {
    resourceType: "DeviceMetric",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    type: {},
    unit: undefined,
    source: undefined,
    parent: undefined,
    operationalStatus: rand(["on", "off", "standby", "entered-in-error"]),
    color: rand([
      "black",
      "red",
      "green",
      "yellow",
      "blue",
      "magenta",
      "cyan",
      "white",
    ]),
    category: rand(["measurement", "setting", "calculation", "unspecified"]),
    measurementPeriod: undefined,
    calibration: undefined,
  };
}

function fakeDeviceRequest(): DeviceRequest {
  return {
    resourceType: "DeviceRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    priorRequest: undefined,
    groupIdentifier: undefined,
    status: rand([
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    intent: rand(["proposal", "plan", "directive", "order", "option"]),
    priority: rand(["routine", "urgent", "asap", "stat"]),
    parameter: undefined,
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    authoredOn: randRecentDate().toISOString(),
    requester: undefined,
    performerType: undefined,
    performer: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    insurance: undefined,
    supportingInfo: undefined,
    note: undefined,
    relevantHistory: undefined,
  };
}

function fakeDeviceUseStatement(): DeviceUseStatement {
  return {
    resourceType: "DeviceUseStatement",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    status: rand([
      "active",
      "completed",
      "entered-in-error",
      "intended",
      "stopped",
      "on-hold",
    ]),
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    derivedFrom: undefined,
    recordedOn: randRecentDate().toISOString(),
    source: undefined,
    device: {
      reference: `Device/${randUuid()}`,
    },
    reasonCode: undefined,
    reasonReference: undefined,
    bodySite: undefined,
    note: undefined,
  };
}

function fakeDiagnosticReport(): DiagnosticReport {
  return {
    resourceType: "DiagnosticReport",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    status: rand([
      "registered",
      "partial",
      "final",
      "amended",
      "cancelled",
      "entered-in-error",
      "unknown",
    ]),
    category: undefined,
    code: {},
    subject: undefined,
    encounter: undefined,
    issued: randRecentDate().toISOString(),
    performer: undefined,
    resultsInterpreter: undefined,
    specimen: undefined,
    result: undefined,
    imagingStudy: undefined,
    media: undefined,
    conclusion: randText(),
    conclusionCode: undefined,
    presentedForm: undefined,
  };
}

function fakeDocumentManifest(): DocumentManifest {
  return {
    resourceType: "DocumentManifest",
    id: randUuid(),
    masterIdentifier: undefined,
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["current", "superseded", "entered-in-error"]),
    type: undefined,
    subject: undefined,
    created: randRecentDate().toISOString(),
    author: undefined,
    recipient: undefined,
    source: randUrl(),
    description: randText(),
    content: [
      {
        reference: `Resource/${randUuid()}`,
      },
    ],
    related: undefined,
  };
}

function fakeDocumentReference(): DocumentReference {
  return {
    resourceType: "DocumentReference",
    id: randUuid(),
    masterIdentifier: undefined,
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["current", "superseded", "entered-in-error"]),
    docStatus: rand(["preliminary", "final", "amended", "entered-in-error"]),
    type: undefined,
    category: [
      {
        coding: [
          {
            system: "http://loinc.org",
            code: rand([
              "11369-6",
              "11485-0",
              "11486-8",
              "11488-4",
              "11506-3",
              "11543-6",
              "15508-5",
              "18726-0",
              "18761-7",
              "18842-5",
              "26436-6",
              "26441-6",
              "26442-4",
              "27895-2",
              "27896-0",
              "27897-8",
              "27898-6",
              "28570-0",
              "28619-5",
              "28634-4",
              "29749-9",
              "29750-7",
              "29751-5",
              "29752-3",
              "34109-9",
              "34117-2",
              "34121-4",
              "34122-2",
              "34133-9",
              "34140-4",
              "34748-4",
              "34775-7",
              "47039-3",
              "47042-7",
              "47045-0",
              "47046-8",
              "47049-2",
              "57017-6",
              "57016-8",
              "56445-0",
              "53576-5",
              "56447-6",
              "18748-4",
              "11504-8",
              "57133-1",
            ]),
          },
        ],
      },
    ],
    subject: undefined,
    date: randRecentDate().toISOString(),
    author: undefined,
    authenticator: undefined,
    custodian: undefined,
    relatesTo: undefined,
    description: randText(),
    securityLabel: undefined,
    content: [],
    context: undefined,
  };
}

function fakeEncounter(): Encounter {
  return {
    resourceType: "Encounter",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "planned",
      "arrived",
      "triaged",
      "in-progress",
      "onleave",
      "finished",
      "cancelled",
      "entered-in-error",
      "unknown",
    ]),
    statusHistory: undefined,
    class: {},
    classHistory: undefined,
    type: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/encounter-type",
            code: rand(["ADMS", "BD/BM-clin", "CCS60", "OKI"]),
          },
        ],
      },
    ],
    serviceType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/service-type",
          code: rand([
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "513",
            "514",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "589",
            "590",
            "591",
            "593",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
          ]),
        },
      ],
    },
    priority: undefined,
    subject: undefined,
    episodeOfCare: undefined,
    basedOn: undefined,
    participant: undefined,
    appointment: undefined,
    period: undefined,
    length: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    diagnosis: undefined,
    account: undefined,
    hospitalization: undefined,
    location: undefined,
    serviceProvider: undefined,
    partOf: undefined,
  };
}

function fakeEndpoint(): Endpoint {
  return {
    resourceType: "Endpoint",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "active",
      "suspended",
      "error",
      "off",
      "entered-in-error",
      "test",
    ]),
    connectionType: {
      system: "http://terminology.hl7.org/CodeSystem/endpoint-connection-type",
      code: rand([
        "ihe-xcpd",
        "ihe-xca",
        "ihe-xdr",
        "ihe-xds",
        "ihe-iid",
        "dicom-wado-rs",
        "dicom-qido-rs",
        "dicom-stow-rs",
        "dicom-wado-uri",
        "hl7-fhir-rest",
        "hl7-fhir-msg",
        "hl7v2-mllp",
        "secure-email",
        "direct-project",
      ]),
    },
    name: randText(),
    managingOrganization: undefined,
    contact: [fakeContactPoint()],
    period: undefined,
    payloadType: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/endpoint-payload-type",
            code: rand(["any", "none"]),
          },
        ],
      },
    ],
    payloadMimeType: [randText()],
    address: randUrl(),
    header: [randText()],
  };
}

function fakeEnrollmentRequest(): EnrollmentRequest {
  return {
    resourceType: "EnrollmentRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    created: randRecentDate().toISOString(),
    insurer: undefined,
    provider: undefined,
    candidate: undefined,
    coverage: undefined,
  };
}

function fakeEnrollmentResponse(): EnrollmentResponse {
  return {
    resourceType: "EnrollmentResponse",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    request: undefined,
    outcome: rand(["queued", "complete", "error", "partial"]),
    disposition: randText(),
    created: randRecentDate().toISOString(),
    organization: undefined,
    requestProvider: undefined,
  };
}

function fakeEpisodeOfCare(): EpisodeOfCare {
  return {
    resourceType: "EpisodeOfCare",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "planned",
      "waitlist",
      "active",
      "onhold",
      "finished",
      "cancelled",
      "entered-in-error",
    ]),
    statusHistory: undefined,
    type: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/episodeofcare-type",
            code: rand(["hacc", "pac", "diab", "da", "cacp"]),
          },
        ],
      },
    ],
    diagnosis: undefined,
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    managingOrganization: undefined,
    period: undefined,
    referralRequest: undefined,
    careManager: undefined,
    team: undefined,
    account: undefined,
  };
}

function fakeEventDefinition(): EventDefinition {
  return {
    resourceType: "EventDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    trigger: [],
  };
}

function fakeEvidence(): Evidence {
  return {
    resourceType: "Evidence",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    date: randRecentDate().toISOString(),
    useContext: undefined,
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    publisher: randText(),
    contact: undefined,
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    description: randParagraph(),
    assertion: randParagraph(),
    note: undefined,
    variableDefinition: [],
    synthesisType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
          code: rand([
            "std-MA",
            "IPD-MA",
            "indirect-NMA",
            "combined-NMA",
            "range",
            "classification",
            "NotApplicable",
          ]),
        },
      ],
    },
    studyType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/study-type",
          code: rand([
            "RCT",
            "CCT",
            "cohort",
            "case-control",
            "series",
            "case-report",
            "mixed",
          ]),
        },
      ],
    },
    statistic: undefined,
    certainty: undefined,
  };
}

function fakeEvidenceReport(): EvidenceReport {
  return {
    resourceType: "EvidenceReport",
    id: randUuid(),
    url: randUrl(),
    status: rand(["draft", "active", "retired", "unknown"]),
    useContext: undefined,
    identifier: [fakeIdentifier(randAlpha())],
    relatedIdentifier: undefined,
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/evidence-report-type",
          code: rand([
            "classification",
            "search-results",
            "resources-compiled",
            "text-structured",
          ]),
        },
      ],
    },
    note: undefined,
    relatedArtifact: undefined,
    subject: {},
    publisher: randText(),
    contact: undefined,
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatesTo: undefined,
    section: undefined,
  };
}

function fakeEvidenceVariable(): EvidenceVariable {
  return {
    resourceType: "EvidenceVariable",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    shortTitle: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    date: randRecentDate().toISOString(),
    description: randParagraph(),
    note: undefined,
    useContext: undefined,
    publisher: randText(),
    contact: undefined,
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    actual: randBoolean(),
    characteristicCombination: rand(["intersection", "union"]),
    characteristic: undefined,
    handling: rand(["continuous", "dichotomous", "ordinal", "polychotomous"]),
    category: undefined,
  };
}

function fakeExampleScenario(): ExampleScenario {
  return {
    resourceType: "ExampleScenario",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    useContext: undefined,
    jurisdiction: undefined,
    copyright: randParagraph(),
    purpose: randParagraph(),
    actor: undefined,
    instance: undefined,
    process: undefined,
    workflow: undefined,
  };
}

function fakeExplanationOfBenefit(): ExplanationOfBenefit {
  return {
    resourceType: "ExplanationOfBenefit",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/claim-type",
          code: rand([
            "institutional",
            "oral",
            "pharmacy",
            "professional",
            "vision",
          ]),
        },
      ],
    },
    subType: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/ex-claimsubtype",
          code: rand(["ortho", "emergency"]),
        },
      ],
    },
    use: rand(["claim", "preauthorization", "predetermination"]),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    billablePeriod: undefined,
    created: randRecentDate().toISOString(),
    enterer: undefined,
    insurer: {
      reference: `Organization/${randUuid()}`,
    },
    provider: {
      reference: `Practitioner/${randUuid()}`,
    },
    priority: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/processpriority",
          code: rand(["stat", "normal", "deferred"]),
        },
      ],
    },
    fundsReserveRequested: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/fundsreserve",
          code: rand(["patient", "provider", "none"]),
        },
      ],
    },
    fundsReserve: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/fundsreserve",
          code: rand(["patient", "provider", "none"]),
        },
      ],
    },
    related: undefined,
    prescription: undefined,
    originalPrescription: undefined,
    payee: undefined,
    referral: undefined,
    facility: undefined,
    claim: undefined,
    claimResponse: undefined,
    outcome: rand(["queued", "complete", "error", "partial"]),
    disposition: randText(),
    preAuthRef: [randText()],
    preAuthRefPeriod: undefined,
    careTeam: undefined,
    supportingInfo: undefined,
    diagnosis: undefined,
    procedure: undefined,
    precedence: undefined,
    insurance: [],
    accident: undefined,
    item: undefined,
    addItem: undefined,
    adjudication: undefined,
    total: undefined,
    payment: undefined,
    formCode: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/forms-codes",
          code: rand(["1", "2"]),
        },
      ],
    },
    form: undefined,
    processNote: undefined,
    benefitPeriod: undefined,
    benefitBalance: undefined,
  };
}

function fakeFamilyMemberHistory(): FamilyMemberHistory {
  return {
    resourceType: "FamilyMemberHistory",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    status: rand([
      "partial",
      "completed",
      "entered-in-error",
      "health-unknown",
    ]),
    dataAbsentReason: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/history-absent-reason",
          code: rand([
            "subject-unknown",
            "withheld",
            "unable-to-obtain",
            "deferred",
          ]),
        },
      ],
    },
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    date: randRecentDate().toISOString(),
    name: randText(),
    relationship: {},
    sex: {
      coding: [
        {
          system: "http://hl7.org/fhir/administrative-gender",
          code: rand(["male", "female", "other", "unknown"]),
        },
      ],
    },
    estimatedAge: randBoolean(),
    reasonCode: undefined,
    reasonReference: undefined,
    note: undefined,
    condition: undefined,
  };
}

function fakeFlag(): Flag {
  return {
    resourceType: "Flag",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "inactive", "entered-in-error"]),
    category: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/flag-category",
            code: rand([
              "diet",
              "drug",
              "lab",
              "admin",
              "contact",
              "clinical",
              "behavioral",
              "research",
              "advance-directive",
              "safety",
            ]),
          },
        ],
      },
    ],
    code: {},
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    period: undefined,
    encounter: undefined,
    author: undefined,
  };
}

function fakeGoal(): Goal {
  return {
    resourceType: "Goal",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    lifecycleStatus: rand([
      "proposed",
      "planned",
      "accepted",
      "cancelled",
      "entered-in-error",
      "rejected",
    ]),
    achievementStatus: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
          code: rand(["in-progress", "achieved", "not-achieved"]),
        },
      ],
    },
    category: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/goal-category",
            code: rand([
              "dietary",
              "safety",
              "behavioral",
              "nursing",
              "physiotherapy",
            ]),
          },
        ],
      },
    ],
    priority: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/goal-priority",
          code: rand(["high-priority", "medium-priority", "low-priority"]),
        },
      ],
    },
    description: {},
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    target: undefined,
    statusDate: randRecentDate().toISOString().slice(0, 10),
    statusReason: randText(),
    expressedBy: undefined,
    addresses: undefined,
    note: undefined,
    outcomeCode: undefined,
    outcomeReference: undefined,
  };
}

function fakeGraphDefinition(): GraphDefinition {
  return {
    resourceType: "GraphDefinition",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    start: rand(["Resource"]),
    profile: undefined,
    link: undefined,
  };
}

function fakeGroup(): Group {
  return {
    resourceType: "Group",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    type: rand([
      "person",
      "animal",
      "practitioner",
      "device",
      "medication",
      "substance",
    ]),
    actual: randBoolean(),
    code: undefined,
    name: randText(),
    quantity: undefined,
    managingEntity: undefined,
    characteristic: undefined,
    member: undefined,
  };
}

function fakeGuidanceResponse(): GuidanceResponse {
  return {
    resourceType: "GuidanceResponse",
    id: randUuid(),
    requestIdentifier: undefined,
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "success",
      "data-requested",
      "data-required",
      "in-progress",
      "failure",
      "entered-in-error",
    ]),
    subject: undefined,
    encounter: undefined,
    occurrenceDateTime: randRecentDate().toISOString(),
    performer: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    note: undefined,
    evaluationMessage: undefined,
    outputParameters: undefined,
    result: undefined,
    dataRequirement: undefined,
  };
}

function fakeHealthcareService(): HealthcareService {
  return {
    resourceType: "HealthcareService",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    providedBy: undefined,
    category: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-category",
            code: rand([
              "1",
              "2",
              "34",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "36",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "35",
              "18",
              "19",
              "20",
              "21",
              "22",
              "38",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "37",
              "33",
            ]),
          },
        ],
      },
    ],
    type: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-type",
            code: rand([
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60",
              "61",
              "62",
              "63",
              "64",
              "65",
              "66",
              "67",
              "68",
              "69",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "78",
              "79",
              "80",
              "81",
              "82",
              "83",
              "84",
              "85",
              "86",
              "87",
              "88",
              "89",
              "90",
              "91",
              "92",
              "93",
              "94",
              "95",
              "96",
              "97",
              "98",
              "99",
              "100",
              "101",
              "102",
              "103",
              "104",
              "105",
              "106",
              "107",
              "108",
              "109",
              "110",
              "111",
              "112",
              "113",
              "114",
              "115",
              "116",
              "117",
              "118",
              "119",
              "120",
              "121",
              "122",
              "123",
              "124",
              "125",
              "126",
              "127",
              "128",
              "129",
              "130",
              "131",
              "132",
              "133",
              "134",
              "135",
              "136",
              "137",
              "138",
              "139",
              "140",
              "141",
              "142",
              "143",
              "144",
              "145",
              "146",
              "147",
              "148",
              "149",
              "150",
              "151",
              "152",
              "153",
              "154",
              "155",
              "156",
              "157",
              "158",
              "159",
              "160",
              "161",
              "162",
              "163",
              "164",
              "165",
              "166",
              "167",
              "168",
              "169",
              "170",
              "171",
              "172",
              "173",
              "174",
              "175",
              "176",
              "177",
              "178",
              "179",
              "180",
              "181",
              "182",
              "183",
              "184",
              "185",
              "186",
              "187",
              "188",
              "189",
              "190",
              "191",
              "192",
              "193",
              "194",
              "195",
              "196",
              "197",
              "198",
              "199",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "208",
              "209",
              "210",
              "211",
              "212",
              "213",
              "214",
              "215",
              "216",
              "217",
              "218",
              "219",
              "220",
              "221",
              "222",
              "223",
              "224",
              "225",
              "226",
              "227",
              "228",
              "229",
              "230",
              "231",
              "232",
              "233",
              "234",
              "235",
              "236",
              "237",
              "238",
              "239",
              "240",
              "241",
              "242",
              "243",
              "244",
              "245",
              "246",
              "247",
              "248",
              "249",
              "250",
              "251",
              "252",
              "253",
              "254",
              "255",
              "256",
              "257",
              "258",
              "259",
              "260",
              "261",
              "262",
              "263",
              "264",
              "265",
              "266",
              "267",
              "268",
              "269",
              "270",
              "271",
              "272",
              "273",
              "274",
              "275",
              "276",
              "277",
              "278",
              "279",
              "280",
              "281",
              "282",
              "283",
              "284",
              "285",
              "286",
              "287",
              "288",
              "289",
              "290",
              "291",
              "292",
              "293",
              "294",
              "295",
              "296",
              "297",
              "298",
              "299",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "306",
              "307",
              "308",
              "309",
              "310",
              "311",
              "312",
              "313",
              "314",
              "315",
              "316",
              "317",
              "318",
              "319",
              "320",
              "321",
              "322",
              "323",
              "324",
              "325",
              "326",
              "327",
              "328",
              "330",
              "331",
              "332",
              "333",
              "334",
              "335",
              "336",
              "337",
              "338",
              "339",
              "340",
              "341",
              "342",
              "343",
              "344",
              "345",
              "346",
              "347",
              "348",
              "349",
              "350",
              "351",
              "352",
              "353",
              "354",
              "355",
              "356",
              "357",
              "358",
              "359",
              "360",
              "361",
              "362",
              "364",
              "365",
              "366",
              "367",
              "368",
              "369",
              "370",
              "371",
              "372",
              "373",
              "374",
              "375",
              "376",
              "377",
              "378",
              "379",
              "380",
              "381",
              "382",
              "383",
              "384",
              "385",
              "386",
              "387",
              "388",
              "389",
              "390",
              "391",
              "392",
              "393",
              "394",
              "395",
              "396",
              "397",
              "398",
              "399",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "418",
              "419",
              "420",
              "421",
              "422",
              "423",
              "424",
              "425",
              "426",
              "427",
              "428",
              "429",
              "430",
              "431",
              "432",
              "433",
              "434",
              "435",
              "436",
              "437",
              "438",
              "439",
              "440",
              "441",
              "442",
              "443",
              "444",
              "445",
              "446",
              "447",
              "448",
              "449",
              "450",
              "451",
              "452",
              "453",
              "454",
              "455",
              "456",
              "457",
              "458",
              "459",
              "460",
              "461",
              "462",
              "463",
              "464",
              "465",
              "466",
              "467",
              "468",
              "469",
              "470",
              "471",
              "472",
              "473",
              "474",
              "475",
              "476",
              "477",
              "478",
              "479",
              "480",
              "481",
              "482",
              "483",
              "484",
              "485",
              "486",
              "488",
              "489",
              "490",
              "491",
              "492",
              "493",
              "494",
              "495",
              "496",
              "497",
              "498",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "506",
              "507",
              "508",
              "509",
              "510",
              "513",
              "514",
              "530",
              "531",
              "532",
              "533",
              "534",
              "535",
              "536",
              "537",
              "538",
              "539",
              "540",
              "541",
              "542",
              "543",
              "544",
              "545",
              "546",
              "547",
              "548",
              "550",
              "551",
              "552",
              "553",
              "554",
              "555",
              "556",
              "557",
              "558",
              "559",
              "560",
              "561",
              "562",
              "563",
              "564",
              "565",
              "566",
              "567",
              "568",
              "569",
              "570",
              "571",
              "572",
              "573",
              "574",
              "575",
              "576",
              "577",
              "580",
              "581",
              "582",
              "583",
              "584",
              "585",
              "589",
              "590",
              "591",
              "593",
              "599",
              "600",
              "601",
              "602",
              "603",
              "604",
              "605",
              "606",
              "607",
              "608",
              "609",
              "610",
              "611",
              "612",
              "613",
              "614",
              "615",
              "616",
              "617",
              "618",
              "619",
              "620",
              "621",
              "622",
              "623",
              "624",
              "625",
              "626",
              "627",
              "628",
              "629",
            ]),
          },
        ],
      },
    ],
    specialty: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "408467006",
              "394577000",
              "394578005",
              "421661004",
              "408462000",
              "394579002",
              "394804000",
              "394580004",
              "394803006",
              "408480009",
              "408454008",
              "394809005",
              "394592004",
              "394600006",
              "394601005",
              "394581000",
              "408478003",
              "394812008",
              "408444009",
              "394582007",
              "408475000",
              "410005002",
              "394583002",
              "419772000",
              "394584008",
              "408443003",
              "394802001",
              "394915009",
              "394814009",
              "394808002",
              "394811001",
              "408446006",
              "394586005",
              "394916005",
              "408472002",
              "394597005",
              "394598000",
              "394807007",
              "419192003",
              "408468001",
              "394593009",
              "394813003",
              "410001006",
              "394589003",
              "394591006",
              "394599008",
              "394649004",
              "408470005",
              "394585009",
              "394821009",
              "422191005",
              "394594003",
              "416304004",
              "418960008",
              "394882004",
              "394806003",
              "394588006",
              "408459003",
              "394607009",
              "419610006",
              "418058008",
              "420208008",
              "418652005",
              "418535003",
              "418862001",
              "419365004",
              "418002000",
              "419983000",
              "419170002",
              "419472004",
              "394539006",
              "420112009",
              "409968004",
              "394587001",
              "394913002",
              "408440000",
              "418112009",
              "419815003",
              "394914008",
              "408455009",
              "394602003",
              "408447002",
              "394810000",
              "408450004",
              "408476004",
              "408469009",
              "408466002",
              "408471009",
              "408464004",
              "408441001",
              "408465003",
              "394605001",
              "394608004",
              "408461007",
              "408460008",
              "408460008",
              "394606000",
              "408449004",
              "394608004",
              "418018006",
              "394604002",
              "394609007",
              "408474001",
              "394610002",
              "394611003",
              "408477008",
              "394801008",
              "408463005",
              "419321007",
              "394576009",
              "394590007",
              "409967009",
              "408448007",
              "419043006",
              "394612005",
              "394733009",
              "394732004",
            ]),
          },
        ],
      },
    ],
    location: undefined,
    name: randText(),
    comment: randText(),
    extraDetails: randParagraph(),
    photo: undefined,
    telecom: [fakeContactPoint()],
    coverageArea: undefined,
    serviceProvisionCode: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/service-provision-conditions",
            code: rand(["free", "disc", "cost"]),
          },
        ],
      },
    ],
    eligibility: undefined,
    program: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/program",
            code: rand([
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
            ]),
          },
        ],
      },
    ],
    characteristic: undefined,
    communication: [
      {
        coding: [
          {
            system: "urn:ietf:bcp:47",
            code: rand([
              "ar",
              "bn",
              "cs",
              "da",
              "de",
              "de-AT",
              "de-CH",
              "de-DE",
              "el",
              "en",
              "en-AU",
              "en-CA",
              "en-GB",
              "en-IN",
              "en-NZ",
              "en-SG",
              "en-US",
              "es",
              "es-AR",
              "es-ES",
              "es-UY",
              "fi",
              "fr",
              "fr-BE",
              "fr-CH",
              "fr-FR",
              "fy",
              "fy-NL",
              "hi",
              "hr",
              "it",
              "it-CH",
              "it-IT",
              "ja",
              "ko",
              "nl",
              "nl-BE",
              "nl-NL",
              "no",
              "no-NO",
              "pa",
              "pl",
              "pt",
              "pt-BR",
              "ru",
              "ru-RU",
              "sr",
              "sr-RS",
              "sv",
              "sv-SE",
              "te",
              "zh",
              "zh-CN",
              "zh-HK",
              "zh-SG",
              "zh-TW",
            ]),
          },
        ],
      },
    ],
    referralMethod: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/service-referral-method",
            code: rand(["fax", "phone", "elec", "semail", "mail"]),
          },
        ],
      },
    ],
    appointmentRequired: randBoolean(),
    availableTime: undefined,
    notAvailable: undefined,
    availabilityExceptions: randText(),
    endpoint: undefined,
  };
}

function fakeImagingStudy(): ImagingStudy {
  return {
    resourceType: "ImagingStudy",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "registered",
      "available",
      "cancelled",
      "entered-in-error",
      "unknown",
    ]),
    modality: undefined,
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    started: randRecentDate().toISOString(),
    basedOn: undefined,
    referrer: undefined,
    interpreter: undefined,
    endpoint: undefined,
    numberOfSeries: undefined,
    numberOfInstances: undefined,
    procedureReference: undefined,
    procedureCode: undefined,
    location: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    note: undefined,
    description: randText(),
    series: undefined,
  };
}

function fakeImmunization(): Immunization {
  return {
    resourceType: "Immunization",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["completed", "entered-in-error", "not-done"]),
    statusReason: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
          code: rand(["IMMUNE", "MEDPREC", "OSTOCK", "PATOBJ"]),
        },
      ],
    },
    vaccineCode: {},
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    recorded: randRecentDate().toISOString(),
    primarySource: randBoolean(),
    reportOrigin: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/immunization-origin",
          code: rand(["provider", "record", "recall", "school"]),
        },
      ],
    },
    location: undefined,
    manufacturer: undefined,
    lotNumber: randText(),
    expirationDate: randRecentDate().toISOString().slice(0, 10),
    site: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/v3-ActSite",
          code: rand(["LA", "RA"]),
        },
      ],
    },
    route: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
          code: rand([
            "IDINJ",
            "IM",
            "NASINHLC",
            "IVINJ",
            "PO",
            "SQ",
            "TRNSDERM",
          ]),
        },
      ],
    },
    doseQuantity: undefined,
    performer: undefined,
    note: undefined,
    reasonCode: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand(["429060002", "281657000"]),
          },
        ],
      },
    ],
    reasonReference: undefined,
    isSubpotent: randBoolean(),
    subpotentReason: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/immunization-subpotent-reason",
            code: rand(["partial", "coldchainbreak", "recall"]),
          },
        ],
      },
    ],
    education: undefined,
    programEligibility: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/immunization-program-eligibility",
            code: rand(["ineligible", "uninsured"]),
          },
        ],
      },
    ],
    fundingSource: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/immunization-funding-source",
          code: rand(["private", "public"]),
        },
      ],
    },
    reaction: undefined,
    protocolApplied: undefined,
  };
}

function fakeImmunizationEvaluation(): ImmunizationEvaluation {
  return {
    resourceType: "ImmunizationEvaluation",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["completed", "entered-in-error"]),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    date: randRecentDate().toISOString(),
    authority: undefined,
    targetDisease: {
      coding: [
        {
          system: "http://snomed.info/sct",
          code: rand([
            "1857005",
            "397430003",
            "14189004",
            "36989005",
            "36653000",
            "76902006",
            "709410003",
            "27836007",
            "398102009",
          ]),
        },
      ],
    },
    immunizationEvent: {
      reference: `Immunization/${randUuid()}`,
    },
    doseStatus: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status",
          code: rand(["valid", "notvalid"]),
        },
      ],
    },
    doseStatusReason: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason",
            code: rand([
              "advstorage",
              "coldchbrk",
              "explot",
              "outsidesched",
              "prodrecall",
            ]),
          },
        ],
      },
    ],
    description: randText(),
    series: randText(),
  };
}

function fakeImmunizationRecommendation(): ImmunizationRecommendation {
  return {
    resourceType: "ImmunizationRecommendation",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    date: randRecentDate().toISOString(),
    authority: undefined,
    recommendation: [],
  };
}

function fakeImplementationGuide(): ImplementationGuide {
  return {
    resourceType: "ImplementationGuide",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    copyright: randParagraph(),
    packageId: randText(),
    license: rand([
      "not-open-source",
      "0BSD",
      "AAL",
      "Abstyles",
      "Adobe-2006",
      "Adobe-Glyph",
      "ADSL",
      "AFL-1.1",
      "AFL-1.2",
      "AFL-2.0",
      "AFL-2.1",
      "AFL-3.0",
      "Afmparse",
      "AGPL-1.0-only",
      "AGPL-1.0-or-later",
      "AGPL-3.0-only",
      "AGPL-3.0-or-later",
      "Aladdin",
      "AMDPLPA",
      "AML",
      "AMPAS",
      "ANTLR-PD",
      "Apache-1.0",
      "Apache-1.1",
      "Apache-2.0",
      "APAFML",
      "APL-1.0",
      "APSL-1.0",
      "APSL-1.1",
      "APSL-1.2",
      "APSL-2.0",
      "Artistic-1.0-cl8",
      "Artistic-1.0-Perl",
      "Artistic-1.0",
      "Artistic-2.0",
      "Bahyph",
      "Barr",
      "Beerware",
      "BitTorrent-1.0",
      "BitTorrent-1.1",
      "Borceux",
      "BSD-1-Clause",
      "BSD-2-Clause-FreeBSD",
      "BSD-2-Clause-NetBSD",
      "BSD-2-Clause-Patent",
      "BSD-2-Clause",
      "BSD-3-Clause-Attribution",
      "BSD-3-Clause-Clear",
      "BSD-3-Clause-LBNL",
      "BSD-3-Clause-No-Nuclear-License-2014",
      "BSD-3-Clause-No-Nuclear-License",
      "BSD-3-Clause-No-Nuclear-Warranty",
      "BSD-3-Clause",
      "BSD-4-Clause-UC",
      "BSD-4-Clause",
      "BSD-Protection",
      "BSD-Source-Code",
      "BSL-1.0",
      "bzip2-1.0.5",
      "bzip2-1.0.6",
      "Caldera",
      "CATOSL-1.1",
      "CC-BY-1.0",
      "CC-BY-2.0",
      "CC-BY-2.5",
      "CC-BY-3.0",
      "CC-BY-4.0",
      "CC-BY-NC-1.0",
      "CC-BY-NC-2.0",
      "CC-BY-NC-2.5",
      "CC-BY-NC-3.0",
      "CC-BY-NC-4.0",
      "CC-BY-NC-ND-1.0",
      "CC-BY-NC-ND-2.0",
      "CC-BY-NC-ND-2.5",
      "CC-BY-NC-ND-3.0",
      "CC-BY-NC-ND-4.0",
      "CC-BY-NC-SA-1.0",
      "CC-BY-NC-SA-2.0",
      "CC-BY-NC-SA-2.5",
      "CC-BY-NC-SA-3.0",
      "CC-BY-NC-SA-4.0",
      "CC-BY-ND-1.0",
      "CC-BY-ND-2.0",
      "CC-BY-ND-2.5",
      "CC-BY-ND-3.0",
      "CC-BY-ND-4.0",
      "CC-BY-SA-1.0",
      "CC-BY-SA-2.0",
      "CC-BY-SA-2.5",
      "CC-BY-SA-3.0",
      "CC-BY-SA-4.0",
      "CC0-1.0",
      "CDDL-1.0",
      "CDDL-1.1",
      "CDLA-Permissive-1.0",
      "CDLA-Sharing-1.0",
      "CECILL-1.0",
      "CECILL-1.1",
      "CECILL-2.0",
      "CECILL-2.1",
      "CECILL-B",
      "CECILL-C",
      "ClArtistic",
      "CNRI-Jython",
      "CNRI-Python-GPL-Compatible",
      "CNRI-Python",
      "Condor-1.1",
      "CPAL-1.0",
      "CPL-1.0",
      "CPOL-1.02",
      "Crossword",
      "CrystalStacker",
      "CUA-OPL-1.0",
      "Cube",
      "curl",
      "D-FSL-1.0",
      "diffmark",
      "DOC",
      "Dotseqn",
      "DSDP",
      "dvipdfm",
      "ECL-1.0",
      "ECL-2.0",
      "EFL-1.0",
      "EFL-2.0",
      "eGenix",
      "Entessa",
      "EPL-1.0",
      "EPL-2.0",
      "ErlPL-1.1",
      "EUDatagrid",
      "EUPL-1.0",
      "EUPL-1.1",
      "EUPL-1.2",
      "Eurosym",
      "Fair",
      "Frameworx-1.0",
      "FreeImage",
      "FSFAP",
      "FSFUL",
      "FSFULLR",
      "FTL",
      "GFDL-1.1-only",
      "GFDL-1.1-or-later",
      "GFDL-1.2-only",
      "GFDL-1.2-or-later",
      "GFDL-1.3-only",
      "GFDL-1.3-or-later",
      "Giftware",
      "GL2PS",
      "Glide",
      "Glulxe",
      "gnuplot",
      "GPL-1.0-only",
      "GPL-1.0-or-later",
      "GPL-2.0-only",
      "GPL-2.0-or-later",
      "GPL-3.0-only",
      "GPL-3.0-or-later",
      "gSOAP-1.3b",
      "HaskellReport",
      "HPND",
      "IBM-pibs",
      "ICU",
      "IJG",
      "ImageMagick",
      "iMatix",
      "Imlib2",
      "Info-ZIP",
      "Intel-ACPI",
      "Intel",
      "Interbase-1.0",
      "IPA",
      "IPL-1.0",
      "ISC",
      "JasPer-2.0",
      "JSON",
      "LAL-1.2",
      "LAL-1.3",
      "Latex2e",
      "Leptonica",
      "LGPL-2.0-only",
      "LGPL-2.0-or-later",
      "LGPL-2.1-only",
      "LGPL-2.1-or-later",
      "LGPL-3.0-only",
      "LGPL-3.0-or-later",
      "LGPLLR",
      "Libpng",
      "libtiff",
      "LiLiQ-P-1.1",
      "LiLiQ-R-1.1",
      "LiLiQ-Rplus-1.1",
      "Linux-OpenIB",
      "LPL-1.0",
      "LPL-1.02",
      "LPPL-1.0",
      "LPPL-1.1",
      "LPPL-1.2",
      "LPPL-1.3a",
      "LPPL-1.3c",
      "MakeIndex",
      "MirOS",
      "MIT-0",
      "MIT-advertising",
      "MIT-CMU",
      "MIT-enna",
      "MIT-feh",
      "MIT",
      "MITNFA",
      "Motosoto",
      "mpich2",
      "MPL-1.0",
      "MPL-1.1",
      "MPL-2.0-no-copyleft-exception",
      "MPL-2.0",
      "MS-PL",
      "MS-RL",
      "MTLL",
      "Multics",
      "Mup",
      "NASA-1.3",
      "Naumen",
      "NBPL-1.0",
      "NCSA",
      "Net-SNMP",
      "NetCDF",
      "Newsletr",
      "NGPL",
      "NLOD-1.0",
      "NLPL",
      "Nokia",
      "NOSL",
      "Noweb",
      "NPL-1.0",
      "NPL-1.1",
      "NPOSL-3.0",
      "NRL",
      "NTP",
      "OCCT-PL",
      "OCLC-2.0",
      "ODbL-1.0",
      "OFL-1.0",
      "OFL-1.1",
      "OGTSL",
      "OLDAP-1.1",
      "OLDAP-1.2",
      "OLDAP-1.3",
      "OLDAP-1.4",
      "OLDAP-2.0.1",
      "OLDAP-2.0",
      "OLDAP-2.1",
      "OLDAP-2.2.1",
      "OLDAP-2.2.2",
      "OLDAP-2.2",
      "OLDAP-2.3",
      "OLDAP-2.4",
      "OLDAP-2.5",
      "OLDAP-2.6",
      "OLDAP-2.7",
      "OLDAP-2.8",
      "OML",
      "OpenSSL",
      "OPL-1.0",
      "OSET-PL-2.1",
      "OSL-1.0",
      "OSL-1.1",
      "OSL-2.0",
      "OSL-2.1",
      "OSL-3.0",
      "PDDL-1.0",
      "PHP-3.0",
      "PHP-3.01",
      "Plexus",
      "PostgreSQL",
      "psfrag",
      "psutils",
      "Python-2.0",
      "Qhull",
      "QPL-1.0",
      "Rdisc",
      "RHeCos-1.1",
      "RPL-1.1",
      "RPL-1.5",
      "RPSL-1.0",
      "RSA-MD",
      "RSCPL",
      "Ruby",
      "SAX-PD",
      "Saxpath",
      "SCEA",
      "Sendmail",
      "SGI-B-1.0",
      "SGI-B-1.1",
      "SGI-B-2.0",
      "SimPL-2.0",
      "SISSL-1.2",
      "SISSL",
      "Sleepycat",
      "SMLNJ",
      "SMPPL",
      "SNIA",
      "Spencer-86",
      "Spencer-94",
      "Spencer-99",
      "SPL-1.0",
      "SugarCRM-1.1.3",
      "SWL",
      "TCL",
      "TCP-wrappers",
      "TMate",
      "TORQUE-1.1",
      "TOSL",
      "Unicode-DFS-2015",
      "Unicode-DFS-2016",
      "Unicode-TOU",
      "Unlicense",
      "UPL-1.0",
      "Vim",
      "VOSTROM",
      "VSL-1.0",
      "W3C-19980720",
      "W3C-20150513",
      "W3C",
      "Watcom-1.0",
      "Wsuipa",
      "WTFPL",
      "X11",
      "Xerox",
      "XFree86-1.1",
      "xinetd",
      "Xnet",
      "xpp",
      "XSkat",
      "YPL-1.0",
      "YPL-1.1",
      "Zed",
      "Zend-2.0",
      "Zimbra-1.3",
      "Zimbra-1.4",
      "zlib-acknowledgement",
      "Zlib",
      "ZPL-1.1",
      "ZPL-2.0",
      "ZPL-2.1",
    ]),
    fhirVersion: [
      rand([
        "0.01",
        "0.05",
        "0.06",
        "0.11",
        "0.0.80",
        "0.0.81",
        "0.0.82",
        "0.4.0",
        "0.5.0",
        "1.0.0",
        "1.0.1",
        "1.0.2",
        "1.1.0",
        "1.4.0",
        "1.6.0",
        "1.8.0",
        "3.0.0",
        "3.0.1",
        "3.0.2",
        "3.3.0",
        "3.5.0",
        "4.0.0",
        "4.0.1",
        "4.1.0",
        "4.3.0-cibuild",
        "4.3.0-snapshot1",
        "4.3.0",
      ]),
    ],
    dependsOn: undefined,
    global: undefined,
    definition: undefined,
    manifest: undefined,
  };
}

function fakeIngredient(): Ingredient {
  return {
    resourceType: "Ingredient",
    id: randUuid(),
    identifier: fakeIdentifier(randAlpha()),
    status: rand(["draft", "active", "retired", "unknown"]),
    for: undefined,
    role: {
      coding: [
        {
          system: "http://hl7.org/fhir/ingredient-role",
          code: rand([
            "100000072072",
            "100000072073",
            "100000072082",
            "100000136065",
            "100000136066",
            "100000136178",
            "100000136179",
            "100000136561",
            "200000003427",
          ]),
        },
      ],
    },
    function: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/ingredient-function",
            code: rand(["Antioxidant", "AlkalizingAgent"]),
          },
        ],
      },
    ],
    allergenicIndicator: randBoolean(),
    manufacturer: undefined,
    substance: { code: buildCodeableConcept({}) },
  };
}

function fakeInsurancePlan(): InsurancePlan {
  return {
    resourceType: "InsurancePlan",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["draft", "active", "retired", "unknown"]),
    type: undefined,
    name: randText(),
    alias: [randText()],
    period: undefined,
    ownedBy: undefined,
    administeredBy: undefined,
    coverageArea: undefined,
    contact: undefined,
    endpoint: undefined,
    network: undefined,
    coverage: undefined,
    plan: undefined,
  };
}

function fakeInvoice(): Invoice {
  return {
    resourceType: "Invoice",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "draft",
      "issued",
      "balanced",
      "cancelled",
      "entered-in-error",
    ]),
    cancelledReason: randText(),
    type: undefined,
    subject: undefined,
    recipient: undefined,
    date: randRecentDate().toISOString(),
    participant: undefined,
    issuer: undefined,
    account: undefined,
    lineItem: undefined,
    totalPriceComponent: undefined,
    totalNet: undefined,
    totalGross: undefined,
    paymentTerms: randParagraph(),
    note: undefined,
  };
}

function fakeLibrary(): Library {
  return {
    resourceType: "Library",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/library-type",
          code: rand([
            "logic-library",
            "model-definition",
            "asset-collection",
            "module-definition",
          ]),
        },
      ],
    },
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    parameter: undefined,
    dataRequirement: undefined,
    content: undefined,
  };
}

function fakeLinkage(): Linkage {
  return {
    resourceType: "Linkage",
    id: randUuid(),
    active: randBoolean(),
    author: undefined,
    item: [],
  };
}

function fakeList(): List {
  return {
    resourceType: "List",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["current", "retired", "entered-in-error"]),
    mode: rand(["working", "snapshot", "changes"]),
    title: randText(),
    code: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
          code: rand([
            "alerts",
            "adverserxns",
            "allergies",
            "medications",
            "problems",
            "worklist",
            "waiting",
            "protocols",
            "plans",
          ]),
        },
      ],
    },
    subject: undefined,
    encounter: undefined,
    date: randRecentDate().toISOString(),
    source: undefined,
    orderedBy: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/list-order",
          code: rand([
            "user",
            "system",
            "event-date",
            "entry-date",
            "priority",
            "alphabetic",
            "category",
            "patient",
          ]),
        },
      ],
    },
    note: undefined,
    entry: undefined,
    emptyReason: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/list-empty-reason",
          code: rand([
            "nilknown",
            "notasked",
            "withheld",
            "unavailable",
            "notstarted",
            "closed",
          ]),
        },
      ],
    },
  };
}

function fakeLocation(): Location {
  return {
    resourceType: "Location",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "suspended", "inactive"]),
    operationalStatus: undefined,
    name: randText(),
    alias: [randText()],
    description: randText(),
    mode: rand(["instance", "kind"]),
    type: undefined,
    telecom: [fakeContactPoint()],
    address: fakeAddress(),
    physicalType: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/location-physical-type",
          code: rand([
            "si",
            "bu",
            "wi",
            "wa",
            "lvl",
            "co",
            "ro",
            "bd",
            "ve",
            "ho",
            "ca",
            "rd",
            "area",
            "jdn",
          ]),
        },
      ],
    },
    position: undefined,
    managingOrganization: undefined,
    partOf: undefined,
    hoursOfOperation: undefined,
    availabilityExceptions: randText(),
    endpoint: undefined,
  };
}

function fakeManufacturedItemDefinition(): ManufacturedItemDefinition {
  return {
    resourceType: "ManufacturedItemDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["draft", "active", "retired", "unknown"]),
    manufacturedDoseForm: {},
    unitOfPresentation: {
      coding: [
        {
          system: "http://hl7.org/fhir/unit-of-presentation",
          code: rand([
            "200000002108",
            "200000002109",
            "200000002110",
            "200000002111",
            "200000002112",
            "200000002113",
            "200000002114",
            "200000002115",
            "200000002116",
            "200000002117",
            "200000002118",
            "200000002119",
            "200000002120",
            "200000002121",
            "200000002122",
            "200000002123",
            "200000002124",
            "200000002125",
            "200000002126",
            "200000002127",
            "200000002128",
            "200000002129",
            "200000002130",
            "200000002131",
            "200000002132",
            "200000002133",
            "200000002134",
            "200000002135",
            "200000002136",
            "200000002137",
            "200000002138",
            "200000002139",
            "200000002140",
            "200000002141",
            "200000002142",
            "200000002143",
            "200000002144",
            "200000002145",
            "200000002146",
            "200000002147",
            "200000002148",
            "200000002149",
            "200000002150",
            "200000002151",
            "200000002152",
            "200000002153",
            "200000002154",
            "200000002155",
            "200000002156",
            "200000002157",
            "200000002158",
            "200000002159",
            "200000002163",
            "200000002164",
            "200000002165",
            "200000002166",
          ]),
        },
      ],
    },
    manufacturer: undefined,
    ingredient: undefined,
    property: undefined,
  };
}

function fakeMeasure(): Measure {
  return {
    resourceType: "Measure",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    library: undefined,
    disclaimer: randParagraph(),
    scoring: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/measure-scoring",
          code: rand(["proportion", "ratio", "continuous-variable", "cohort"]),
        },
      ],
    },
    compositeScoring: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/composite-measure-scoring",
          code: rand(["opportunity", "all-or-nothing", "linear", "weighted"]),
        },
      ],
    },
    type: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/measure-type",
            code: rand([
              "process",
              "outcome",
              "structure",
              "patient-reported-outcome",
              "composite",
            ]),
          },
        ],
      },
    ],
    riskAdjustment: randText(),
    rateAggregation: randText(),
    rationale: randParagraph(),
    clinicalRecommendationStatement: randParagraph(),
    improvementNotation: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/measure-improvement-notation",
          code: rand(["increase", "decrease"]),
        },
      ],
    },
    definition: [randParagraph()],
    guidance: randParagraph(),
    group: undefined,
    supplementalData: undefined,
  };
}

function fakeMeasureReport(): MeasureReport {
  return {
    resourceType: "MeasureReport",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["complete", "pending", "error"]),
    type: rand(["individual", "subject-list", "summary", "data-collection"]),
    measure: `Measure/${randUuid()}`,
    subject: undefined,
    date: randRecentDate().toISOString(),
    reporter: undefined,
    period: {},
    improvementNotation: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/measure-improvement-notation",
          code: rand(["increase", "decrease"]),
        },
      ],
    },
    group: undefined,
    evaluatedResource: undefined,
  };
}

function fakeMedia(): Media {
  return {
    resourceType: "Media",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    partOf: undefined,
    status: rand([
      "preparation",
      "in-progress",
      "not-done",
      "on-hold",
      "stopped",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/media-type",
          code: rand(["image", "video", "audio"]),
        },
      ],
    },
    modality: undefined,
    view: undefined,
    subject: undefined,
    encounter: undefined,
    issued: randRecentDate().toISOString(),
    operator: undefined,
    reasonCode: undefined,
    bodySite: undefined,
    deviceName: randText(),
    device: undefined,
    height: undefined,
    width: undefined,
    frames: undefined,
    duration: undefined,
    content: {},
    note: undefined,
  };
}

function fakeMedication(): Medication {
  return {
    resourceType: "Medication",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    code: undefined,
    status: rand(["active", "inactive", "entered-in-error"]),
    manufacturer: undefined,
    form: undefined,
    amount: undefined,
    ingredient: undefined,
    batch: undefined,
  };
}

function fakeMedicationAdministration(): MedicationAdministration {
  return {
    resourceType: "MedicationAdministration",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiates: [randUrl()],
    partOf: undefined,
    status: rand([
      "in-progress",
      "not-done",
      "on-hold",
      "completed",
      "entered-in-error",
      "stopped",
      "unknown",
    ]),
    statusReason: undefined,
    category: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/medication-admin-category",
          code: rand(["inpatient", "outpatient", "community"]),
        },
      ],
    },
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    context: undefined,
    supportingInformation: undefined,
    performer: undefined,
    reasonCode: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/reason-medication-given",
            code: rand(["a", "b", "c"]),
          },
        ],
      },
    ],
    reasonReference: undefined,
    request: undefined,
    device: undefined,
    note: undefined,
    dosage: undefined,
    eventHistory: undefined,
  };
}

function fakeMedicationDispense(): MedicationDispense {
  return {
    resourceType: "MedicationDispense",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    partOf: undefined,
    status: rand([
      "preparation",
      "in-progress",
      "cancelled",
      "on-hold",
      "completed",
      "entered-in-error",
      "stopped",
      "declined",
      "unknown",
    ]),
    category: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/medicationdispense-category",
          code: rand(["inpatient", "outpatient", "community", "discharge"]),
        },
      ],
    },
    subject: undefined,
    context: undefined,
    supportingInformation: undefined,
    performer: undefined,
    location: undefined,
    authorizingPrescription: undefined,
    type: undefined,
    quantity: undefined,
    daysSupply: undefined,
    whenPrepared: randRecentDate().toISOString(),
    whenHandedOver: randRecentDate().toISOString(),
    destination: undefined,
    receiver: undefined,
    note: undefined,
    dosageInstruction: undefined,
    substitution: undefined,
    detectedIssue: undefined,
    eventHistory: undefined,
  };
}

function fakeMedicationKnowledge(): MedicationKnowledge {
  return {
    resourceType: "MedicationKnowledge",
    id: randUuid(),
    code: undefined,
    status: rand(["active", "inactive", "entered-in-error"]),
    manufacturer: undefined,
    doseForm: undefined,
    amount: undefined,
    synonym: [randText()],
    relatedMedicationKnowledge: undefined,
    associatedMedication: undefined,
    productType: undefined,
    monograph: undefined,
    ingredient: undefined,
    preparationInstruction: randParagraph(),
    intendedRoute: undefined,
    cost: undefined,
    monitoringProgram: undefined,
    administrationGuidelines: undefined,
    medicineClassification: undefined,
    packaging: undefined,
    drugCharacteristic: undefined,
    contraindication: undefined,
    regulatory: undefined,
    kinetics: undefined,
  };
}

function fakeMedicationRequest(): MedicationRequest {
  return {
    resourceType: "MedicationRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "active",
      "on-hold",
      "cancelled",
      "completed",
      "entered-in-error",
      "stopped",
      "draft",
      "unknown",
    ]),
    statusReason: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason",
          code: rand([
            "altchoice",
            "clarif",
            "drughigh",
            "hospadm",
            "labint",
            "non-avail",
            "preg",
            "salg",
            "sddi",
            "sdupther",
            "sintol",
            "surg",
            "washout",
          ]),
        },
      ],
    },
    intent: rand([
      "proposal",
      "plan",
      "order",
      "original-order",
      "reflex-order",
      "filler-order",
      "instance-order",
      "option",
    ]),
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/medicationrequest-category",
            code: rand(["inpatient", "outpatient", "community", "discharge"]),
          },
        ],
      },
    ],
    priority: rand(["routine", "urgent", "asap", "stat"]),
    doNotPerform: randBoolean(),
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    supportingInformation: undefined,
    authoredOn: randRecentDate().toISOString(),
    requester: undefined,
    performer: undefined,
    performerType: undefined,
    recorder: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    groupIdentifier: undefined,
    courseOfTherapyType: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/medicationrequest-course-of-therapy",
          code: rand(["continuous", "acute", "seasonal"]),
        },
      ],
    },
    insurance: undefined,
    note: undefined,
    dosageInstruction: undefined,
    dispenseRequest: undefined,
    substitution: undefined,
    priorPrescription: undefined,
    detectedIssue: undefined,
    eventHistory: undefined,
  };
}

function fakeMedicationStatement(): MedicationStatement {
  return {
    resourceType: "MedicationStatement",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    partOf: undefined,
    status: rand([
      "active",
      "completed",
      "entered-in-error",
      "intended",
      "stopped",
      "on-hold",
      "unknown",
      "not-taken",
    ]),
    statusReason: undefined,
    category: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/medication-statement-category",
          code: rand([
            "inpatient",
            "outpatient",
            "community",
            "patientspecified",
          ]),
        },
      ],
    },
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    context: undefined,
    dateAsserted: randRecentDate().toISOString(),
    informationSource: undefined,
    derivedFrom: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    note: undefined,
    dosage: undefined,
  };
}

function fakeMedicinalProductDefinition(): MedicinalProductDefinition {
  return {
    resourceType: "MedicinalProductDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    type: {
      coding: [
        {
          system: "http://hl7.org/fhir/medicinal-product-type",
          code: rand(["MedicinalProduct", "InvestigationalProduct"]),
        },
      ],
    },
    domain: {
      coding: [
        {
          system: "http://hl7.org/fhir/medicinal-product-domain",
          code: rand(["Human", "Veterinary", "HumanAndVeterinary"]),
        },
      ],
    },
    version: randText(),
    status: {
      coding: [
        {
          system: "http://hl7.org/fhir/publication-status",
          code: rand(["draft", "active", "retired", "unknown"]),
        },
      ],
    },
    statusDate: randRecentDate().toISOString(),
    description: randParagraph(),
    combinedPharmaceuticalDoseForm: {
      coding: [
        {
          system: "http://hl7.org/fhir/combined-dose-form",
          code: rand([
            "100000073366",
            "100000073651",
            "100000073774",
            "100000073781",
            "100000073801",
            "100000073860",
            "100000073868",
            "100000073869",
            "100000073884",
            "100000073891",
            "100000073892",
            "100000073941",
            "100000073972",
            "100000073973",
            "100000073974",
            "100000073975",
            "100000073987",
            "100000073988",
            "100000073989",
            "100000073990",
            "100000073999",
            "100000074015",
            "100000074016",
            "100000074017",
            "100000074018",
            "100000074030",
            "100000074031",
            "100000074032",
            "100000074048",
            "100000074051",
            "100000074053",
            "100000074056",
            "100000074057",
            "100000074061",
            "100000074064",
            "100000075580",
            "100000075584",
            "100000075587",
            "100000116137",
            "100000116141",
            "100000116155",
            "100000116160",
            "100000116172",
            "100000116173",
            "100000116174",
            "100000116175",
            "100000116176",
            "100000116177",
            "100000116179",
            "100000125746",
            "100000125747",
            "100000125777",
            "100000136318",
            "100000136325",
            "100000136558",
            "100000136560",
            "100000136907",
            "100000143502",
            "100000143546",
            "100000143552",
            "100000156068",
            "100000157796",
            "100000164467",
            "100000169997",
            "100000170588",
            "100000171127",
            "100000171193",
            "100000171238",
            "100000171935",
            "100000174065",
            "200000002161",
            "200000002287",
            "200000004201",
            "200000004819",
            "200000004820",
            "200000005547",
            "200000010382",
          ]),
        },
      ],
    },
    route: undefined,
    indication: randParagraph(),
    legalStatusOfSupply: {
      coding: [
        {
          system: "http://hl7.org/fhir/legal-status-of-supply",
          code: rand([
            "100000072076",
            "100000072077",
            "100000072078",
            "100000072079",
            "100000072084",
            "100000072085",
            "100000072086",
            "100000157313",
          ]),
        },
      ],
    },
    additionalMonitoringIndicator: {
      coding: [
        {
          system: "http://hl7.org/fhir/medicinal-product-additional-monitoring",
          code: rand(["BlackTriangleMonitoring"]),
        },
      ],
    },
    specialMeasures: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/medicinal-product-special-measures",
            code: rand(["Post-authorisationStudies"]),
          },
        ],
      },
    ],
    pediatricUseIndicator: {
      coding: [
        {
          system: "http://hl7.org/fhir/medicinal-product-pediatric-use",
          code: rand([
            "InUtero",
            "PretermNewborn",
            "TermNewborn",
            "Infants",
            "Children",
            "Adolescents",
            "Adults",
            "Elderly",
            "Neonate",
            "PediatricPopulation",
            "All",
            "Prepubertal",
            "AdultsAndElderly",
            "PubertalAndPostpubertal",
          ]),
        },
      ],
    },
    classification: undefined,
    marketingStatus: undefined,
    packagedMedicinalProduct: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/medicinal-product-package-type",
            code: rand([
              "100000073490",
              "100000073491",
              "100000073492",
              "100000073493",
              "100000073494",
              "100000073495",
              "100000073496",
              "100000073497",
              "100000073498",
              "100000073547",
              "100000073563",
              "100000143555",
            ]),
          },
        ],
      },
    ],
    ingredient: undefined,
    impurity: undefined,
    attachedDocument: undefined,
    masterFile: undefined,
    contact: undefined,
    clinicalTrial: undefined,
    code: undefined,
    name: [],
    crossReference: undefined,
    operation: undefined,
    characteristic: undefined,
  };
}

function fakeMessageDefinition(): MessageDefinition {
  return {
    resourceType: "MessageDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    replaces: undefined,
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    base: undefined,
    parent: undefined,
    category: rand(["consequence", "currency", "notification"]),
    focus: undefined,
    responseRequired: rand(["always", "on-error", "never", "on-success"]),
    allowedResponse: undefined,
    graph: undefined,
  };
}

function fakeMessageHeader(): MessageHeader {
  return {
    resourceType: "MessageHeader",
    id: randUuid(),
    destination: undefined,
    sender: undefined,
    enterer: undefined,
    author: undefined,
    source: { endpoint: randUrl() },
    responsible: undefined,
    reason: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/message-reasons-encounter",
          code: rand([
            "admit",
            "discharge",
            "absent",
            "return",
            "moved",
            "edit",
          ]),
        },
      ],
    },
    response: undefined,
    focus: undefined,
    definition: undefined,
  };
}

function fakeMolecularSequence(): MolecularSequence {
  return {
    resourceType: "MolecularSequence",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    type: rand(["aa", "dna", "rna"]),
    coordinateSystem: randNumber(),
    patient: undefined,
    specimen: undefined,
    device: undefined,
    performer: undefined,
    quantity: undefined,
    referenceSeq: undefined,
    variant: undefined,
    observedSeq: randText(),
    quality: undefined,
    readCoverage: randNumber(),
    repository: undefined,
    pointer: undefined,
    structureVariant: undefined,
  };
}

function fakeNamingSystem(): NamingSystem {
  return {
    resourceType: "NamingSystem",
    id: randUuid(),
    name: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    kind: rand(["codesystem", "identifier", "root"]),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    responsible: randText(),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/v2-0203",
          code: rand([
            "DL",
            "PPN",
            "BRN",
            "MR",
            "MCN",
            "EN",
            "TAX",
            "NIIP",
            "PRN",
            "MD",
            "DR",
            "ACSN",
            "UDI",
            "SNO",
            "SB",
            "PLAC",
            "FILL",
            "JHN",
          ]),
        },
      ],
    },
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    usage: randText(),
    uniqueId: [],
  };
}

function fakeNutritionOrder(): NutritionOrder {
  return {
    resourceType: "NutritionOrder",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    instantiates: [randUrl()],
    status: rand([
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    intent: rand(["proposal", "plan", "directive", "order", "option"]),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    dateTime: randRecentDate().toISOString(),
    orderer: undefined,
    allergyIntolerance: undefined,
    foodPreferenceModifier: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/diet",
            code: rand([
              "vegetarian",
              "dairy-free",
              "nut-free",
              "gluten-free",
              "vegan",
              "halal",
              "kosher",
            ]),
          },
        ],
      },
    ],
    excludeFoodModifier: undefined,
    oralDiet: undefined,
    supplement: undefined,
    enteralFormula: undefined,
    note: undefined,
  };
}

function fakeNutritionProduct(): NutritionProduct {
  return {
    resourceType: "NutritionProduct",
    id: randUuid(),
    status: rand(["active", "inactive", "entered-in-error"]),
    category: undefined,
    code: undefined,
    manufacturer: undefined,
    nutrient: undefined,
    ingredient: undefined,
    knownAllergen: undefined,
    productCharacteristic: undefined,
    instance: undefined,
    note: undefined,
  };
}

function fakeObservation(): Observation {
  return {
    resourceType: "Observation",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    partOf: undefined,
    status: rand([
      "registered",
      "preliminary",
      "final",
      "amended",
      "cancelled",
      "entered-in-error",
      "unknown",
    ]),
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/observation-category",
            code: rand([
              "social-history",
              "vital-signs",
              "imaging",
              "laboratory",
              "procedure",
              "survey",
              "exam",
              "therapy",
              "activity",
            ]),
          },
        ],
      },
    ],
    code: {},
    subject: undefined,
    focus: undefined,
    encounter: undefined,
    issued: randRecentDate().toISOString(),
    performer: undefined,
    dataAbsentReason: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/data-absent-reason",
          code: rand([
            "unknown",
            "masked",
            "not-applicable",
            "unsupported",
            "as-text",
            "error",
            "not-performed",
            "not-permitted",
          ]),
        },
      ],
    },
    interpretation: undefined,
    note: undefined,
    bodySite: undefined,
    method: undefined,
    specimen: undefined,
    device: undefined,
    referenceRange: undefined,
    hasMember: undefined,
    derivedFrom: undefined,
    component: undefined,
  };
}

function fakeObservationDefinition(): ObservationDefinition {
  return {
    resourceType: "ObservationDefinition",
    id: randUuid(),
    category: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/observation-category",
            code: rand([
              "social-history",
              "vital-signs",
              "imaging",
              "laboratory",
              "procedure",
              "survey",
              "exam",
              "therapy",
              "activity",
            ]),
          },
        ],
      },
    ],
    code: {},
    identifier: [fakeIdentifier(randAlpha())],
    permittedDataType: [
      rand([
        "Quantity",
        "CodeableConcept",
        "string",
        "boolean",
        "integer",
        "Range",
        "Ratio",
        "SampledData",
        "time",
        "dateTime",
        "Period",
      ]),
    ],
    multipleResultsAllowed: randBoolean(),
    method: undefined,
    preferredReportName: randText(),
    quantitativeDetails: undefined,
    qualifiedInterval: undefined,
    validCodedValueSet: undefined,
    normalCodedValueSet: undefined,
    abnormalCodedValueSet: undefined,
    criticalCodedValueSet: undefined,
  };
}

function fakeOperationDefinition(): OperationDefinition {
  return {
    resourceType: "OperationDefinition",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    kind: rand(["operation", "query"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    affectsState: randBoolean(),
    code: randText(),
    comment: randParagraph(),
    base: undefined,
    resource: [rand(["Resource"])],
    system: randBoolean(),
    type: randBoolean(),
    instance: randBoolean(),
    inputProfile: undefined,
    outputProfile: undefined,
    parameter: undefined,
    overload: undefined,
  };
}

function fakeOperationOutcome(): OperationOutcome {
  return {
    resourceType: "OperationOutcome",
    id: randUuid(),
    issue: [],
  };
}

function fakeOrganization(): Organization {
  return {
    resourceType: "Organization",
    id: randUuid(),
    identifier: [fakeIdentifier("http://hl7.org/fhir/sid/us-npi")],
    active: randBoolean(),
    type: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/organization-type",
            code: rand([
              "prov",
              "dept",
              "team",
              "govt",
              "ins",
              "pay",
              "edu",
              "reli",
              "crs",
              "cg",
              "bus",
              "other",
            ]),
          },
        ],
      },
    ],
    name: randCompanyName(),
    alias: [randText()],
    telecom: [fakeContactPoint()],
    address: [fakeAddress()],
    partOf: undefined,
    contact: undefined,
    endpoint: undefined,
  };
}

function fakeOrganizationAffiliation(): OrganizationAffiliation {
  return {
    resourceType: "OrganizationAffiliation",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    period: undefined,
    organization: undefined,
    participatingOrganization: undefined,
    network: undefined,
    code: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/organization-role",
            code: rand([
              "provider",
              "agency",
              "research",
              "payer",
              "diagnostics",
              "supplier",
              "HIE/HIO",
              "member",
            ]),
          },
        ],
      },
    ],
    specialty: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "408467006",
              "394577000",
              "394578005",
              "421661004",
              "408462000",
              "394579002",
              "394804000",
              "394580004",
              "394803006",
              "408480009",
              "408454008",
              "394809005",
              "394592004",
              "394600006",
              "394601005",
              "394581000",
              "408478003",
              "394812008",
              "408444009",
              "394582007",
              "408475000",
              "410005002",
              "394583002",
              "419772000",
              "394584008",
              "408443003",
              "394802001",
              "394915009",
              "394814009",
              "394808002",
              "394811001",
              "408446006",
              "394586005",
              "394916005",
              "408472002",
              "394597005",
              "394598000",
              "394807007",
              "419192003",
              "408468001",
              "394593009",
              "394813003",
              "410001006",
              "394589003",
              "394591006",
              "394599008",
              "394649004",
              "408470005",
              "394585009",
              "394821009",
              "422191005",
              "394594003",
              "416304004",
              "418960008",
              "394882004",
              "394806003",
              "394588006",
              "408459003",
              "394607009",
              "419610006",
              "418058008",
              "420208008",
              "418652005",
              "418535003",
              "418862001",
              "419365004",
              "418002000",
              "419983000",
              "419170002",
              "419472004",
              "394539006",
              "420112009",
              "409968004",
              "394587001",
              "394913002",
              "408440000",
              "418112009",
              "419815003",
              "394914008",
              "408455009",
              "394602003",
              "408447002",
              "394810000",
              "408450004",
              "408476004",
              "408469009",
              "408466002",
              "408471009",
              "408464004",
              "408441001",
              "408465003",
              "394605001",
              "394608004",
              "408461007",
              "408460008",
              "408460008",
              "394606000",
              "408449004",
              "394608004",
              "418018006",
              "394604002",
              "394609007",
              "408474001",
              "394610002",
              "394611003",
              "408477008",
              "394801008",
              "408463005",
              "419321007",
              "394576009",
              "394590007",
              "409967009",
              "408448007",
              "419043006",
              "394612005",
              "394733009",
              "394732004",
            ]),
          },
        ],
      },
    ],
    location: undefined,
    healthcareService: undefined,
    telecom: [fakeContactPoint()],
    endpoint: undefined,
  };
}

function fakePackagedProductDefinition(): PackagedProductDefinition {
  return {
    resourceType: "PackagedProductDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    name: randText(),
    type: {
      coding: [
        {
          system: "http://hl7.org/fhir/package-type",
          code: rand([
            "MedicinalProductPack",
            "RawMaterialPackage",
            "Shipping-TransportContainer",
          ]),
        },
      ],
    },
    packageFor: undefined,
    status: {
      coding: [
        {
          system: "http://hl7.org/fhir/publication-status",
          code: rand(["draft", "active", "retired", "unknown"]),
        },
      ],
    },
    statusDate: randRecentDate().toISOString(),
    containedItemQuantity: undefined,
    description: randParagraph(),
    legalStatusOfSupply: undefined,
    marketingStatus: undefined,
    characteristic: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/package-characteristic",
            code: rand(["HospitalPack", "NursePrescribable", "CalendarPack"]),
          },
        ],
      },
    ],
    copackagedIndicator: randBoolean(),
    manufacturer: undefined,
    package: undefined,
  };
}

function fakePatient(): Patient {
  return {
    resourceType: "Patient",
    id: randUuid(),
    identifier: [fakeIdentifier("http://hl7.org/fhir/sid/us-ssn")],
    active: randBoolean(),
    name: [fakeHumanName()],
    telecom: [fakeContactPoint()],
    gender: rand(["male", "female", "other", "unknown"]),
    birthDate: randPastDate({ years: 99 }).toISOString().slice(0, 10),
    address: [fakeAddress()],
    maritalStatus: undefined,
    photo: undefined,
    contact: undefined,
    communication: undefined,
    generalPractitioner: undefined,
    managingOrganization: undefined,
    link: undefined,
  };
}

function fakePaymentNotice(): PaymentNotice {
  return {
    resourceType: "PaymentNotice",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    request: undefined,
    response: undefined,
    created: randRecentDate().toISOString(),
    provider: undefined,
    payment: {
      reference: `PaymentReconciliation/${randUuid()}`,
    },
    paymentDate: randRecentDate().toISOString().slice(0, 10),
    payee: undefined,
    recipient: {
      reference: `Organization/${randUuid()}`,
    },
    amount: {},
    paymentStatus: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/paymentstatus",
          code: rand(["paid", "cleared"]),
        },
      ],
    },
  };
}

function fakePaymentReconciliation(): PaymentReconciliation {
  return {
    resourceType: "PaymentReconciliation",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    period: undefined,
    created: randRecentDate().toISOString(),
    paymentIssuer: undefined,
    request: undefined,
    requestor: undefined,
    outcome: rand(["queued", "complete", "error", "partial"]),
    disposition: randText(),
    paymentDate: randRecentDate().toISOString().slice(0, 10),
    paymentAmount: {},
    paymentIdentifier: undefined,
    detail: undefined,
    formCode: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/forms-codes",
          code: rand(["1", "2"]),
        },
      ],
    },
    processNote: undefined,
  };
}

function fakePerson(): Person {
  return {
    resourceType: "Person",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    name: [fakeHumanName()],
    telecom: [fakeContactPoint()],
    gender: rand(["male", "female", "other", "unknown"]),
    birthDate: randPastDate({ years: 99 }).toISOString().slice(0, 10),
    address: [fakeAddress()],
    photo: undefined,
    managingOrganization: undefined,
    active: randBoolean(),
    link: undefined,
  };
}

function fakePlanDefinition(): PlanDefinition {
  return {
    resourceType: "PlanDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    subtitle: randText(),
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/plan-definition-type",
          code: rand([
            "order-set",
            "clinical-protocol",
            "eca-rule",
            "workflow-definition",
          ]),
        },
      ],
    },
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    library: undefined,
    goal: undefined,
    action: undefined,
  };
}

function fakePractitioner(): Practitioner {
  return {
    resourceType: "Practitioner",
    id: randUuid(),
    identifier: [fakeIdentifier("http://hl7.org/fhir/sid/us-npi")],
    active: randBoolean(),
    name: [fakeHumanName()],
    telecom: [fakeContactPoint()],
    address: [fakeAddress()],
    gender: rand(["male", "female", "other", "unknown"]),
    birthDate: randPastDate({ years: 99 }).toISOString().slice(0, 10),
    photo: undefined,
    qualification: undefined,
    communication: [
      {
        coding: [
          {
            system: "urn:ietf:bcp:47",
            code: rand([
              "ar",
              "bn",
              "cs",
              "da",
              "de",
              "de-AT",
              "de-CH",
              "de-DE",
              "el",
              "en",
              "en-AU",
              "en-CA",
              "en-GB",
              "en-IN",
              "en-NZ",
              "en-SG",
              "en-US",
              "es",
              "es-AR",
              "es-ES",
              "es-UY",
              "fi",
              "fr",
              "fr-BE",
              "fr-CH",
              "fr-FR",
              "fy",
              "fy-NL",
              "hi",
              "hr",
              "it",
              "it-CH",
              "it-IT",
              "ja",
              "ko",
              "nl",
              "nl-BE",
              "nl-NL",
              "no",
              "no-NO",
              "pa",
              "pl",
              "pt",
              "pt-BR",
              "ru",
              "ru-RU",
              "sr",
              "sr-RS",
              "sv",
              "sv-SE",
              "te",
              "zh",
              "zh-CN",
              "zh-HK",
              "zh-SG",
              "zh-TW",
            ]),
          },
        ],
      },
    ],
  };
}

function fakePractitionerRole(): PractitionerRole {
  return {
    resourceType: "PractitionerRole",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    period: undefined,
    practitioner: undefined,
    organization: undefined,
    code: undefined,
    specialty: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "408467006",
              "394577000",
              "394578005",
              "421661004",
              "408462000",
              "394579002",
              "394804000",
              "394580004",
              "394803006",
              "408480009",
              "408454008",
              "394809005",
              "394592004",
              "394600006",
              "394601005",
              "394581000",
              "408478003",
              "394812008",
              "408444009",
              "394582007",
              "408475000",
              "410005002",
              "394583002",
              "419772000",
              "394584008",
              "408443003",
              "394802001",
              "394915009",
              "394814009",
              "394808002",
              "394811001",
              "408446006",
              "394586005",
              "394916005",
              "408472002",
              "394597005",
              "394598000",
              "394807007",
              "419192003",
              "408468001",
              "394593009",
              "394813003",
              "410001006",
              "394589003",
              "394591006",
              "394599008",
              "394649004",
              "408470005",
              "394585009",
              "394821009",
              "422191005",
              "394594003",
              "416304004",
              "418960008",
              "394882004",
              "394806003",
              "394588006",
              "408459003",
              "394607009",
              "419610006",
              "418058008",
              "420208008",
              "418652005",
              "418535003",
              "418862001",
              "419365004",
              "418002000",
              "419983000",
              "419170002",
              "419472004",
              "394539006",
              "420112009",
              "409968004",
              "394587001",
              "394913002",
              "408440000",
              "418112009",
              "419815003",
              "394914008",
              "408455009",
              "394602003",
              "408447002",
              "394810000",
              "408450004",
              "408476004",
              "408469009",
              "408466002",
              "408471009",
              "408464004",
              "408441001",
              "408465003",
              "394605001",
              "394608004",
              "408461007",
              "408460008",
              "408460008",
              "394606000",
              "408449004",
              "394608004",
              "418018006",
              "394604002",
              "394609007",
              "408474001",
              "394610002",
              "394611003",
              "408477008",
              "394801008",
              "408463005",
              "419321007",
              "394576009",
              "394590007",
              "409967009",
              "408448007",
              "419043006",
              "394612005",
              "394733009",
              "394732004",
            ]),
          },
        ],
      },
    ],
    location: undefined,
    healthcareService: undefined,
    telecom: [fakeContactPoint()],
    availableTime: undefined,
    notAvailable: undefined,
    availabilityExceptions: randText(),
    endpoint: undefined,
  };
}

function fakeProcedure(): Procedure {
  return {
    resourceType: "Procedure",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    partOf: undefined,
    status: rand([
      "preparation",
      "in-progress",
      "not-done",
      "on-hold",
      "stopped",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    statusReason: undefined,
    category: {
      coding: [
        {
          system: "http://snomed.info/sct",
          code: rand([
            "24642003",
            "409063005",
            "409073007",
            "387713003",
            "103693007",
            "46947000",
            "410606002",
          ]),
        },
      ],
    },
    code: undefined,
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    recorder: undefined,
    asserter: undefined,
    performer: undefined,
    location: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    bodySite: undefined,
    outcome: {
      coding: [
        {
          system: "http://snomed.info/sct",
          code: rand(["385669000", "385671000", "385670004"]),
        },
      ],
    },
    report: undefined,
    complication: undefined,
    complicationDetail: undefined,
    followUp: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "18949003",
              "30549001",
              "241031001",
              "35963001",
              "225164002",
              "447346005",
              "229506003",
              "274441001",
              "394725008",
              "359825008",
            ]),
          },
        ],
      },
    ],
    note: undefined,
    focalDevice: undefined,
    usedReference: undefined,
    usedCode: undefined,
  };
}

function fakeProvenance(): Provenance {
  return {
    resourceType: "Provenance",
    id: randUuid(),
    target: [
      {
        reference: `Resource/${randUuid()}`,
      },
    ],
    recorded: randRecentDate().toISOString(),
    policy: [randUrl()],
    location: undefined,
    reason: undefined,
    activity: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/v3-DocumentCompletion",
          code: rand(["LA"]),
        },
      ],
    },
    agent: [],
    entity: undefined,
    signature: undefined,
  };
}

function fakeQuestionnaire(): Questionnaire {
  return {
    resourceType: "Questionnaire",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    derivedFrom: undefined,
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    subjectType: [rand(["Resource"])],
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    code: undefined,
    item: undefined,
  };
}

function fakeQuestionnaireResponse(): QuestionnaireResponse {
  return {
    resourceType: "QuestionnaireResponse",
    id: randUuid(),
    identifier: fakeIdentifier(randAlpha()),
    basedOn: undefined,
    partOf: undefined,
    questionnaire: undefined,
    status: rand([
      "in-progress",
      "completed",
      "amended",
      "entered-in-error",
      "stopped",
    ]),
    subject: undefined,
    encounter: undefined,
    authored: randRecentDate().toISOString(),
    author: undefined,
    source: undefined,
    item: undefined,
  };
}

function fakeRegulatedAuthorization(): RegulatedAuthorization {
  return {
    resourceType: "RegulatedAuthorization",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    subject: undefined,
    type: {
      coding: [
        {
          system: "http://hl7.org/fhir/regulated-authorization-type",
          code: rand(["MarketingAuth", "Orphan", "Pediatric"]),
        },
      ],
    },
    description: randParagraph(),
    region: undefined,
    status: {
      coding: [
        {
          system: "http://hl7.org/fhir/publication-status",
          code: rand(["draft", "active", "retired", "unknown"]),
        },
      ],
    },
    statusDate: randRecentDate().toISOString(),
    validityPeriod: undefined,
    indication: undefined,
    intendedUse: {
      coding: [
        {
          system: "http://hl7.org/fhir/product-intended-use",
          code: rand([
            "Prevention",
            "Treatment",
            "Alleviation",
            "Diagnosis",
            "Monitoring",
          ]),
        },
      ],
    },
    basis: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/regulated-authorization-basis",
            code: rand([
              "Full",
              "NewSubstance",
              "KnownSubstance",
              "SimilarBiological",
              "Well-establishedUse",
              "TraditionalUse",
              "Bibliographical",
              "KnownHumanBlood",
              "TemporaryUse",
              "ParallelTrade",
            ]),
          },
        ],
      },
    ],
    holder: undefined,
    regulator: undefined,
    case: undefined,
  };
}

function fakeRelatedPerson(): RelatedPerson {
  return {
    resourceType: "RelatedPerson",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    relationship: undefined,
    name: [fakeHumanName()],
    telecom: [fakeContactPoint()],
    gender: rand(["male", "female", "other", "unknown"]),
    birthDate: randPastDate({ years: 99 }).toISOString().slice(0, 10),
    address: [fakeAddress()],
    photo: undefined,
    period: undefined,
    communication: undefined,
  };
}

function fakeRequestGroup(): RequestGroup {
  return {
    resourceType: "RequestGroup",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    replaces: undefined,
    groupIdentifier: undefined,
    status: rand([
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    intent: rand(["proposal", "plan", "directive", "order", "option"]),
    priority: rand(["routine", "urgent", "asap", "stat"]),
    code: undefined,
    subject: undefined,
    encounter: undefined,
    authoredOn: randRecentDate().toISOString(),
    author: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    note: undefined,
    action: undefined,
  };
}

function fakeResearchDefinition(): ResearchDefinition {
  return {
    resourceType: "ResearchDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    shortTitle: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    comment: [randText()],
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    library: undefined,
    population: {
      reference: `ResearchElementDefinition/${randUuid()}`,
    },
    exposure: undefined,
    exposureAlternative: undefined,
    outcome: undefined,
  };
}

function fakeResearchElementDefinition(): ResearchElementDefinition {
  return {
    resourceType: "ResearchElementDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    shortTitle: randText(),
    subtitle: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    comment: [randText()],
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    usage: randText(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    topic: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/definition-topic",
            code: rand(["treatment", "education", "assessment"]),
          },
        ],
      },
    ],
    author: undefined,
    editor: undefined,
    reviewer: undefined,
    endorser: undefined,
    relatedArtifact: undefined,
    library: undefined,
    type: rand(["population", "exposure", "outcome"]),
    variableType: rand(["dichotomous", "continuous", "descriptive"]),
    characteristic: [],
  };
}

function fakeResearchStudy(): ResearchStudy {
  return {
    resourceType: "ResearchStudy",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    title: randText(),
    protocol: undefined,
    partOf: undefined,
    status: rand([
      "active",
      "administratively-completed",
      "approved",
      "closed-to-accrual",
      "closed-to-accrual-and-intervention",
      "completed",
      "disapproved",
      "in-review",
      "temporarily-closed-to-accrual",
      "temporarily-closed-to-accrual-and-intervention",
      "withdrawn",
    ]),
    primaryPurposeType: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/research-study-prim-purp-type",
          code: rand([
            "treatment",
            "prevention",
            "diagnostic",
            "supportive-care",
            "screening",
            "health-services-research",
            "basic-science",
            "device-feasibility",
          ]),
        },
      ],
    },
    phase: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/research-study-phase",
          code: rand([
            "n-a",
            "early-phase-1",
            "phase-1",
            "phase-1-phase-2",
            "phase-2",
            "phase-2-phase-3",
            "phase-3",
            "phase-4",
          ]),
        },
      ],
    },
    category: undefined,
    focus: undefined,
    condition: undefined,
    contact: undefined,
    relatedArtifact: undefined,
    keyword: undefined,
    location: undefined,
    description: randParagraph(),
    enrollment: undefined,
    period: undefined,
    sponsor: undefined,
    principalInvestigator: undefined,
    site: undefined,
    reasonStopped: {
      coding: [
        {
          system:
            "http://terminology.hl7.org/CodeSystem/research-study-reason-stopped",
          code: rand([
            "accrual-goal-met",
            "closed-due-to-toxicity",
            "closed-due-to-lack-of-study-progress",
            "temporarily-closed-per-study-design",
          ]),
        },
      ],
    },
    note: undefined,
    arm: undefined,
    objective: undefined,
  };
}

function fakeResearchSubject(): ResearchSubject {
  return {
    resourceType: "ResearchSubject",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "candidate",
      "eligible",
      "follow-up",
      "ineligible",
      "not-registered",
      "off-study",
      "on-study",
      "on-study-intervention",
      "on-study-observation",
      "pending-on-study",
      "potential-candidate",
      "screening",
      "withdrawn",
    ]),
    period: undefined,
    study: {
      reference: `ResearchStudy/${randUuid()}`,
    },
    individual: {
      reference: `Patient/${randUuid()}`,
    },
    assignedArm: randText(),
    actualArm: randText(),
    consent: undefined,
  };
}

function fakeRiskAssessment(): RiskAssessment {
  return {
    resourceType: "RiskAssessment",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    parent: undefined,
    status: rand([
      "registered",
      "preliminary",
      "final",
      "amended",
      "cancelled",
      "entered-in-error",
      "unknown",
    ]),
    method: undefined,
    code: undefined,
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    condition: undefined,
    performer: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    basis: undefined,
    prediction: undefined,
    mitigation: randText(),
    note: undefined,
  };
}

function fakeSchedule(): Schedule {
  return {
    resourceType: "Schedule",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    active: randBoolean(),
    serviceCategory: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-category",
            code: rand([
              "1",
              "2",
              "34",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "36",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "35",
              "18",
              "19",
              "20",
              "21",
              "22",
              "38",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "37",
              "33",
            ]),
          },
        ],
      },
    ],
    serviceType: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-type",
            code: rand([
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60",
              "61",
              "62",
              "63",
              "64",
              "65",
              "66",
              "67",
              "68",
              "69",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "78",
              "79",
              "80",
              "81",
              "82",
              "83",
              "84",
              "85",
              "86",
              "87",
              "88",
              "89",
              "90",
              "91",
              "92",
              "93",
              "94",
              "95",
              "96",
              "97",
              "98",
              "99",
              "100",
              "101",
              "102",
              "103",
              "104",
              "105",
              "106",
              "107",
              "108",
              "109",
              "110",
              "111",
              "112",
              "113",
              "114",
              "115",
              "116",
              "117",
              "118",
              "119",
              "120",
              "121",
              "122",
              "123",
              "124",
              "125",
              "126",
              "127",
              "128",
              "129",
              "130",
              "131",
              "132",
              "133",
              "134",
              "135",
              "136",
              "137",
              "138",
              "139",
              "140",
              "141",
              "142",
              "143",
              "144",
              "145",
              "146",
              "147",
              "148",
              "149",
              "150",
              "151",
              "152",
              "153",
              "154",
              "155",
              "156",
              "157",
              "158",
              "159",
              "160",
              "161",
              "162",
              "163",
              "164",
              "165",
              "166",
              "167",
              "168",
              "169",
              "170",
              "171",
              "172",
              "173",
              "174",
              "175",
              "176",
              "177",
              "178",
              "179",
              "180",
              "181",
              "182",
              "183",
              "184",
              "185",
              "186",
              "187",
              "188",
              "189",
              "190",
              "191",
              "192",
              "193",
              "194",
              "195",
              "196",
              "197",
              "198",
              "199",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "208",
              "209",
              "210",
              "211",
              "212",
              "213",
              "214",
              "215",
              "216",
              "217",
              "218",
              "219",
              "220",
              "221",
              "222",
              "223",
              "224",
              "225",
              "226",
              "227",
              "228",
              "229",
              "230",
              "231",
              "232",
              "233",
              "234",
              "235",
              "236",
              "237",
              "238",
              "239",
              "240",
              "241",
              "242",
              "243",
              "244",
              "245",
              "246",
              "247",
              "248",
              "249",
              "250",
              "251",
              "252",
              "253",
              "254",
              "255",
              "256",
              "257",
              "258",
              "259",
              "260",
              "261",
              "262",
              "263",
              "264",
              "265",
              "266",
              "267",
              "268",
              "269",
              "270",
              "271",
              "272",
              "273",
              "274",
              "275",
              "276",
              "277",
              "278",
              "279",
              "280",
              "281",
              "282",
              "283",
              "284",
              "285",
              "286",
              "287",
              "288",
              "289",
              "290",
              "291",
              "292",
              "293",
              "294",
              "295",
              "296",
              "297",
              "298",
              "299",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "306",
              "307",
              "308",
              "309",
              "310",
              "311",
              "312",
              "313",
              "314",
              "315",
              "316",
              "317",
              "318",
              "319",
              "320",
              "321",
              "322",
              "323",
              "324",
              "325",
              "326",
              "327",
              "328",
              "330",
              "331",
              "332",
              "333",
              "334",
              "335",
              "336",
              "337",
              "338",
              "339",
              "340",
              "341",
              "342",
              "343",
              "344",
              "345",
              "346",
              "347",
              "348",
              "349",
              "350",
              "351",
              "352",
              "353",
              "354",
              "355",
              "356",
              "357",
              "358",
              "359",
              "360",
              "361",
              "362",
              "364",
              "365",
              "366",
              "367",
              "368",
              "369",
              "370",
              "371",
              "372",
              "373",
              "374",
              "375",
              "376",
              "377",
              "378",
              "379",
              "380",
              "381",
              "382",
              "383",
              "384",
              "385",
              "386",
              "387",
              "388",
              "389",
              "390",
              "391",
              "392",
              "393",
              "394",
              "395",
              "396",
              "397",
              "398",
              "399",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "418",
              "419",
              "420",
              "421",
              "422",
              "423",
              "424",
              "425",
              "426",
              "427",
              "428",
              "429",
              "430",
              "431",
              "432",
              "433",
              "434",
              "435",
              "436",
              "437",
              "438",
              "439",
              "440",
              "441",
              "442",
              "443",
              "444",
              "445",
              "446",
              "447",
              "448",
              "449",
              "450",
              "451",
              "452",
              "453",
              "454",
              "455",
              "456",
              "457",
              "458",
              "459",
              "460",
              "461",
              "462",
              "463",
              "464",
              "465",
              "466",
              "467",
              "468",
              "469",
              "470",
              "471",
              "472",
              "473",
              "474",
              "475",
              "476",
              "477",
              "478",
              "479",
              "480",
              "481",
              "482",
              "483",
              "484",
              "485",
              "486",
              "488",
              "489",
              "490",
              "491",
              "492",
              "493",
              "494",
              "495",
              "496",
              "497",
              "498",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "506",
              "507",
              "508",
              "509",
              "510",
              "513",
              "514",
              "530",
              "531",
              "532",
              "533",
              "534",
              "535",
              "536",
              "537",
              "538",
              "539",
              "540",
              "541",
              "542",
              "543",
              "544",
              "545",
              "546",
              "547",
              "548",
              "550",
              "551",
              "552",
              "553",
              "554",
              "555",
              "556",
              "557",
              "558",
              "559",
              "560",
              "561",
              "562",
              "563",
              "564",
              "565",
              "566",
              "567",
              "568",
              "569",
              "570",
              "571",
              "572",
              "573",
              "574",
              "575",
              "576",
              "577",
              "580",
              "581",
              "582",
              "583",
              "584",
              "585",
              "589",
              "590",
              "591",
              "593",
              "599",
              "600",
              "601",
              "602",
              "603",
              "604",
              "605",
              "606",
              "607",
              "608",
              "609",
              "610",
              "611",
              "612",
              "613",
              "614",
              "615",
              "616",
              "617",
              "618",
              "619",
              "620",
              "621",
              "622",
              "623",
              "624",
              "625",
              "626",
              "627",
              "628",
              "629",
            ]),
          },
        ],
      },
    ],
    specialty: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "408467006",
              "394577000",
              "394578005",
              "421661004",
              "408462000",
              "394579002",
              "394804000",
              "394580004",
              "394803006",
              "408480009",
              "408454008",
              "394809005",
              "394592004",
              "394600006",
              "394601005",
              "394581000",
              "408478003",
              "394812008",
              "408444009",
              "394582007",
              "408475000",
              "410005002",
              "394583002",
              "419772000",
              "394584008",
              "408443003",
              "394802001",
              "394915009",
              "394814009",
              "394808002",
              "394811001",
              "408446006",
              "394586005",
              "394916005",
              "408472002",
              "394597005",
              "394598000",
              "394807007",
              "419192003",
              "408468001",
              "394593009",
              "394813003",
              "410001006",
              "394589003",
              "394591006",
              "394599008",
              "394649004",
              "408470005",
              "394585009",
              "394821009",
              "422191005",
              "394594003",
              "416304004",
              "418960008",
              "394882004",
              "394806003",
              "394588006",
              "408459003",
              "394607009",
              "419610006",
              "418058008",
              "420208008",
              "418652005",
              "418535003",
              "418862001",
              "419365004",
              "418002000",
              "419983000",
              "419170002",
              "419472004",
              "394539006",
              "420112009",
              "409968004",
              "394587001",
              "394913002",
              "408440000",
              "418112009",
              "419815003",
              "394914008",
              "408455009",
              "394602003",
              "408447002",
              "394810000",
              "408450004",
              "408476004",
              "408469009",
              "408466002",
              "408471009",
              "408464004",
              "408441001",
              "408465003",
              "394605001",
              "394608004",
              "408461007",
              "408460008",
              "408460008",
              "394606000",
              "408449004",
              "394608004",
              "418018006",
              "394604002",
              "394609007",
              "408474001",
              "394610002",
              "394611003",
              "408477008",
              "394801008",
              "408463005",
              "419321007",
              "394576009",
              "394590007",
              "409967009",
              "408448007",
              "419043006",
              "394612005",
              "394733009",
              "394732004",
            ]),
          },
        ],
      },
    ],
    actor: [
      {
        reference: `Patient/${randUuid()}`,
      },
    ],
    planningHorizon: undefined,
    comment: randText(),
  };
}

function fakeSearchParameter(): SearchParameter {
  return {
    resourceType: "SearchParameter",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    derivedFrom: undefined,
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    code: randText(),
    base: [rand(["Resource"])],
    type: rand([
      "number",
      "date",
      "string",
      "token",
      "reference",
      "composite",
      "quantity",
      "uri",
      "special",
    ]),
    expression: randText(),
    xpath: randText(),
    xpathUsage: rand(["normal", "phonetic", "nearby", "distance", "other"]),
    target: [rand(["Resource"])],
    multipleOr: randBoolean(),
    multipleAnd: randBoolean(),
    comparator: [rand(["eq", "ne", "gt", "lt", "ge", "le", "sa", "eb", "ap"])],
    modifier: [
      rand([
        "missing",
        "exact",
        "contains",
        "not",
        "text",
        "in",
        "not-in",
        "below",
        "above",
        "type",
        "identifier",
        "ofType",
      ]),
    ],
    chain: [randText()],
    component: undefined,
  };
}

function fakeServiceRequest(): ServiceRequest {
  return {
    resourceType: "ServiceRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: [randUrl()],
    basedOn: undefined,
    replaces: undefined,
    requisition: undefined,
    status: rand([
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    intent: rand(["proposal", "plan", "directive", "order", "option"]),
    category: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "108252007",
              "363679005",
              "409063005",
              "409073007",
              "387713003",
            ]),
          },
        ],
      },
    ],
    priority: rand(["routine", "urgent", "asap", "stat"]),
    doNotPerform: randBoolean(),
    code: undefined,
    orderDetail: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "47545007",
              "286812008",
              "243144002",
              "243150007",
              "59427005",
            ]),
          },
        ],
      },
    ],
    subject: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    authoredOn: randRecentDate().toISOString(),
    requester: undefined,
    performerType: undefined,
    performer: undefined,
    locationCode: undefined,
    locationReference: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    insurance: undefined,
    supportingInfo: undefined,
    specimen: undefined,
    bodySite: undefined,
    note: undefined,
    patientInstruction: randText(),
    relevantHistory: undefined,
  };
}

function fakeSlot(): Slot {
  return {
    resourceType: "Slot",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    serviceCategory: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-category",
            code: rand([
              "1",
              "2",
              "34",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "36",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "35",
              "18",
              "19",
              "20",
              "21",
              "22",
              "38",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "37",
              "33",
            ]),
          },
        ],
      },
    ],
    serviceType: [
      {
        coding: [
          {
            system: "http://terminology.hl7.org/CodeSystem/service-type",
            code: rand([
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60",
              "61",
              "62",
              "63",
              "64",
              "65",
              "66",
              "67",
              "68",
              "69",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "78",
              "79",
              "80",
              "81",
              "82",
              "83",
              "84",
              "85",
              "86",
              "87",
              "88",
              "89",
              "90",
              "91",
              "92",
              "93",
              "94",
              "95",
              "96",
              "97",
              "98",
              "99",
              "100",
              "101",
              "102",
              "103",
              "104",
              "105",
              "106",
              "107",
              "108",
              "109",
              "110",
              "111",
              "112",
              "113",
              "114",
              "115",
              "116",
              "117",
              "118",
              "119",
              "120",
              "121",
              "122",
              "123",
              "124",
              "125",
              "126",
              "127",
              "128",
              "129",
              "130",
              "131",
              "132",
              "133",
              "134",
              "135",
              "136",
              "137",
              "138",
              "139",
              "140",
              "141",
              "142",
              "143",
              "144",
              "145",
              "146",
              "147",
              "148",
              "149",
              "150",
              "151",
              "152",
              "153",
              "154",
              "155",
              "156",
              "157",
              "158",
              "159",
              "160",
              "161",
              "162",
              "163",
              "164",
              "165",
              "166",
              "167",
              "168",
              "169",
              "170",
              "171",
              "172",
              "173",
              "174",
              "175",
              "176",
              "177",
              "178",
              "179",
              "180",
              "181",
              "182",
              "183",
              "184",
              "185",
              "186",
              "187",
              "188",
              "189",
              "190",
              "191",
              "192",
              "193",
              "194",
              "195",
              "196",
              "197",
              "198",
              "199",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "208",
              "209",
              "210",
              "211",
              "212",
              "213",
              "214",
              "215",
              "216",
              "217",
              "218",
              "219",
              "220",
              "221",
              "222",
              "223",
              "224",
              "225",
              "226",
              "227",
              "228",
              "229",
              "230",
              "231",
              "232",
              "233",
              "234",
              "235",
              "236",
              "237",
              "238",
              "239",
              "240",
              "241",
              "242",
              "243",
              "244",
              "245",
              "246",
              "247",
              "248",
              "249",
              "250",
              "251",
              "252",
              "253",
              "254",
              "255",
              "256",
              "257",
              "258",
              "259",
              "260",
              "261",
              "262",
              "263",
              "264",
              "265",
              "266",
              "267",
              "268",
              "269",
              "270",
              "271",
              "272",
              "273",
              "274",
              "275",
              "276",
              "277",
              "278",
              "279",
              "280",
              "281",
              "282",
              "283",
              "284",
              "285",
              "286",
              "287",
              "288",
              "289",
              "290",
              "291",
              "292",
              "293",
              "294",
              "295",
              "296",
              "297",
              "298",
              "299",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "306",
              "307",
              "308",
              "309",
              "310",
              "311",
              "312",
              "313",
              "314",
              "315",
              "316",
              "317",
              "318",
              "319",
              "320",
              "321",
              "322",
              "323",
              "324",
              "325",
              "326",
              "327",
              "328",
              "330",
              "331",
              "332",
              "333",
              "334",
              "335",
              "336",
              "337",
              "338",
              "339",
              "340",
              "341",
              "342",
              "343",
              "344",
              "345",
              "346",
              "347",
              "348",
              "349",
              "350",
              "351",
              "352",
              "353",
              "354",
              "355",
              "356",
              "357",
              "358",
              "359",
              "360",
              "361",
              "362",
              "364",
              "365",
              "366",
              "367",
              "368",
              "369",
              "370",
              "371",
              "372",
              "373",
              "374",
              "375",
              "376",
              "377",
              "378",
              "379",
              "380",
              "381",
              "382",
              "383",
              "384",
              "385",
              "386",
              "387",
              "388",
              "389",
              "390",
              "391",
              "392",
              "393",
              "394",
              "395",
              "396",
              "397",
              "398",
              "399",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "418",
              "419",
              "420",
              "421",
              "422",
              "423",
              "424",
              "425",
              "426",
              "427",
              "428",
              "429",
              "430",
              "431",
              "432",
              "433",
              "434",
              "435",
              "436",
              "437",
              "438",
              "439",
              "440",
              "441",
              "442",
              "443",
              "444",
              "445",
              "446",
              "447",
              "448",
              "449",
              "450",
              "451",
              "452",
              "453",
              "454",
              "455",
              "456",
              "457",
              "458",
              "459",
              "460",
              "461",
              "462",
              "463",
              "464",
              "465",
              "466",
              "467",
              "468",
              "469",
              "470",
              "471",
              "472",
              "473",
              "474",
              "475",
              "476",
              "477",
              "478",
              "479",
              "480",
              "481",
              "482",
              "483",
              "484",
              "485",
              "486",
              "488",
              "489",
              "490",
              "491",
              "492",
              "493",
              "494",
              "495",
              "496",
              "497",
              "498",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "506",
              "507",
              "508",
              "509",
              "510",
              "513",
              "514",
              "530",
              "531",
              "532",
              "533",
              "534",
              "535",
              "536",
              "537",
              "538",
              "539",
              "540",
              "541",
              "542",
              "543",
              "544",
              "545",
              "546",
              "547",
              "548",
              "550",
              "551",
              "552",
              "553",
              "554",
              "555",
              "556",
              "557",
              "558",
              "559",
              "560",
              "561",
              "562",
              "563",
              "564",
              "565",
              "566",
              "567",
              "568",
              "569",
              "570",
              "571",
              "572",
              "573",
              "574",
              "575",
              "576",
              "577",
              "580",
              "581",
              "582",
              "583",
              "584",
              "585",
              "589",
              "590",
              "591",
              "593",
              "599",
              "600",
              "601",
              "602",
              "603",
              "604",
              "605",
              "606",
              "607",
              "608",
              "609",
              "610",
              "611",
              "612",
              "613",
              "614",
              "615",
              "616",
              "617",
              "618",
              "619",
              "620",
              "621",
              "622",
              "623",
              "624",
              "625",
              "626",
              "627",
              "628",
              "629",
            ]),
          },
        ],
      },
    ],
    specialty: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "408467006",
              "394577000",
              "394578005",
              "421661004",
              "408462000",
              "394579002",
              "394804000",
              "394580004",
              "394803006",
              "408480009",
              "408454008",
              "394809005",
              "394592004",
              "394600006",
              "394601005",
              "394581000",
              "408478003",
              "394812008",
              "408444009",
              "394582007",
              "408475000",
              "410005002",
              "394583002",
              "419772000",
              "394584008",
              "408443003",
              "394802001",
              "394915009",
              "394814009",
              "394808002",
              "394811001",
              "408446006",
              "394586005",
              "394916005",
              "408472002",
              "394597005",
              "394598000",
              "394807007",
              "419192003",
              "408468001",
              "394593009",
              "394813003",
              "410001006",
              "394589003",
              "394591006",
              "394599008",
              "394649004",
              "408470005",
              "394585009",
              "394821009",
              "422191005",
              "394594003",
              "416304004",
              "418960008",
              "394882004",
              "394806003",
              "394588006",
              "408459003",
              "394607009",
              "419610006",
              "418058008",
              "420208008",
              "418652005",
              "418535003",
              "418862001",
              "419365004",
              "418002000",
              "419983000",
              "419170002",
              "419472004",
              "394539006",
              "420112009",
              "409968004",
              "394587001",
              "394913002",
              "408440000",
              "418112009",
              "419815003",
              "394914008",
              "408455009",
              "394602003",
              "408447002",
              "394810000",
              "408450004",
              "408476004",
              "408469009",
              "408466002",
              "408471009",
              "408464004",
              "408441001",
              "408465003",
              "394605001",
              "394608004",
              "408461007",
              "408460008",
              "408460008",
              "394606000",
              "408449004",
              "394608004",
              "418018006",
              "394604002",
              "394609007",
              "408474001",
              "394610002",
              "394611003",
              "408477008",
              "394801008",
              "408463005",
              "419321007",
              "394576009",
              "394590007",
              "409967009",
              "408448007",
              "419043006",
              "394612005",
              "394733009",
              "394732004",
            ]),
          },
        ],
      },
    ],
    appointmentType: undefined,
    schedule: {
      reference: `Schedule/${randUuid()}`,
    },
    status: rand([
      "busy",
      "free",
      "busy-unavailable",
      "busy-tentative",
      "entered-in-error",
    ]),
    start: randRecentDate().toISOString(),
    end: randRecentDate().toISOString(),
    overbooked: randBoolean(),
    comment: randText(),
  };
}

function fakeSpecimen(): Specimen {
  return {
    resourceType: "Specimen",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    accessionIdentifier: undefined,
    status: rand([
      "available",
      "unavailable",
      "unsatisfactory",
      "entered-in-error",
    ]),
    type: undefined,
    subject: undefined,
    receivedTime: randRecentDate().toISOString(),
    parent: undefined,
    request: undefined,
    collection: undefined,
    processing: undefined,
    container: undefined,
    condition: undefined,
    note: undefined,
  };
}

function fakeSpecimenDefinition(): SpecimenDefinition {
  return {
    resourceType: "SpecimenDefinition",
    id: randUuid(),
    identifier: fakeIdentifier(randAlpha()),
    typeCollected: undefined,
    patientPreparation: undefined,
    timeAspect: randText(),
    collection: [
      {
        coding: [
          {
            system: "http://snomed.info/sct",
            code: rand([
              "129316008",
              "129314006",
              "129300006",
              "129304002",
              "129323009",
              "73416001",
              "225113003",
              "70777001",
              "386089008",
              "278450005",
            ]),
          },
        ],
      },
    ],
    typeTested: undefined,
  };
}

function fakeStructureDefinition(): StructureDefinition {
  return {
    resourceType: "StructureDefinition",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    keyword: [
      {
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
        code: rand([
          "fhir-structure",
          "custom-resource",
          "dam",
          "wire-format",
          "archetype",
          "template",
        ]),
      },
    ],
    fhirVersion: rand([
      "0.01",
      "0.05",
      "0.06",
      "0.11",
      "0.0.80",
      "0.0.81",
      "0.0.82",
      "0.4.0",
      "0.5.0",
      "1.0.0",
      "1.0.1",
      "1.0.2",
      "1.1.0",
      "1.4.0",
      "1.6.0",
      "1.8.0",
      "3.0.0",
      "3.0.1",
      "3.0.2",
      "3.3.0",
      "3.5.0",
      "4.0.0",
      "4.0.1",
      "4.1.0",
      "4.3.0-cibuild",
      "4.3.0-snapshot1",
      "4.3.0",
    ]),
    mapping: undefined,
    kind: rand(["primitive-type", "complex-type", "resource", "logical"]),
    abstract: randBoolean(),
    context: undefined,
    contextInvariant: [randText()],
    type: randUrl(),
    baseDefinition: undefined,
    derivation: rand(["specialization", "constraint"]),
    snapshot: undefined,
    differential: undefined,
  };
}

function fakeStructureMap(): StructureMap {
  return {
    resourceType: "StructureMap",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    structure: undefined,
    import: undefined,
    group: [],
  };
}

function fakeSubscription(): Subscription {
  return {
    resourceType: "Subscription",
    id: randUuid(),
    status: rand(["requested", "active", "error", "off"]),
    contact: [fakeContactPoint()],
    end: randRecentDate().toISOString(),
    reason: randText(),
    criteria: randText(),
    error: randText(),
    channel: {
      type: rand(["rest-hook", "websocket", "email", "sms", "message"]),
    },
  };
}

function fakeSubscriptionStatus(): SubscriptionStatus {
  return {
    resourceType: "SubscriptionStatus",
    id: randUuid(),
    status: rand(["requested", "active", "error", "off"]),
    type: rand([
      "handshake",
      "heartbeat",
      "event-notification",
      "query-status",
      "query-event",
    ]),
    eventsSinceSubscriptionStart: randText(),
    notificationEvent: undefined,
    subscription: {
      reference: `Subscription/${randUuid()}`,
    },
    topic: undefined,
    error: undefined,
  };
}

function fakeSubscriptionTopic(): SubscriptionTopic {
  return {
    resourceType: "SubscriptionTopic",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    title: randText(),
    derivedFrom: undefined,
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    approvalDate: randRecentDate().toISOString().slice(0, 10),
    lastReviewDate: randRecentDate().toISOString().slice(0, 10),
    effectivePeriod: undefined,
    resourceTrigger: undefined,
    eventTrigger: undefined,
    canFilterBy: undefined,
    notificationShape: undefined,
  };
}

function fakeSubstance(): Substance {
  return {
    resourceType: "Substance",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "inactive", "entered-in-error"]),
    category: undefined,
    code: {},
    description: randText(),
    instance: undefined,
    ingredient: undefined,
  };
}

function fakeSubstanceDefinition(): SubstanceDefinition {
  return {
    resourceType: "SubstanceDefinition",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    status: {
      coding: [
        {
          system: "http://hl7.org/fhir/publication-status",
          code: rand(["draft", "active", "retired", "unknown"]),
        },
      ],
    },
    classification: undefined,
    domain: {
      coding: [
        {
          system: "http://hl7.org/fhir/medicinal-product-domain",
          code: rand(["Human", "Veterinary", "HumanAndVeterinary"]),
        },
      ],
    },
    grade: [
      {
        coding: [
          {
            system: "http://hl7.org/fhir/substance-grade",
            code: rand(["USP-NF", "Ph.Eur", "JP", "BP", "CompanyStandard"]),
          },
        ],
      },
    ],
    description: randParagraph(),
    informationSource: undefined,
    note: undefined,
    manufacturer: undefined,
    supplier: undefined,
    moiety: undefined,
    property: undefined,
    molecularWeight: undefined,
    structure: undefined,
    code: undefined,
    name: undefined,
    relationship: undefined,
    sourceMaterial: undefined,
  };
}

function fakeSupplyDelivery(): SupplyDelivery {
  return {
    resourceType: "SupplyDelivery",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    basedOn: undefined,
    partOf: undefined,
    status: rand(["in-progress", "completed", "abandoned", "entered-in-error"]),
    patient: undefined,
    type: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/supply-item-type",
          code: rand(["medication", "device"]),
        },
      ],
    },
    suppliedItem: undefined,
    supplier: undefined,
    destination: undefined,
    receiver: undefined,
  };
}

function fakeSupplyRequest(): SupplyRequest {
  return {
    resourceType: "SupplyRequest",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand([
      "draft",
      "active",
      "suspended",
      "cancelled",
      "completed",
      "entered-in-error",
      "unknown",
    ]),
    category: {
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/supply-kind",
          code: rand(["central", "nonstock"]),
        },
      ],
    },
    priority: rand(["routine", "urgent", "asap", "stat"]),
    quantity: {},
    parameter: undefined,
    authoredOn: randRecentDate().toISOString(),
    requester: undefined,
    supplier: undefined,
    reasonCode: [
      {
        coding: [
          {
            system:
              "http://terminology.hl7.org/CodeSystem/supplyrequest-reason",
            code: rand(["patient-care", "ward-stock"]),
          },
        ],
      },
    ],
    reasonReference: undefined,
    deliverFrom: undefined,
    deliverTo: undefined,
  };
}

function fakeTask(): Task {
  return {
    resourceType: "Task",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    instantiatesCanonical: undefined,
    instantiatesUri: randUrl(),
    basedOn: undefined,
    groupIdentifier: undefined,
    partOf: undefined,
    status: rand([
      "draft",
      "requested",
      "received",
      "accepted",
      "rejected",
      "ready",
      "cancelled",
      "in-progress",
      "on-hold",
      "failed",
      "completed",
      "entered-in-error",
    ]),
    statusReason: undefined,
    businessStatus: undefined,
    intent: rand(["unknown"]),
    priority: rand(["routine", "urgent", "asap", "stat"]),
    code: {
      coding: [
        {
          system: "http://hl7.org/fhir/CodeSystem/task-code",
          code: rand([
            "approve",
            "fulfill",
            "abort",
            "replace",
            "change",
            "suspend",
            "resume",
          ]),
        },
      ],
    },
    description: randText(),
    focus: undefined,
    for: undefined,
    encounter: undefined,
    executionPeriod: undefined,
    authoredOn: randRecentDate().toISOString(),
    lastModified: randRecentDate().toISOString(),
    requester: undefined,
    performerType: undefined,
    owner: undefined,
    location: undefined,
    reasonCode: undefined,
    reasonReference: undefined,
    insurance: undefined,
    note: undefined,
    relevantHistory: undefined,
    restriction: undefined,
    input: undefined,
    output: undefined,
  };
}

function fakeTerminologyCapabilities(): TerminologyCapabilities {
  return {
    resourceType: "TerminologyCapabilities",
    id: randUuid(),
    url: randUrl(),
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    kind: rand(["instance", "capability", "requirements"]),
    software: undefined,
    implementation: undefined,
    lockedDate: randBoolean(),
    codeSystem: undefined,
    expansion: undefined,
    codeSearch: rand(["explicit", "all"]),
    validateCode: undefined,
    translation: undefined,
    closure: undefined,
  };
}

function fakeTestReport(): TestReport {
  return {
    resourceType: "TestReport",
    id: randUuid(),
    identifier: fakeIdentifier(randAlpha()),
    name: randText(),
    status: rand([
      "completed",
      "in-progress",
      "waiting",
      "stopped",
      "entered-in-error",
    ]),
    testScript: {
      reference: `TestScript/${randUuid()}`,
    },
    result: rand(["pass", "fail", "pending"]),
    score: undefined,
    tester: randText(),
    issued: randRecentDate().toISOString(),
    participant: undefined,
    setup: undefined,
    test: undefined,
    teardown: undefined,
  };
}

function fakeTestScript(): TestScript {
  return {
    resourceType: "TestScript",
    id: randUuid(),
    url: randUrl(),
    identifier: fakeIdentifier(randAlpha()),
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    purpose: randParagraph(),
    copyright: randParagraph(),
    origin: undefined,
    destination: undefined,
    metadata: undefined,
    fixture: undefined,
    profile: undefined,
    variable: undefined,
    setup: undefined,
    test: undefined,
    teardown: undefined,
  };
}

function fakeValueSet(): ValueSet {
  return {
    resourceType: "ValueSet",
    id: randUuid(),
    url: randUrl(),
    identifier: [fakeIdentifier(randAlpha())],
    version: randText(),
    name: randText(),
    title: randText(),
    status: rand(["draft", "active", "retired", "unknown"]),
    experimental: randBoolean(),
    date: randRecentDate().toISOString(),
    publisher: randText(),
    contact: undefined,
    description: randParagraph(),
    useContext: undefined,
    jurisdiction: undefined,
    immutable: randBoolean(),
    purpose: randParagraph(),
    copyright: randParagraph(),
    compose: undefined,
    expansion: undefined,
  };
}

function fakeVerificationResult(): VerificationResult {
  return {
    resourceType: "VerificationResult",
    id: randUuid(),
    target: undefined,
    targetLocation: [randText()],
    need: undefined,
    status: rand([
      "attested",
      "validated",
      "in-process",
      "req-revalid",
      "val-fail",
      "reval-fail",
    ]),
    statusDate: randRecentDate().toISOString(),
    validationType: undefined,
    validationProcess: undefined,
    frequency: undefined,
    lastPerformed: randRecentDate().toISOString(),
    nextScheduled: randRecentDate().toISOString().slice(0, 10),
    failureAction: undefined,
    primarySource: undefined,
    attestation: undefined,
    validator: undefined,
  };
}

function fakeVisionPrescription(): VisionPrescription {
  return {
    resourceType: "VisionPrescription",
    id: randUuid(),
    identifier: [fakeIdentifier(randAlpha())],
    status: rand(["active", "cancelled", "draft", "entered-in-error"]),
    created: randRecentDate().toISOString(),
    patient: {
      reference: `Patient/${randUuid()}`,
    },
    encounter: undefined,
    dateWritten: randRecentDate().toISOString(),
    prescriber: {
      reference: `Practitioner/${randUuid()}`,
    },
    lensSpecification: [],
  };
}

/**
 * Build a fake `Identifier`.
 * @see https://www.hl7.org/fhir/identifier-registry.html for more information.
 */
export function fakeIdentifier(
  knownIdentifier:
    | "http://hl7.org/fhir/sid/us-ssn"
    | "http://hl7.org/fhir/sid/us-mbi"
    | "http://hl7.org/fhir/sid/us-npi"
    | string,
  override?: Partial<Identifier> | null | undefined
): Identifier {
  return {
    use: rand(["usual", "official", "temp", "secondary", "old"]),
    type: buildCodeableConcept({
      coding: [
        {
          system: "http://terminology.hl7.org/CodeSystem/v2-0203",
          code:
            knownIdentifier === "http://hl7.org/fhir/sid/us-npi" ? "PRN" : "SB",
          display:
            knownIdentifier === "http://hl7.org/fhir/sid/us-npi"
              ? "Provider number"
              : "Social Beneficiary Identifier",
        },
      ],
    }),
    system: knownIdentifier,
    value: randAlpha(),
    ...override,
  };
}

/**
 * Build a fake `HumanName`
 */
export function fakeHumanName(
  override?: Partial<HumanName> | null | undefined
): HumanName {
  return {
    use: rand(["usual", "official"]),
    family: randLastName(),
    given: [randFirstName()],
    ...override,
  };
}

/**
 * Build a fake `ContactPoint`
 */
export function fakeContactPoint(
  override?: Partial<ContactPoint> | null | undefined
): ContactPoint {
  const system = rand([
    "phone",
    "fax",
    "email",
    "url",
    "sms",
    "other",
  ]) as ContactPoint["system"];
  return {
    system,
    value: (() => {
      switch (system) {
        case "email":
          return randEmail();
        case "url":
        case "other":
          return randUrl();
        default:
          return randPhoneNumber();
      }
      throw new Error();
    })(),
    use: rand(["home", "work", "mobile"]),
    ...override,
  };
}

/**
 * Build a fake `Address`
 */
export function fakeAddress(
  override?: Partial<Address> | null | undefined
): Address {
  const address = randAddress();

  return {
    use: rand(["home", "work"]),
    type: rand(["postal", "physical", "both"]),
    line: [address.street],
    city: address.city,
    state: address.county,
    postalCode: address.zipCode,
    ...override,
  };
}
