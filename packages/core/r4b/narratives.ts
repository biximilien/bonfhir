/**
 * NOTE: This file is auto generated by the @bonfhir/codegen code generator program.
 *
 * Do not edit this file manually.
 * Instead, edit the template file "narratives.ts.hbs".
 */

import type {
  Account,
  ActivityDefinition,
  Address,
  AdministrableProductDefinition,
  AdverseEvent,
  AllergyIntolerance,
  Annotation,
  Appointment,
  AppointmentResponse,
  Attachment,
  AuditEvent,
  Basic,
  BiologicallyDerivedProduct,
  BodyStructure,
  CapabilityStatement,
  CarePlan,
  CareTeam,
  CatalogEntry,
  ChargeItem,
  ChargeItemDefinition,
  Citation,
  Claim,
  ClaimResponse,
  ClinicalImpression,
  ClinicalUseDefinition,
  CodeableConcept,
  CodeableReference,
  CodeSystem,
  Coding,
  Communication,
  CommunicationRequest,
  CompartmentDefinition,
  Composition,
  ConceptMap,
  Condition,
  Consent,
  ContactDetail,
  ContactPoint,
  Contract,
  Contributor,
  Coverage,
  CoverageEligibilityRequest,
  CoverageEligibilityResponse,
  DataRequirement,
  DetectedIssue,
  Device,
  DeviceDefinition,
  DeviceMetric,
  DeviceRequest,
  DeviceUseStatement,
  DiagnosticReport,
  DocumentManifest,
  DocumentReference,
  ElementDefinitionType,
  Encounter,
  Endpoint,
  EnrollmentRequest,
  EnrollmentResponse,
  EpisodeOfCare,
  EventDefinition,
  Evidence,
  EvidenceReport,
  EvidenceVariable,
  ExampleScenario,
  ExplanationOfBenefit,
  Expression,
  Extension,
  FamilyMemberHistory,
  FhirResource,
  Flag,
  Goal,
  GraphDefinition,
  Group,
  GuidanceResponse,
  HealthcareService,
  HumanName,
  Identifier,
  ImagingStudy,
  Immunization,
  ImmunizationEvaluation,
  ImmunizationRecommendation,
  ImplementationGuide,
  Ingredient,
  InsurancePlan,
  Invoice,
  Library,
  Linkage,
  List,
  Location,
  ManufacturedItemDefinition,
  Measure,
  MeasureReport,
  Media,
  Medication,
  MedicationAdministration,
  MedicationDispense,
  MedicationKnowledge,
  MedicationRequest,
  MedicationStatement,
  MedicinalProductDefinition,
  MessageDefinition,
  MessageHeader,
  Meta,
  MolecularSequence,
  Money,
  NamingSystem,
  Narrative,
  NutritionOrder,
  NutritionProduct,
  Observation,
  ObservationDefinition,
  OperationDefinition,
  OperationOutcome,
  Organization,
  OrganizationAffiliation,
  PackagedProductDefinition,
  ParameterDefinition,
  Patient,
  PaymentNotice,
  PaymentReconciliation,
  Period,
  Person,
  PlanDefinition,
  Practitioner,
  PractitionerRole,
  Procedure,
  Provenance,
  Quantity,
  Questionnaire,
  QuestionnaireResponse,
  Range,
  Ratio,
  RatioRange,
  Reference,
  RegulatedAuthorization,
  RelatedArtifact,
  RelatedPerson,
  RequestGroup,
  ResearchDefinition,
  ResearchElementDefinition,
  ResearchStudy,
  ResearchSubject,
  RiskAssessment,
  SampledData,
  Schedule,
  SearchParameter,
  ServiceRequest,
  Signature,
  Slot,
  Specimen,
  SpecimenDefinition,
  StructureDefinition,
  StructureMap,
  Subscription,
  SubscriptionStatus,
  SubscriptionTopic,
  Substance,
  SubstanceDefinition,
  SupplyDelivery,
  SupplyRequest,
  Task,
  TerminologyCapabilities,
  TestReport,
  TestScript,
  TriggerDefinition,
  UsageContext,
  ValueSet,
  VerificationResult,
  VisionPrescription,
} from "fhir/r4";
import type { ComplexElementType, ExtractComplexElement } from "./types";

/**
 * A unit of content used to generate a `Narrative`.
 */
export type NarrativeElement = [
  string,
  unknown,
  ElementDefinitionType,
  "1" | "*"
];

/**
 * Generate a `Narrative`-compatible XHTML representation for complex `Element` types.
 */
export function narrativeElement<TComplexElement extends ComplexElementType>(
  elementType: TComplexElement,
  element: ExtractComplexElement<TComplexElement> | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  switch (elementType) {
    case "Address":
      return narrativeElementAddress(element as unknown as Address);
    case "Annotation":
      return narrativeElementAnnotation(element as unknown as Annotation);
    case "Attachment":
      return narrativeElementAttachment(element as unknown as Attachment);
    case "CodeableConcept":
      return narrativeElementCodeableConcept(
        element as unknown as CodeableConcept
      );
    case "CodeableReference":
      return narrativeElementCodeableReference(
        element as unknown as CodeableReference
      );
    case "Coding":
      return narrativeElementCoding(element as unknown as Coding);
    case "ContactDetail":
      return narrativeElementContactDetail(element as unknown as ContactDetail);
    case "ContactPoint":
      return narrativeElementContactPoint(element as unknown as ContactPoint);
    case "Contributor":
      return narrativeElementContributor(element as unknown as Contributor);
    case "DataRequirement":
      return narrativeElementDataRequirement(
        element as unknown as DataRequirement
      );
    case "Expression":
      return narrativeElementExpression(element as unknown as Expression);
    case "Extension":
      return narrativeElementExtension(element as unknown as Extension);
    case "HumanName":
      return narrativeElementHumanName(element as unknown as HumanName);
    case "Identifier":
      return narrativeElementIdentifier(element as unknown as Identifier);
    case "Meta":
      return narrativeElementMeta(element as unknown as Meta);
    case "Money":
      return narrativeElementMoney(element as unknown as Money);
    case "Narrative":
      return narrativeElementNarrative(element as unknown as Narrative);
    case "ParameterDefinition":
      return narrativeElementParameterDefinition(
        element as unknown as ParameterDefinition
      );
    case "Period":
      return narrativeElementPeriod(element as unknown as Period);
    case "Quantity":
      return narrativeElementQuantity(element as unknown as Quantity);
    case "Range":
      return narrativeElementRange(element as unknown as Range);
    case "Ratio":
      return narrativeElementRatio(element as unknown as Ratio);
    case "RatioRange":
      return narrativeElementRatioRange(element as unknown as RatioRange);
    case "Reference":
      return narrativeElementReference(element as unknown as Reference);
    case "RelatedArtifact":
      return narrativeElementRelatedArtifact(
        element as unknown as RelatedArtifact
      );
    case "SampledData":
      return narrativeElementSampledData(element as unknown as SampledData);
    case "Signature":
      return narrativeElementSignature(element as unknown as Signature);
    case "TriggerDefinition":
      return narrativeElementTriggerDefinition(
        element as unknown as TriggerDefinition
      );
    case "UsageContext":
      return narrativeElementUsageContext(element as unknown as UsageContext);
    default:
      return undefined;
  }
}

function narrativeElementAddress(
  element: Address | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Use", element.use, { code: "code" }, "1"]),
    narrativeElementByType(["Type", element.type, { code: "code" }, "1"]),
    narrativeElementByType(["Text", element.text, { code: "string" }, "1"]),
    narrativeElementByType(["Line", element.line, { code: "string" }, "*"]),
    narrativeElementByType(["City", element.city, { code: "string" }, "1"]),
    narrativeElementByType([
      "District",
      element.district,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType(["State", element.state, { code: "string" }, "1"]),
    narrativeElementByType([
      "Postal Code",
      element.postalCode,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType([
      "Country",
      element.country,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType(["Period", element.period, { code: "Period" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementAnnotation(
  element: Annotation | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Time", element.time, { code: "dateTime" }, "1"]),
    narrativeElementByType(["Text", element.text, { code: "markdown" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementAttachment(
  element: Attachment | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Content Type",
      element.contentType,
      { code: "code" },
      "1",
    ]),
    narrativeElementByType([
      "Language",
      element.language,
      { code: "code" },
      "1",
    ]),
    narrativeElementByType(["Url", element.url, { code: "url" }, "1"]),
    narrativeElementByType([
      "Size",
      element.size,
      { code: "unsignedInt" },
      "1",
    ]),
    narrativeElementByType([
      "Hash",
      element.hash,
      { code: "base64Binary" },
      "1",
    ]),
    narrativeElementByType(["Title", element.title, { code: "string" }, "1"]),
    narrativeElementByType([
      "Creation",
      element.creation,
      { code: "dateTime" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementCodeableConcept(
  element: CodeableConcept | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Coding", element.coding, { code: "Coding" }, "*"]),
    narrativeElementByType(["Text", element.text, { code: "string" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementCodeableReference(
  element: CodeableReference | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Concept",
      element.concept,
      { code: "CodeableConcept" },
      "1",
    ]),
    narrativeElementByType([
      "Reference",
      element.reference,
      { code: "Reference" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementCoding(
  element: Coding | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["System", element.system, { code: "uri" }, "1"]),
    narrativeElementByType([
      "Version",
      element.version,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType(["Code", element.code, { code: "code" }, "1"]),
    narrativeElementByType([
      "Display",
      element.display,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType([
      "User Selected",
      element.userSelected,
      { code: "boolean" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementContactDetail(
  element: ContactDetail | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Name", element.name, { code: "string" }, "1"]),
    narrativeElementByType([
      "Telecom",
      element.telecom,
      { code: "ContactPoint" },
      "*",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementContactPoint(
  element: ContactPoint | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["System", element.system, { code: "code" }, "1"]),
    narrativeElementByType(["Value", element.value, { code: "string" }, "1"]),
    narrativeElementByType(["Use", element.use, { code: "code" }, "1"]),
    narrativeElementByType([
      "Rank",
      element.rank,
      { code: "positiveInt" },
      "1",
    ]),
    narrativeElementByType(["Period", element.period, { code: "Period" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementContributor(
  element: Contributor | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Type", element.type, { code: "code" }, "1"]),
    narrativeElementByType(["Name", element.name, { code: "string" }, "1"]),
    narrativeElementByType([
      "Contact",
      element.contact,
      { code: "ContactDetail" },
      "*",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementDataRequirement(
  element: DataRequirement | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Type", element.type, { code: "code" }, "1"]),
    narrativeElementByType([
      "Profile",
      element.profile,
      { code: "canonical" },
      "*",
    ]),
    narrativeElementByType([
      "Must Support",
      element.mustSupport,
      { code: "string" },
      "*",
    ]),
    narrativeElementByType([
      "Code Filter",
      element.codeFilter,
      { code: "Element" },
      "*",
    ]),
    narrativeElementByType([
      "Date Filter",
      element.dateFilter,
      { code: "Element" },
      "*",
    ]),
    narrativeElementByType([
      "Limit",
      element.limit,
      { code: "positiveInt" },
      "1",
    ]),
    narrativeElementByType(["Sort", element.sort, { code: "Element" }, "*"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementExpression(
  element: Expression | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Description",
      element.description,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType(["Name", element.name, { code: "id" }, "1"]),
    narrativeElementByType([
      "Language",
      element.language,
      { code: "code" },
      "1",
    ]),
    narrativeElementByType([
      "Expression",
      element.expression,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType([
      "Reference",
      element.reference,
      { code: "uri" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementExtension(
  element: Extension | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementHumanName(
  element: HumanName | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Use", element.use, { code: "code" }, "1"]),
    narrativeElementByType(["Text", element.text, { code: "string" }, "1"]),
    narrativeElementByType(["Family", element.family, { code: "string" }, "1"]),
    narrativeElementByType(["Given", element.given, { code: "string" }, "*"]),
    narrativeElementByType(["Prefix", element.prefix, { code: "string" }, "*"]),
    narrativeElementByType(["Suffix", element.suffix, { code: "string" }, "*"]),
    narrativeElementByType(["Period", element.period, { code: "Period" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementIdentifier(
  element: Identifier | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Use", element.use, { code: "code" }, "1"]),
    narrativeElementByType([
      "Type",
      element.type,
      { code: "CodeableConcept" },
      "1",
    ]),
    narrativeElementByType(["System", element.system, { code: "uri" }, "1"]),
    narrativeElementByType(["Value", element.value, { code: "string" }, "1"]),
    narrativeElementByType(["Period", element.period, { code: "Period" }, "1"]),
    narrativeElementByType([
      "Assigner",
      element.assigner,
      { code: "Reference" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementMeta(
  element: Meta | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Version Id",
      element.versionId,
      { code: "id" },
      "1",
    ]),
    narrativeElementByType([
      "Last Updated",
      element.lastUpdated,
      { code: "instant" },
      "1",
    ]),
    narrativeElementByType(["Source", element.source, { code: "uri" }, "1"]),
    narrativeElementByType([
      "Profile",
      element.profile,
      { code: "canonical" },
      "*",
    ]),
    narrativeElementByType([
      "Security",
      element.security,
      { code: "Coding" },
      "*",
    ]),
    narrativeElementByType(["Tag", element.tag, { code: "Coding" }, "*"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementMoney(
  element: Money | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Value", element.value, { code: "decimal" }, "1"]),
    narrativeElementByType([
      "Currency",
      element.currency,
      { code: "code" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementNarrative(
  element: Narrative | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementParameterDefinition(
  element: ParameterDefinition | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Name", element.name, { code: "code" }, "1"]),
    narrativeElementByType(["Use", element.use, { code: "code" }, "1"]),
    narrativeElementByType(["Min", element.min, { code: "integer" }, "1"]),
    narrativeElementByType(["Max", element.max, { code: "string" }, "1"]),
    narrativeElementByType([
      "Documentation",
      element.documentation,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType(["Type", element.type, { code: "code" }, "1"]),
    narrativeElementByType([
      "Profile",
      element.profile,
      { code: "canonical" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementPeriod(
  element: Period | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Start", element.start, { code: "dateTime" }, "1"]),
    narrativeElementByType(["End", element.end, { code: "dateTime" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementQuantity(
  element: Quantity | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Value", element.value, { code: "decimal" }, "1"]),
    narrativeElementByType([
      "Comparator",
      element.comparator,
      { code: "code" },
      "1",
    ]),
    narrativeElementByType(["Unit", element.unit, { code: "string" }, "1"]),
    narrativeElementByType(["System", element.system, { code: "uri" }, "1"]),
    narrativeElementByType(["Code", element.code, { code: "code" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementRange(
  element: Range | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Low",
      element.low,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ]),
    narrativeElementByType([
      "High",
      element.high,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementRatio(
  element: Ratio | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Numerator",
      element.numerator,
      { code: "Quantity" },
      "1",
    ]),
    narrativeElementByType([
      "Denominator",
      element.denominator,
      { code: "Quantity" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementRatioRange(
  element: RatioRange | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Low Numerator",
      element.lowNumerator,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ]),
    narrativeElementByType([
      "High Numerator",
      element.highNumerator,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ]),
    narrativeElementByType([
      "Denominator",
      element.denominator,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementReference(
  element: Reference | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Reference",
      element.reference,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType(["Type", element.type, { code: "uri" }, "1"]),
    narrativeElementByType([
      "Identifier",
      element.identifier,
      { code: "Identifier" },
      "1",
    ]),
    narrativeElementByType([
      "Display",
      element.display,
      { code: "string" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementRelatedArtifact(
  element: RelatedArtifact | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Type", element.type, { code: "code" }, "1"]),
    narrativeElementByType(["Label", element.label, { code: "string" }, "1"]),
    narrativeElementByType([
      "Display",
      element.display,
      { code: "string" },
      "1",
    ]),
    narrativeElementByType([
      "Citation",
      element.citation,
      { code: "markdown" },
      "1",
    ]),
    narrativeElementByType(["Url", element.url, { code: "url" }, "1"]),
    narrativeElementByType([
      "Document",
      element.document,
      { code: "Attachment" },
      "1",
    ]),
    narrativeElementByType([
      "Resource",
      element.resource,
      { code: "canonical" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementSampledData(
  element: SampledData | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType([
      "Origin",
      element.origin,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ]),
    narrativeElementByType([
      "Period",
      element.period,
      { code: "decimal" },
      "1",
    ]),
    narrativeElementByType([
      "Factor",
      element.factor,
      { code: "decimal" },
      "1",
    ]),
    narrativeElementByType([
      "Lower Limit",
      element.lowerLimit,
      { code: "decimal" },
      "1",
    ]),
    narrativeElementByType([
      "Upper Limit",
      element.upperLimit,
      { code: "decimal" },
      "1",
    ]),
    narrativeElementByType([
      "Dimensions",
      element.dimensions,
      { code: "positiveInt" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementSignature(
  element: Signature | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Type", element.type, { code: "Coding" }, "*"]),
    narrativeElementByType(["When", element.when, { code: "instant" }, "1"]),
    narrativeElementByType(["Who", element.who, { code: "Reference" }, "1"]),
    narrativeElementByType([
      "On Behalf Of",
      element.onBehalfOf,
      { code: "Reference" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementTriggerDefinition(
  element: TriggerDefinition | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Type", element.type, { code: "code" }, "1"]),
    narrativeElementByType(["Name", element.name, { code: "string" }, "1"]),
    narrativeElementByType([
      "Data",
      element.data,
      { code: "DataRequirement" },
      "*",
    ]),
    narrativeElementByType([
      "Condition",
      element.condition,
      { code: "Expression" },
      "1",
    ]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}
function narrativeElementUsageContext(
  element: UsageContext | null | undefined
): string | undefined {
  if (!element) {
    return undefined;
  }

  const components: Array<string | undefined> = [
    narrativeElementByType(["Code", element.code, { code: "Coding" }, "1"]),
  ];

  if (!components.length) {
    return undefined;
  }

  return `<ul>${components.filter((x) => x?.trim()).join("")}</ul>`;
}

/**
 * Generate a `Narrative`-compatible XHTML representation as specified by a `NarrativeElement`.
 */
export function narrativeElementByType([
  attr,
  value,
  type,
  max,
]: NarrativeElement): string | undefined {
  if (!value) {
    return undefined;
  }

  switch (type.code) {
    case "base64Binary":
    case "boolean":
    case "date":
    case "dateTime":
    case "decimal":
    case "instant":
    case "integer":
    case "string":
    case "http://hl7.org/fhirpath/System.String":
    case "time":
    case "uri":
    case "url":
    case "xhtml":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }

        return `<li><span class="fhir-attr">${attr}: </span><span class="fhir-value">${value
          .map((x) => htmlEncode(x?.toString()))
          .join(", ")}</span></li>`;
      }
      return `<li><span class="fhir-attr">${attr}: </span><span class="fhir-value">${htmlEncode(
        value?.toString()
      )}</span></li>`;
    case "Address":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementAddress(x as unknown as Address)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementAddress(
        value as unknown as Address
      )}</li>`;
    case "Annotation":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementAnnotation(
                x as unknown as Annotation
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementAnnotation(
        value as unknown as Annotation
      )}</li>`;
    case "Attachment":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementAttachment(
                x as unknown as Attachment
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementAttachment(
        value as unknown as Attachment
      )}</li>`;
    case "CodeableConcept":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementCodeableConcept(
                x as unknown as CodeableConcept
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementCodeableConcept(
        value as unknown as CodeableConcept
      )}</li>`;
    case "CodeableReference":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementCodeableReference(
                x as unknown as CodeableReference
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementCodeableReference(
        value as unknown as CodeableReference
      )}</li>`;
    case "Coding":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) => `<li>${narrativeElementCoding(x as unknown as Coding)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementCoding(
        value as unknown as Coding
      )}</li>`;
    case "ContactDetail":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementContactDetail(
                x as unknown as ContactDetail
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementContactDetail(
        value as unknown as ContactDetail
      )}</li>`;
    case "ContactPoint":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementContactPoint(
                x as unknown as ContactPoint
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementContactPoint(
        value as unknown as ContactPoint
      )}</li>`;
    case "Contributor":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementContributor(
                x as unknown as Contributor
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementContributor(
        value as unknown as Contributor
      )}</li>`;
    case "DataRequirement":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementDataRequirement(
                x as unknown as DataRequirement
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementDataRequirement(
        value as unknown as DataRequirement
      )}</li>`;
    case "Expression":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementExpression(
                x as unknown as Expression
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementExpression(
        value as unknown as Expression
      )}</li>`;
    case "Extension":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementExtension(x as unknown as Extension)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementExtension(
        value as unknown as Extension
      )}</li>`;
    case "HumanName":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementHumanName(x as unknown as HumanName)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementHumanName(
        value as unknown as HumanName
      )}</li>`;
    case "Identifier":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementIdentifier(
                x as unknown as Identifier
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementIdentifier(
        value as unknown as Identifier
      )}</li>`;
    case "Meta":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map((x) => `<li>${narrativeElementMeta(x as unknown as Meta)}</li>`)
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementMeta(
        value as unknown as Meta
      )}</li>`;
    case "Money":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) => `<li>${narrativeElementMoney(x as unknown as Money)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementMoney(
        value as unknown as Money
      )}</li>`;
    case "Narrative":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementNarrative(x as unknown as Narrative)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementNarrative(
        value as unknown as Narrative
      )}</li>`;
    case "ParameterDefinition":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementParameterDefinition(
                x as unknown as ParameterDefinition
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementParameterDefinition(
        value as unknown as ParameterDefinition
      )}</li>`;
    case "Period":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) => `<li>${narrativeElementPeriod(x as unknown as Period)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementPeriod(
        value as unknown as Period
      )}</li>`;
    case "Quantity":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementQuantity(x as unknown as Quantity)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementQuantity(
        value as unknown as Quantity
      )}</li>`;
    case "Range":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) => `<li>${narrativeElementRange(x as unknown as Range)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementRange(
        value as unknown as Range
      )}</li>`;
    case "Ratio":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) => `<li>${narrativeElementRatio(x as unknown as Ratio)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementRatio(
        value as unknown as Ratio
      )}</li>`;
    case "RatioRange":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementRatioRange(
                x as unknown as RatioRange
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementRatioRange(
        value as unknown as RatioRange
      )}</li>`;
    case "Reference":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementReference(x as unknown as Reference)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementReference(
        value as unknown as Reference
      )}</li>`;
    case "RelatedArtifact":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementRelatedArtifact(
                x as unknown as RelatedArtifact
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementRelatedArtifact(
        value as unknown as RelatedArtifact
      )}</li>`;
    case "SampledData":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementSampledData(
                x as unknown as SampledData
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementSampledData(
        value as unknown as SampledData
      )}</li>`;
    case "Signature":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementSignature(x as unknown as Signature)}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementSignature(
        value as unknown as Signature
      )}</li>`;
    case "TriggerDefinition":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementTriggerDefinition(
                x as unknown as TriggerDefinition
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementTriggerDefinition(
        value as unknown as TriggerDefinition
      )}</li>`;
    case "UsageContext":
      if (max === "*") {
        if (!Array.isArray(value)) {
          return undefined;
        }
        return `<li><span class="fhir-attr">${attr}: </span><ul>${value
          .map(
            (x) =>
              `<li>${narrativeElementUsageContext(
                x as unknown as UsageContext
              )}</li>`
          )
          .join("")}</ul></li>`;
      }

      return `<li><span class="fhir-attr">${attr}: </span>${narrativeElementUsageContext(
        value as unknown as UsageContext
      )}</li>`;
    default:
      return undefined;
  }
}

/**
 * Generate a `Narrative` for a FHIR resource.
 */
export function narrative<TResourceType extends FhirResource>(
  resource: TResourceType
): Narrative {
  switch (resource.resourceType) {
    case "Account":
      return narrativeAccount(resource);
    case "ActivityDefinition":
      return narrativeActivityDefinition(resource);
    case "AdministrableProductDefinition":
      return narrativeAdministrableProductDefinition(resource);
    case "AdverseEvent":
      return narrativeAdverseEvent(resource);
    case "AllergyIntolerance":
      return narrativeAllergyIntolerance(resource);
    case "Appointment":
      return narrativeAppointment(resource);
    case "AppointmentResponse":
      return narrativeAppointmentResponse(resource);
    case "AuditEvent":
      return narrativeAuditEvent(resource);
    case "Basic":
      return narrativeBasic(resource);
    case "BiologicallyDerivedProduct":
      return narrativeBiologicallyDerivedProduct(resource);
    case "BodyStructure":
      return narrativeBodyStructure(resource);
    case "CapabilityStatement":
      return narrativeCapabilityStatement(resource);
    case "CarePlan":
      return narrativeCarePlan(resource);
    case "CareTeam":
      return narrativeCareTeam(resource);
    case "CatalogEntry":
      return narrativeCatalogEntry(resource);
    case "ChargeItem":
      return narrativeChargeItem(resource);
    case "ChargeItemDefinition":
      return narrativeChargeItemDefinition(resource);
    case "Citation":
      return narrativeCitation(resource);
    case "Claim":
      return narrativeClaim(resource);
    case "ClaimResponse":
      return narrativeClaimResponse(resource);
    case "ClinicalImpression":
      return narrativeClinicalImpression(resource);
    case "ClinicalUseDefinition":
      return narrativeClinicalUseDefinition(resource);
    case "CodeSystem":
      return narrativeCodeSystem(resource);
    case "Communication":
      return narrativeCommunication(resource);
    case "CommunicationRequest":
      return narrativeCommunicationRequest(resource);
    case "CompartmentDefinition":
      return narrativeCompartmentDefinition(resource);
    case "Composition":
      return narrativeComposition(resource);
    case "ConceptMap":
      return narrativeConceptMap(resource);
    case "Condition":
      return narrativeCondition(resource);
    case "Consent":
      return narrativeConsent(resource);
    case "Contract":
      return narrativeContract(resource);
    case "Coverage":
      return narrativeCoverage(resource);
    case "CoverageEligibilityRequest":
      return narrativeCoverageEligibilityRequest(resource);
    case "CoverageEligibilityResponse":
      return narrativeCoverageEligibilityResponse(resource);
    case "DetectedIssue":
      return narrativeDetectedIssue(resource);
    case "Device":
      return narrativeDevice(resource);
    case "DeviceDefinition":
      return narrativeDeviceDefinition(resource);
    case "DeviceMetric":
      return narrativeDeviceMetric(resource);
    case "DeviceRequest":
      return narrativeDeviceRequest(resource);
    case "DeviceUseStatement":
      return narrativeDeviceUseStatement(resource);
    case "DiagnosticReport":
      return narrativeDiagnosticReport(resource);
    case "DocumentManifest":
      return narrativeDocumentManifest(resource);
    case "DocumentReference":
      return narrativeDocumentReference(resource);
    case "Encounter":
      return narrativeEncounter(resource);
    case "Endpoint":
      return narrativeEndpoint(resource);
    case "EnrollmentRequest":
      return narrativeEnrollmentRequest(resource);
    case "EnrollmentResponse":
      return narrativeEnrollmentResponse(resource);
    case "EpisodeOfCare":
      return narrativeEpisodeOfCare(resource);
    case "EventDefinition":
      return narrativeEventDefinition(resource);
    case "Evidence":
      return narrativeEvidence(resource);
    case "EvidenceReport":
      return narrativeEvidenceReport(resource);
    case "EvidenceVariable":
      return narrativeEvidenceVariable(resource);
    case "ExampleScenario":
      return narrativeExampleScenario(resource);
    case "ExplanationOfBenefit":
      return narrativeExplanationOfBenefit(resource);
    case "FamilyMemberHistory":
      return narrativeFamilyMemberHistory(resource);
    case "Flag":
      return narrativeFlag(resource);
    case "Goal":
      return narrativeGoal(resource);
    case "GraphDefinition":
      return narrativeGraphDefinition(resource);
    case "Group":
      return narrativeGroup(resource);
    case "GuidanceResponse":
      return narrativeGuidanceResponse(resource);
    case "HealthcareService":
      return narrativeHealthcareService(resource);
    case "ImagingStudy":
      return narrativeImagingStudy(resource);
    case "Immunization":
      return narrativeImmunization(resource);
    case "ImmunizationEvaluation":
      return narrativeImmunizationEvaluation(resource);
    case "ImmunizationRecommendation":
      return narrativeImmunizationRecommendation(resource);
    case "ImplementationGuide":
      return narrativeImplementationGuide(resource);
    case "Ingredient":
      return narrativeIngredient(resource);
    case "InsurancePlan":
      return narrativeInsurancePlan(resource);
    case "Invoice":
      return narrativeInvoice(resource);
    case "Library":
      return narrativeLibrary(resource);
    case "Linkage":
      return narrativeLinkage(resource);
    case "List":
      return narrativeList(resource);
    case "Location":
      return narrativeLocation(resource);
    case "ManufacturedItemDefinition":
      return narrativeManufacturedItemDefinition(resource);
    case "Measure":
      return narrativeMeasure(resource);
    case "MeasureReport":
      return narrativeMeasureReport(resource);
    case "Media":
      return narrativeMedia(resource);
    case "Medication":
      return narrativeMedication(resource);
    case "MedicationAdministration":
      return narrativeMedicationAdministration(resource);
    case "MedicationDispense":
      return narrativeMedicationDispense(resource);
    case "MedicationKnowledge":
      return narrativeMedicationKnowledge(resource);
    case "MedicationRequest":
      return narrativeMedicationRequest(resource);
    case "MedicationStatement":
      return narrativeMedicationStatement(resource);
    case "MedicinalProductDefinition":
      return narrativeMedicinalProductDefinition(resource);
    case "MessageDefinition":
      return narrativeMessageDefinition(resource);
    case "MessageHeader":
      return narrativeMessageHeader(resource);
    case "MolecularSequence":
      return narrativeMolecularSequence(resource);
    case "NamingSystem":
      return narrativeNamingSystem(resource);
    case "NutritionOrder":
      return narrativeNutritionOrder(resource);
    case "NutritionProduct":
      return narrativeNutritionProduct(resource);
    case "Observation":
      return narrativeObservation(resource);
    case "ObservationDefinition":
      return narrativeObservationDefinition(resource);
    case "OperationDefinition":
      return narrativeOperationDefinition(resource);
    case "OperationOutcome":
      return narrativeOperationOutcome(resource);
    case "Organization":
      return narrativeOrganization(resource);
    case "OrganizationAffiliation":
      return narrativeOrganizationAffiliation(resource);
    case "PackagedProductDefinition":
      return narrativePackagedProductDefinition(resource);
    case "Patient":
      return narrativePatient(resource);
    case "PaymentNotice":
      return narrativePaymentNotice(resource);
    case "PaymentReconciliation":
      return narrativePaymentReconciliation(resource);
    case "Person":
      return narrativePerson(resource);
    case "PlanDefinition":
      return narrativePlanDefinition(resource);
    case "Practitioner":
      return narrativePractitioner(resource);
    case "PractitionerRole":
      return narrativePractitionerRole(resource);
    case "Procedure":
      return narrativeProcedure(resource);
    case "Provenance":
      return narrativeProvenance(resource);
    case "Questionnaire":
      return narrativeQuestionnaire(resource);
    case "QuestionnaireResponse":
      return narrativeQuestionnaireResponse(resource);
    case "RegulatedAuthorization":
      return narrativeRegulatedAuthorization(resource);
    case "RelatedPerson":
      return narrativeRelatedPerson(resource);
    case "RequestGroup":
      return narrativeRequestGroup(resource);
    case "ResearchDefinition":
      return narrativeResearchDefinition(resource);
    case "ResearchElementDefinition":
      return narrativeResearchElementDefinition(resource);
    case "ResearchStudy":
      return narrativeResearchStudy(resource);
    case "ResearchSubject":
      return narrativeResearchSubject(resource);
    case "RiskAssessment":
      return narrativeRiskAssessment(resource);
    case "Schedule":
      return narrativeSchedule(resource);
    case "SearchParameter":
      return narrativeSearchParameter(resource);
    case "ServiceRequest":
      return narrativeServiceRequest(resource);
    case "Slot":
      return narrativeSlot(resource);
    case "Specimen":
      return narrativeSpecimen(resource);
    case "SpecimenDefinition":
      return narrativeSpecimenDefinition(resource);
    case "StructureDefinition":
      return narrativeStructureDefinition(resource);
    case "StructureMap":
      return narrativeStructureMap(resource);
    case "Subscription":
      return narrativeSubscription(resource);
    case "SubscriptionStatus":
      return narrativeSubscriptionStatus(resource);
    case "SubscriptionTopic":
      return narrativeSubscriptionTopic(resource);
    case "Substance":
      return narrativeSubstance(resource);
    case "SubstanceDefinition":
      return narrativeSubstanceDefinition(resource);
    case "SupplyDelivery":
      return narrativeSupplyDelivery(resource);
    case "SupplyRequest":
      return narrativeSupplyRequest(resource);
    case "Task":
      return narrativeTask(resource);
    case "TerminologyCapabilities":
      return narrativeTerminologyCapabilities(resource);
    case "TestReport":
      return narrativeTestReport(resource);
    case "TestScript":
      return narrativeTestScript(resource);
    case "ValueSet":
      return narrativeValueSet(resource);
    case "VerificationResult":
      return narrativeVerificationResult(resource);
    case "VisionPrescription":
      return narrativeVisionPrescription(resource);
    default:
      throw new Error(
        `Unsupported narrative for resource type ${resource.resourceType}`
      );
  }
}

function narrativeAccount(r: Account): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "*"],
    ["Service Period", r.servicePeriod, { code: "Period" }, "1"],
    ["Coverage", r.coverage, { code: "BackboneElement" }, "*"],
    ["Owner", r.owner, { code: "Reference" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
  ]);
}

function narrativeActivityDefinition(r: ActivityDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Kind", r.kind, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Do Not Perform", r.doNotPerform, { code: "boolean" }, "1"],
  ]);
}

function narrativeAdministrableProductDefinition(
  r: AdministrableProductDefinition
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Form Of", r.formOf, { code: "Reference" }, "*"],
    [
      "Administrable Dose Form",
      r.administrableDoseForm,
      { code: "CodeableConcept" },
      "1",
    ],
    [
      "Unit Of Presentation",
      r.unitOfPresentation,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Produced From", r.producedFrom, { code: "Reference" }, "*"],
    ["Ingredient", r.ingredient, { code: "CodeableConcept" }, "*"],
    ["Device", r.device, { code: "Reference" }, "1"],
    ["Property", r.property, { code: "BackboneElement" }, "*"],
    [
      "Route Of Administration",
      r.routeOfAdministration,
      { code: "BackboneElement" },
      "*",
    ],
  ]);
}

function narrativeAdverseEvent(r: AdverseEvent): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Actuality", r.actuality, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Event", r.event, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Detected", r.detected, { code: "dateTime" }, "1"],
    ["Recorded Date", r.recordedDate, { code: "dateTime" }, "1"],
    ["Resulting Condition", r.resultingCondition, { code: "Reference" }, "*"],
    ["Location", r.location, { code: "Reference" }, "1"],
    ["Seriousness", r.seriousness, { code: "CodeableConcept" }, "1"],
    ["Severity", r.severity, { code: "CodeableConcept" }, "1"],
    ["Outcome", r.outcome, { code: "CodeableConcept" }, "1"],
    ["Recorder", r.recorder, { code: "Reference" }, "1"],
    ["Contributor", r.contributor, { code: "Reference" }, "*"],
    ["Suspect Entity", r.suspectEntity, { code: "BackboneElement" }, "*"],
    [
      "Subject Medical History",
      r.subjectMedicalHistory,
      { code: "Reference" },
      "*",
    ],
    ["Reference Document", r.referenceDocument, { code: "Reference" }, "*"],
    ["Study", r.study, { code: "Reference" }, "*"],
  ]);
}

function narrativeAllergyIntolerance(r: AllergyIntolerance): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Clinical Status", r.clinicalStatus, { code: "CodeableConcept" }, "1"],
    [
      "Verification Status",
      r.verificationStatus,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Type", r.type, { code: "code" }, "1"],
    ["Category", r.category, { code: "code" }, "*"],
    ["Criticality", r.criticality, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Asserter", r.asserter, { code: "Reference" }, "1"],
  ]);
}

function narrativeAppointment(r: Appointment): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    [
      "Cancelation Reason",
      r.cancelationReason,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Service Category", r.serviceCategory, { code: "CodeableConcept" }, "*"],
    ["Service Type", r.serviceType, { code: "CodeableConcept" }, "*"],
    ["Specialty", r.specialty, { code: "CodeableConcept" }, "*"],
    ["Appointment Type", r.appointmentType, { code: "CodeableConcept" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Start", r.start, { code: "instant" }, "1"],
    ["End", r.end, { code: "instant" }, "1"],
  ]);
}

function narrativeAppointmentResponse(r: AppointmentResponse): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Appointment", r.appointment, { code: "Reference" }, "1"],
    ["Participant Type", r.participantType, { code: "CodeableConcept" }, "*"],
    ["Actor", r.actor, { code: "Reference" }, "1"],
    ["Participant Status", r.participantStatus, { code: "code" }, "1"],
  ]);
}

function narrativeAuditEvent(r: AuditEvent): Narrative {
  return buildNarrative([
    ["Type", r.type, { code: "Coding" }, "1"],
    ["Subtype", r.subtype, { code: "Coding" }, "*"],
    ["Action", r.action, { code: "code" }, "1"],
    ["Recorded", r.recorded, { code: "instant" }, "1"],
    ["Outcome", r.outcome, { code: "code" }, "1"],
    ["Outcome Desc", r.outcomeDesc, { code: "string" }, "1"],
    ["Purpose Of Event", r.purposeOfEvent, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeBasic(r: Basic): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Created", r.created, { code: "date" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
  ]);
}

function narrativeBiologicallyDerivedProduct(
  r: BiologicallyDerivedProduct
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
  ]);
}

function narrativeBodyStructure(r: BodyStructure): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Morphology", r.morphology, { code: "CodeableConcept" }, "1"],
    ["Location", r.location, { code: "CodeableConcept" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
  ]);
}

function narrativeCapabilityStatement(r: CapabilityStatement): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Kind", r.kind, { code: "code" }, "1"],
    ["Instantiates", r.instantiates, { code: "canonical" }, "*"],
    ["Imports", r.imports, { code: "canonical" }, "*"],
    ["Software", r.software, { code: "BackboneElement" }, "1"],
    ["Implementation", r.implementation, { code: "BackboneElement" }, "1"],
    ["Fhir Version", r.fhirVersion, { code: "code" }, "1"],
    ["Format", r.format, { code: "code" }, "*"],
    ["Patch Format", r.patchFormat, { code: "code" }, "*"],
    ["Implementation Guide", r.implementationGuide, { code: "canonical" }, "*"],
    ["Rest", r.rest, { code: "BackboneElement" }, "*"],
    ["Messaging", r.messaging, { code: "BackboneElement" }, "*"],
    ["Document", r.document, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeCarePlan(r: CarePlan): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    [
      "Based On",
      r.basedOn,
      {
        extension: [
          {
            url: "http://hl7.org/fhir/StructureDefinition/structuredefinition-hierarchy",
            valueBoolean: true,
          },
        ],
        code: "Reference",
      },
      "*",
    ],
    [
      "Replaces",
      r.replaces,
      {
        extension: [
          {
            url: "http://hl7.org/fhir/StructureDefinition/structuredefinition-hierarchy",
            valueBoolean: true,
          },
        ],
        code: "Reference",
      },
      "*",
    ],
    [
      "Part Of",
      r.partOf,
      {
        extension: [
          {
            url: "http://hl7.org/fhir/StructureDefinition/structuredefinition-hierarchy",
            valueBoolean: true,
          },
        ],
        code: "Reference",
      },
      "*",
    ],
    ["Status", r.status, { code: "code" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
    ["Addresses", r.addresses, { code: "Reference" }, "*"],
  ]);
}

function narrativeCareTeam(r: CareTeam): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    [
      "Managing Organization",
      r.managingOrganization,
      { code: "Reference" },
      "*",
    ],
  ]);
}

function narrativeCatalogEntry(r: CatalogEntry): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Orderable", r.orderable, { code: "boolean" }, "1"],
    ["Referenced Item", r.referencedItem, { code: "Reference" }, "1"],
  ]);
}

function narrativeChargeItem(r: ChargeItem): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Context", r.context, { code: "Reference" }, "1"],
    ["Quantity", r.quantity, { code: "Quantity" }, "1"],
    ["Bodysite", r.bodysite, { code: "CodeableConcept" }, "*"],
    ["Enterer", r.enterer, { code: "Reference" }, "1"],
    ["Entered Date", r.enteredDate, { code: "dateTime" }, "1"],
    ["Account", r.account, { code: "Reference" }, "*"],
  ]);
}

function narrativeChargeItemDefinition(r: ChargeItemDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Derived From Uri", r.derivedFromUri, { code: "uri" }, "*"],
    ["Part Of", r.partOf, { code: "canonical" }, "*"],
    ["Replaces", r.replaces, { code: "canonical" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeCitation(r: Citation): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
  ]);
}

function narrativeClaim(r: Claim): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Use", r.use, { code: "code" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Billable Period", r.billablePeriod, { code: "Period" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Insurer", r.insurer, { code: "Reference" }, "1"],
    ["Provider", r.provider, { code: "Reference" }, "1"],
    ["Priority", r.priority, { code: "CodeableConcept" }, "1"],
    ["Insurance", r.insurance, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeClaimResponse(r: ClaimResponse): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Use", r.use, { code: "code" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Insurer", r.insurer, { code: "Reference" }, "1"],
    ["Request", r.request, { code: "Reference" }, "1"],
    ["Outcome", r.outcome, { code: "code" }, "1"],
    ["Total", r.total, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeClinicalImpression(r: ClinicalImpression): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Assessor", r.assessor, { code: "Reference" }, "1"],
    ["Problem", r.problem, { code: "Reference" }, "*"],
  ]);
}

function narrativeClinicalUseDefinition(r: ClinicalUseDefinition): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Type", r.type, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "CodeableConcept" }, "1"],
    ["Contraindication", r.contraindication, { code: "BackboneElement" }, "1"],
    ["Indication", r.indication, { code: "BackboneElement" }, "1"],
    ["Interaction", r.interaction, { code: "BackboneElement" }, "1"],
    ["Population", r.population, { code: "Reference" }, "*"],
    [
      "Undesirable Effect",
      r.undesirableEffect,
      { code: "BackboneElement" },
      "1",
    ],
    ["Warning", r.warning, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeCodeSystem(r: CodeSystem): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Case Sensitive", r.caseSensitive, { code: "boolean" }, "1"],
    ["Value Set", r.valueSet, { code: "canonical" }, "1"],
    ["Hierarchy Meaning", r.hierarchyMeaning, { code: "code" }, "1"],
    ["Compositional", r.compositional, { code: "boolean" }, "1"],
    ["Version Needed", r.versionNeeded, { code: "boolean" }, "1"],
    ["Content", r.content, { code: "code" }, "1"],
    ["Supplements", r.supplements, { code: "canonical" }, "1"],
    ["Count", r.count, { code: "unsignedInt" }, "1"],
    ["Filter", r.filter, { code: "BackboneElement" }, "*"],
    ["Property", r.property, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeCommunication(r: Communication): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Status Reason", r.statusReason, { code: "CodeableConcept" }, "1"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
  ]);
}

function narrativeCommunicationRequest(r: CommunicationRequest): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Replaces", r.replaces, { code: "Reference" }, "*"],
    ["Group Identifier", r.groupIdentifier, { code: "Identifier" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Do Not Perform", r.doNotPerform, { code: "boolean" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Authored On", r.authoredOn, { code: "dateTime" }, "1"],
    ["Requester", r.requester, { code: "Reference" }, "1"],
    ["Sender", r.sender, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
  ]);
}

function narrativeCompartmentDefinition(r: CompartmentDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Code", r.code, { code: "code" }, "1"],
    ["Search", r.search, { code: "boolean" }, "1"],
    ["Resource", r.resource, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeComposition(r: Composition): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Author", r.author, { code: "Reference" }, "*"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Confidentiality", r.confidentiality, { code: "code" }, "1"],
    ["Custodian", r.custodian, { code: "Reference" }, "1"],
    ["Event", r.event, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeConceptMap(r: ConceptMap): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeCondition(r: Condition): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Clinical Status", r.clinicalStatus, { code: "CodeableConcept" }, "1"],
    [
      "Verification Status",
      r.verificationStatus,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Body Site", r.bodySite, { code: "CodeableConcept" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Recorded Date", r.recordedDate, { code: "dateTime" }, "1"],
    ["Recorder", r.recorder, { code: "Reference" }, "1"],
    ["Asserter", r.asserter, { code: "Reference" }, "1"],
  ]);
}

function narrativeConsent(r: Consent): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Scope", r.scope, { code: "CodeableConcept" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Date Time", r.dateTime, { code: "dateTime" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "*"],
    ["Organization", r.organization, { code: "Reference" }, "*"],
    ["Policy Rule", r.policyRule, { code: "CodeableConcept" }, "1"],
    ["Verification", r.verification, { code: "BackboneElement" }, "*"],
    ["Provision", r.provision, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeContract(r: Contract): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Issued", r.issued, { code: "dateTime" }, "1"],
    ["Applies", r.applies, { code: "Period" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "*"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Sub Type", r.subType, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeCoverage(r: Coverage): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Policy Holder", r.policyHolder, { code: "Reference" }, "1"],
    ["Subscriber", r.subscriber, { code: "Reference" }, "1"],
    ["Subscriber Id", r.subscriberId, { code: "string" }, "1"],
    ["Beneficiary", r.beneficiary, { code: "Reference" }, "1"],
    ["Dependent", r.dependent, { code: "string" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Payor", r.payor, { code: "Reference" }, "*"],
    ["Order", r.order, { code: "positiveInt" }, "1"],
    ["Network", r.network, { code: "string" }, "1"],
  ]);
}

function narrativeCoverageEligibilityRequest(
  r: CoverageEligibilityRequest
): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Purpose", r.purpose, { code: "code" }, "*"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Insurer", r.insurer, { code: "Reference" }, "1"],
  ]);
}

function narrativeCoverageEligibilityResponse(
  r: CoverageEligibilityResponse
): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Purpose", r.purpose, { code: "code" }, "*"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Request", r.request, { code: "Reference" }, "1"],
    ["Outcome", r.outcome, { code: "code" }, "1"],
    ["Insurer", r.insurer, { code: "Reference" }, "1"],
  ]);
}

function narrativeDetectedIssue(r: DetectedIssue): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Severity", r.severity, { code: "code" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
    ["Implicated", r.implicated, { code: "Reference" }, "*"],
  ]);
}

function narrativeDevice(r: Device): Narrative {
  return buildNarrative([
    ["Udi Carrier", r.udiCarrier, { code: "BackboneElement" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Safety", r.safety, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeDeviceDefinition(r: DeviceDefinition): Narrative {
  return buildNarrative([
    ["Safety", r.safety, { code: "CodeableConcept" }, "*"],
    ["Parent Device", r.parentDevice, { code: "Reference" }, "1"],
  ]);
}

function narrativeDeviceMetric(r: DeviceMetric): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Unit", r.unit, { code: "CodeableConcept" }, "1"],
    ["Source", r.source, { code: "Reference" }, "1"],
    ["Parent", r.parent, { code: "Reference" }, "1"],
    ["Operational Status", r.operationalStatus, { code: "code" }, "1"],
    ["Color", r.color, { code: "code" }, "1"],
    ["Category", r.category, { code: "code" }, "1"],
    ["Measurement Period", r.measurementPeriod, { code: "Timing" }, "1"],
    ["Calibration", r.calibration, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeDeviceRequest(r: DeviceRequest): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Prior Request", r.priorRequest, { code: "Reference" }, "*"],
    ["Group Identifier", r.groupIdentifier, { code: "Identifier" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Authored On", r.authoredOn, { code: "dateTime" }, "1"],
    ["Requester", r.requester, { code: "Reference" }, "1"],
    ["Performer Type", r.performerType, { code: "CodeableConcept" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
  ]);
}

function narrativeDeviceUseStatement(r: DeviceUseStatement): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Derived From", r.derivedFrom, { code: "Reference" }, "*"],
    ["Recorded On", r.recordedOn, { code: "dateTime" }, "1"],
    ["Source", r.source, { code: "Reference" }, "1"],
    ["Device", r.device, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
    ["Body Site", r.bodySite, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeDiagnosticReport(r: DiagnosticReport): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Issued", r.issued, { code: "instant" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "*"],
    ["Results Interpreter", r.resultsInterpreter, { code: "Reference" }, "*"],
    ["Media", r.media, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeDocumentManifest(r: DocumentManifest): Narrative {
  return buildNarrative([
    ["Master Identifier", r.masterIdentifier, { code: "Identifier" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Author", r.author, { code: "Reference" }, "*"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Content", r.content, { code: "Reference" }, "*"],
  ]);
}

function narrativeDocumentReference(r: DocumentReference): Narrative {
  return buildNarrative([
    ["Master Identifier", r.masterIdentifier, { code: "Identifier" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Doc Status", r.docStatus, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "instant" }, "1"],
    ["Author", r.author, { code: "Reference" }, "*"],
    ["Relates To", r.relatesTo, { code: "BackboneElement" }, "*"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Security Label", r.securityLabel, { code: "CodeableConcept" }, "*"],
    ["Content", r.content, { code: "BackboneElement" }, "*"],
    ["Context", r.context, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeEncounter(r: Encounter): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Class", r.class, { code: "Coding" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Service Type", r.serviceType, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Episode Of Care", r.episodeOfCare, { code: "Reference" }, "*"],
    ["Participant", r.participant, { code: "BackboneElement" }, "*"],
    ["Appointment", r.appointment, { code: "Reference" }, "*"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
    ["Diagnosis", r.diagnosis, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeEndpoint(r: Endpoint): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Connection Type", r.connectionType, { code: "Coding" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    [
      "Managing Organization",
      r.managingOrganization,
      { code: "Reference" },
      "1",
    ],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Payload Type", r.payloadType, { code: "CodeableConcept" }, "*"],
    ["Payload Mime Type", r.payloadMimeType, { code: "code" }, "*"],
    ["Address", r.address, { code: "url" }, "1"],
  ]);
}

function narrativeEnrollmentRequest(r: EnrollmentRequest): Narrative {
  return buildNarrative([["Status", r.status, { code: "code" }, "1"]]);
}

function narrativeEnrollmentResponse(r: EnrollmentResponse): Narrative {
  return buildNarrative([["Status", r.status, { code: "code" }, "1"]]);
}

function narrativeEpisodeOfCare(r: EpisodeOfCare): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Diagnosis", r.diagnosis, { code: "BackboneElement" }, "*"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    [
      "Managing Organization",
      r.managingOrganization,
      { code: "Reference" },
      "1",
    ],
    ["Period", r.period, { code: "Period" }, "1"],
  ]);
}

function narrativeEventDefinition(r: EventDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Approval Date", r.approvalDate, { code: "date" }, "1"],
    ["Last Review Date", r.lastReviewDate, { code: "date" }, "1"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Trigger", r.trigger, { code: "TriggerDefinition" }, "*"],
  ]);
}

function narrativeEvidence(r: Evidence): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Author", r.author, { code: "ContactDetail" }, "*"],
    ["Endorser", r.endorser, { code: "ContactDetail" }, "*"],
  ]);
}

function narrativeEvidenceReport(r: EvidenceReport): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Related Identifier", r.relatedIdentifier, { code: "Identifier" }, "*"],
    ["Subject", r.subject, { code: "BackboneElement" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Author", r.author, { code: "ContactDetail" }, "*"],
    ["Endorser", r.endorser, { code: "ContactDetail" }, "*"],
  ]);
}

function narrativeEvidenceVariable(r: EvidenceVariable): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Short Title", r.shortTitle, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Characteristic", r.characteristic, { code: "BackboneElement" }, "*"],
    ["Handling", r.handling, { code: "code" }, "1"],
  ]);
}

function narrativeExampleScenario(r: ExampleScenario): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeExplanationOfBenefit(r: ExplanationOfBenefit): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Use", r.use, { code: "code" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Billable Period", r.billablePeriod, { code: "Period" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Insurer", r.insurer, { code: "Reference" }, "1"],
    ["Provider", r.provider, { code: "Reference" }, "1"],
    ["Outcome", r.outcome, { code: "code" }, "1"],
    ["Insurance", r.insurance, { code: "BackboneElement" }, "*"],
    ["Total", r.total, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeFamilyMemberHistory(r: FamilyMemberHistory): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    [
      "Data Absent Reason",
      r.dataAbsentReason,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Relationship", r.relationship, { code: "CodeableConcept" }, "1"],
    ["Sex", r.sex, { code: "CodeableConcept" }, "1"],
    ["Estimated Age", r.estimatedAge, { code: "boolean" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
  ]);
}

function narrativeFlag(r: Flag): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
  ]);
}

function narrativeGoal(r: Goal): Narrative {
  return buildNarrative([
    ["Lifecycle Status", r.lifecycleStatus, { code: "code" }, "1"],
    [
      "Achievement Status",
      r.achievementStatus,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Priority", r.priority, { code: "CodeableConcept" }, "1"],
    ["Description", r.description, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Status Date", r.statusDate, { code: "date" }, "1"],
    ["Expressed By", r.expressedBy, { code: "Reference" }, "1"],
  ]);
}

function narrativeGraphDefinition(r: GraphDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Start", r.start, { code: "code" }, "1"],
  ]);
}

function narrativeGroup(r: Group): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Type", r.type, { code: "code" }, "1"],
    ["Actual", r.actual, { code: "boolean" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Quantity", r.quantity, { code: "unsignedInt" }, "1"],
    ["Managing Entity", r.managingEntity, { code: "Reference" }, "1"],
  ]);
}

function narrativeGuidanceResponse(r: GuidanceResponse): Narrative {
  return buildNarrative([
    ["Request Identifier", r.requestIdentifier, { code: "Identifier" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
  ]);
}

function narrativeHealthcareService(r: HealthcareService): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Provided By", r.providedBy, { code: "Reference" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Specialty", r.specialty, { code: "CodeableConcept" }, "*"],
    ["Location", r.location, { code: "Reference" }, "*"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Comment", r.comment, { code: "string" }, "1"],
    ["Photo", r.photo, { code: "Attachment" }, "1"],
  ]);
}

function narrativeImagingStudy(r: ImagingStudy): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Modality", r.modality, { code: "Coding" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Started", r.started, { code: "dateTime" }, "1"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Referrer", r.referrer, { code: "Reference" }, "1"],
    ["Interpreter", r.interpreter, { code: "Reference" }, "*"],
    ["Endpoint", r.endpoint, { code: "Reference" }, "*"],
    ["Number Of Series", r.numberOfSeries, { code: "unsignedInt" }, "1"],
    ["Number Of Instances", r.numberOfInstances, { code: "unsignedInt" }, "1"],
    ["Procedure Reference", r.procedureReference, { code: "Reference" }, "1"],
    ["Procedure Code", r.procedureCode, { code: "CodeableConcept" }, "*"],
    ["Location", r.location, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
    ["Note", r.note, { code: "Annotation" }, "*"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Series", r.series, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeImmunization(r: Immunization): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Vaccine Code", r.vaccineCode, { code: "CodeableConcept" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Primary Source", r.primarySource, { code: "boolean" }, "1"],
    ["Performer", r.performer, { code: "BackboneElement" }, "*"],
    ["Note", r.note, { code: "Annotation" }, "*"],
    ["Is Subpotent", r.isSubpotent, { code: "boolean" }, "1"],
  ]);
}

function narrativeImmunizationEvaluation(r: ImmunizationEvaluation): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Target Disease", r.targetDisease, { code: "CodeableConcept" }, "1"],
    ["Immunization Event", r.immunizationEvent, { code: "Reference" }, "1"],
    ["Dose Status", r.doseStatus, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeImmunizationRecommendation(
  r: ImmunizationRecommendation
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Recommendation", r.recommendation, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeImplementationGuide(r: ImplementationGuide): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Package Id", r.packageId, { code: "id" }, "1"],
    ["License", r.license, { code: "code" }, "1"],
    ["Fhir Version", r.fhirVersion, { code: "code" }, "*"],
    ["Depends On", r.dependsOn, { code: "BackboneElement" }, "*"],
    ["Global", r.global, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeIngredient(r: Ingredient): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["For", r.for, { code: "Reference" }, "*"],
    ["Role", r.role, { code: "CodeableConcept" }, "1"],
    ["Function", r.function, { code: "CodeableConcept" }, "*"],
    ["Allergenic Indicator", r.allergenicIndicator, { code: "boolean" }, "1"],
    ["Manufacturer", r.manufacturer, { code: "BackboneElement" }, "*"],
    ["Substance", r.substance, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeInsurancePlan(r: InsurancePlan): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Owned By", r.ownedBy, { code: "Reference" }, "1"],
    ["Administered By", r.administeredBy, { code: "Reference" }, "1"],
    ["Coverage Area", r.coverageArea, { code: "Reference" }, "*"],
  ]);
}

function narrativeInvoice(r: Invoice): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Recipient", r.recipient, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Total Net", r.totalNet, { code: "Money" }, "1"],
    ["Total Gross", r.totalGross, { code: "Money" }, "1"],
  ]);
}

function narrativeLibrary(r: Library): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Content", r.content, { code: "Attachment" }, "*"],
  ]);
}

function narrativeLinkage(r: Linkage): Narrative {
  return buildNarrative([
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
    ["Item", r.item, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeList(r: List): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Mode", r.mode, { code: "code" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Source", r.source, { code: "Reference" }, "1"],
  ]);
}

function narrativeLocation(r: Location): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Operational Status", r.operationalStatus, { code: "Coding" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Mode", r.mode, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Physical Type", r.physicalType, { code: "CodeableConcept" }, "1"],
    [
      "Managing Organization",
      r.managingOrganization,
      { code: "Reference" },
      "1",
    ],
  ]);
}

function narrativeManufacturedItemDefinition(
  r: ManufacturedItemDefinition
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    [
      "Manufactured Dose Form",
      r.manufacturedDoseForm,
      { code: "CodeableConcept" },
      "1",
    ],
    [
      "Unit Of Presentation",
      r.unitOfPresentation,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Manufacturer", r.manufacturer, { code: "Reference" }, "*"],
    ["Ingredient", r.ingredient, { code: "CodeableConcept" }, "*"],
    ["Property", r.property, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeMeasure(r: Measure): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Disclaimer", r.disclaimer, { code: "markdown" }, "1"],
    ["Scoring", r.scoring, { code: "CodeableConcept" }, "1"],
    ["Composite Scoring", r.compositeScoring, { code: "CodeableConcept" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Risk Adjustment", r.riskAdjustment, { code: "string" }, "1"],
    ["Rate Aggregation", r.rateAggregation, { code: "string" }, "1"],
    ["Rationale", r.rationale, { code: "markdown" }, "1"],
    [
      "Clinical Recommendation Statement",
      r.clinicalRecommendationStatement,
      { code: "markdown" },
      "1",
    ],
    [
      "Improvement Notation",
      r.improvementNotation,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Definition", r.definition, { code: "markdown" }, "*"],
    ["Guidance", r.guidance, { code: "markdown" }, "1"],
  ]);
}

function narrativeMeasureReport(r: MeasureReport): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "code" }, "1"],
    ["Measure", r.measure, { code: "canonical" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Reporter", r.reporter, { code: "Reference" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    [
      "Improvement Notation",
      r.improvementNotation,
      { code: "CodeableConcept" },
      "1",
    ],
  ]);
}

function narrativeMedia(r: Media): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Modality", r.modality, { code: "CodeableConcept" }, "1"],
    ["View", r.view, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Issued", r.issued, { code: "instant" }, "1"],
    ["Operator", r.operator, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Body Site", r.bodySite, { code: "CodeableConcept" }, "1"],
    ["Device Name", r.deviceName, { code: "string" }, "1"],
    ["Device", r.device, { code: "Reference" }, "1"],
    ["Height", r.height, { code: "positiveInt" }, "1"],
    ["Width", r.width, { code: "positiveInt" }, "1"],
    ["Frames", r.frames, { code: "positiveInt" }, "1"],
    ["Duration", r.duration, { code: "decimal" }, "1"],
    ["Content", r.content, { code: "Attachment" }, "1"],
  ]);
}

function narrativeMedication(r: Medication): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Manufacturer", r.manufacturer, { code: "Reference" }, "1"],
    ["Amount", r.amount, { code: "Ratio" }, "1"],
  ]);
}

function narrativeMedicationAdministration(
  r: MedicationAdministration
): Narrative {
  return buildNarrative([
    ["Instantiates", r.instantiates, { code: "uri" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Performer", r.performer, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeMedicationDispense(r: MedicationDispense): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["When Prepared", r.whenPrepared, { code: "dateTime" }, "1"],
  ]);
}

function narrativeMedicationKnowledge(r: MedicationKnowledge): Narrative {
  return buildNarrative([
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Manufacturer", r.manufacturer, { code: "Reference" }, "1"],
    [
      "Amount",
      r.amount,
      {
        code: "Quantity",
        profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"],
      },
      "1",
    ],
    ["Synonym", r.synonym, { code: "string" }, "*"],
  ]);
}

function narrativeMedicationRequest(r: MedicationRequest): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Do Not Perform", r.doNotPerform, { code: "boolean" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Authored On", r.authoredOn, { code: "dateTime" }, "1"],
    ["Requester", r.requester, { code: "Reference" }, "1"],
    ["Performer Type", r.performerType, { code: "CodeableConcept" }, "1"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Group Identifier", r.groupIdentifier, { code: "Identifier" }, "1"],
  ]);
}

function narrativeMedicationStatement(r: MedicationStatement): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Context", r.context, { code: "Reference" }, "1"],
    ["Date Asserted", r.dateAsserted, { code: "dateTime" }, "1"],
  ]);
}

function narrativeMedicinalProductDefinition(
  r: MedicinalProductDefinition
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Domain", r.domain, { code: "CodeableConcept" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Status", r.status, { code: "CodeableConcept" }, "1"],
    ["Status Date", r.statusDate, { code: "dateTime" }, "1"],
    ["Description", r.description, { code: "markdown" }, "1"],
    [
      "Combined Pharmaceutical Dose Form",
      r.combinedPharmaceuticalDoseForm,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Route", r.route, { code: "CodeableConcept" }, "*"],
    ["Indication", r.indication, { code: "markdown" }, "1"],
    [
      "Legal Status Of Supply",
      r.legalStatusOfSupply,
      { code: "CodeableConcept" },
      "1",
    ],
    [
      "Additional Monitoring Indicator",
      r.additionalMonitoringIndicator,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Special Measures", r.specialMeasures, { code: "CodeableConcept" }, "*"],
    [
      "Pediatric Use Indicator",
      r.pediatricUseIndicator,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Classification", r.classification, { code: "CodeableConcept" }, "*"],
    ["Marketing Status", r.marketingStatus, { code: "MarketingStatus" }, "*"],
    [
      "Packaged Medicinal Product",
      r.packagedMedicinalProduct,
      { code: "CodeableConcept" },
      "*",
    ],
    ["Ingredient", r.ingredient, { code: "CodeableConcept" }, "*"],
    ["Impurity", r.impurity, { code: "CodeableReference" }, "*"],
    ["Attached Document", r.attachedDocument, { code: "Reference" }, "*"],
    ["Master File", r.masterFile, { code: "Reference" }, "*"],
    ["Contact", r.contact, { code: "BackboneElement" }, "*"],
    ["Clinical Trial", r.clinicalTrial, { code: "Reference" }, "*"],
    ["Code", r.code, { code: "Coding" }, "*"],
    ["Name", r.name, { code: "BackboneElement" }, "*"],
    ["Cross Reference", r.crossReference, { code: "BackboneElement" }, "*"],
    ["Operation", r.operation, { code: "BackboneElement" }, "*"],
    ["Characteristic", r.characteristic, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeMessageDefinition(r: MessageDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Replaces", r.replaces, { code: "canonical" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Purpose", r.purpose, { code: "markdown" }, "1"],
    ["Base", r.base, { code: "canonical" }, "1"],
    ["Parent", r.parent, { code: "canonical" }, "*"],
    ["Category", r.category, { code: "code" }, "1"],
    ["Focus", r.focus, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeMessageHeader(r: MessageHeader): Narrative {
  return buildNarrative([
    ["Destination", r.destination, { code: "BackboneElement" }, "*"],
    ["Sender", r.sender, { code: "Reference" }, "1"],
    ["Enterer", r.enterer, { code: "Reference" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
    ["Source", r.source, { code: "BackboneElement" }, "1"],
    ["Responsible", r.responsible, { code: "Reference" }, "1"],
    ["Reason", r.reason, { code: "CodeableConcept" }, "1"],
    ["Response", r.response, { code: "BackboneElement" }, "1"],
    ["Focus", r.focus, { code: "Reference" }, "*"],
    ["Definition", r.definition, { code: "canonical" }, "1"],
  ]);
}

function narrativeMolecularSequence(r: MolecularSequence): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Type", r.type, { code: "code" }, "1"],
    ["Coordinate System", r.coordinateSystem, { code: "integer" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Specimen", r.specimen, { code: "Reference" }, "1"],
    ["Device", r.device, { code: "Reference" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "1"],
    ["Quantity", r.quantity, { code: "Quantity" }, "1"],
    ["Reference Seq", r.referenceSeq, { code: "BackboneElement" }, "1"],
    ["Variant", r.variant, { code: "BackboneElement" }, "*"],
    ["Observed Seq", r.observedSeq, { code: "string" }, "1"],
    ["Quality", r.quality, { code: "BackboneElement" }, "*"],
    ["Read Coverage", r.readCoverage, { code: "integer" }, "1"],
    ["Repository", r.repository, { code: "BackboneElement" }, "*"],
    ["Pointer", r.pointer, { code: "Reference" }, "*"],
    ["Structure Variant", r.structureVariant, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeNamingSystem(r: NamingSystem): Narrative {
  return buildNarrative([
    ["Name", r.name, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Kind", r.kind, { code: "code" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Unique Id", r.uniqueId, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeNutritionOrder(r: NutritionOrder): Narrative {
  return buildNarrative([
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Date Time", r.dateTime, { code: "dateTime" }, "1"],
    ["Orderer", r.orderer, { code: "Reference" }, "1"],
  ]);
}

function narrativeNutritionProduct(r: NutritionProduct): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Manufacturer", r.manufacturer, { code: "Reference" }, "*"],
    ["Nutrient", r.nutrient, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeObservation(r: Observation): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Focus", r.focus, { code: "Reference" }, "*"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Issued", r.issued, { code: "instant" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "*"],
    ["Has Member", r.hasMember, { code: "Reference" }, "*"],
    ["Derived From", r.derivedFrom, { code: "Reference" }, "*"],
    ["Component", r.component, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeObservationDefinition(r: ObservationDefinition): Narrative {
  return buildNarrative([
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
  ]);
}

function narrativeOperationDefinition(r: OperationDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Kind", r.kind, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Affects State", r.affectsState, { code: "boolean" }, "1"],
    ["Code", r.code, { code: "code" }, "1"],
    ["Base", r.base, { code: "canonical" }, "1"],
    ["Resource", r.resource, { code: "code" }, "*"],
    ["System", r.system, { code: "boolean" }, "1"],
    ["Type", r.type, { code: "boolean" }, "1"],
    ["Instance", r.instance, { code: "boolean" }, "1"],
  ]);
}

function narrativeOperationOutcome(r: OperationOutcome): Narrative {
  return buildNarrative([["Issue", r.issue, { code: "BackboneElement" }, "*"]]);
}

function narrativeOrganization(r: Organization): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "*"],
    ["Name", r.name, { code: "string" }, "1"],
    [
      "Part Of",
      r.partOf,
      {
        extension: [
          {
            url: "http://hl7.org/fhir/StructureDefinition/structuredefinition-hierarchy",
            valueBoolean: true,
          },
        ],
        code: "Reference",
      },
      "1",
    ],
  ]);
}

function narrativeOrganizationAffiliation(
  r: OrganizationAffiliation
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Organization", r.organization, { code: "Reference" }, "1"],
    [
      "Participating Organization",
      r.participatingOrganization,
      { code: "Reference" },
      "1",
    ],
    ["Network", r.network, { code: "Reference" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "*"],
    ["Specialty", r.specialty, { code: "CodeableConcept" }, "*"],
    ["Location", r.location, { code: "Reference" }, "*"],
    ["Telecom", r.telecom, { code: "ContactPoint" }, "*"],
  ]);
}

function narrativePackagedProductDefinition(
  r: PackagedProductDefinition
): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Package For", r.packageFor, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "CodeableConcept" }, "1"],
    ["Status Date", r.statusDate, { code: "dateTime" }, "1"],
    [
      "Contained Item Quantity",
      r.containedItemQuantity,
      { code: "Quantity" },
      "*",
    ],
    ["Description", r.description, { code: "markdown" }, "1"],
    [
      "Legal Status Of Supply",
      r.legalStatusOfSupply,
      { code: "BackboneElement" },
      "*",
    ],
    ["Marketing Status", r.marketingStatus, { code: "MarketingStatus" }, "*"],
    ["Characteristic", r.characteristic, { code: "CodeableConcept" }, "*"],
    ["Copackaged Indicator", r.copackagedIndicator, { code: "boolean" }, "1"],
    ["Manufacturer", r.manufacturer, { code: "Reference" }, "*"],
    ["Package", r.package, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativePatient(r: Patient): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Name", r.name, { code: "HumanName" }, "*"],
    ["Telecom", r.telecom, { code: "ContactPoint" }, "*"],
    ["Gender", r.gender, { code: "code" }, "1"],
    ["Birth Date", r.birthDate, { code: "date" }, "1"],
    ["Address", r.address, { code: "Address" }, "*"],
    [
      "Managing Organization",
      r.managingOrganization,
      { code: "Reference" },
      "1",
    ],
    ["Link", r.link, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativePaymentNotice(r: PaymentNotice): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Payment", r.payment, { code: "Reference" }, "1"],
    ["Recipient", r.recipient, { code: "Reference" }, "1"],
    ["Amount", r.amount, { code: "Money" }, "1"],
  ]);
}

function narrativePaymentReconciliation(r: PaymentReconciliation): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Payment Issuer", r.paymentIssuer, { code: "Reference" }, "1"],
    ["Payment Date", r.paymentDate, { code: "date" }, "1"],
    ["Payment Amount", r.paymentAmount, { code: "Money" }, "1"],
  ]);
}

function narrativePerson(r: Person): Narrative {
  return buildNarrative([
    ["Name", r.name, { code: "HumanName" }, "*"],
    ["Telecom", r.telecom, { code: "ContactPoint" }, "*"],
    ["Gender", r.gender, { code: "code" }, "1"],
    ["Birth Date", r.birthDate, { code: "date" }, "1"],
    [
      "Managing Organization",
      r.managingOrganization,
      { code: "Reference" },
      "1",
    ],
    ["Active", r.active, { code: "boolean" }, "1"],
  ]);
}

function narrativePlanDefinition(r: PlanDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
  ]);
}

function narrativePractitioner(r: Practitioner): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Name", r.name, { code: "HumanName" }, "*"],
    ["Telecom", r.telecom, { code: "ContactPoint" }, "*"],
    ["Address", r.address, { code: "Address" }, "*"],
    ["Gender", r.gender, { code: "code" }, "1"],
    ["Birth Date", r.birthDate, { code: "date" }, "1"],
  ]);
}

function narrativePractitionerRole(r: PractitionerRole): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Practitioner", r.practitioner, { code: "Reference" }, "1"],
    ["Organization", r.organization, { code: "Reference" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "*"],
    ["Specialty", r.specialty, { code: "CodeableConcept" }, "*"],
    ["Location", r.location, { code: "Reference" }, "*"],
    ["Telecom", r.telecom, { code: "ContactPoint" }, "*"],
  ]);
}

function narrativeProcedure(r: Procedure): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Status Reason", r.statusReason, { code: "CodeableConcept" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Recorder", r.recorder, { code: "Reference" }, "1"],
    ["Asserter", r.asserter, { code: "Reference" }, "1"],
    ["Performer", r.performer, { code: "BackboneElement" }, "*"],
    ["Location", r.location, { code: "Reference" }, "1"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
    ["Body Site", r.bodySite, { code: "CodeableConcept" }, "*"],
    ["Outcome", r.outcome, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeProvenance(r: Provenance): Narrative {
  return buildNarrative([
    ["Target", r.target, { code: "Reference" }, "*"],
    ["Recorded", r.recorded, { code: "instant" }, "1"],
  ]);
}

function narrativeQuestionnaire(r: Questionnaire): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Subject Type", r.subjectType, { code: "code" }, "*"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Code", r.code, { code: "Coding" }, "*"],
  ]);
}

function narrativeQuestionnaireResponse(r: QuestionnaireResponse): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Questionnaire", r.questionnaire, { code: "canonical" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Authored", r.authored, { code: "dateTime" }, "1"],
    ["Author", r.author, { code: "Reference" }, "1"],
    ["Source", r.source, { code: "Reference" }, "1"],
  ]);
}

function narrativeRegulatedAuthorization(r: RegulatedAuthorization): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "*"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Region", r.region, { code: "CodeableConcept" }, "*"],
    ["Status", r.status, { code: "CodeableConcept" }, "1"],
    ["Status Date", r.statusDate, { code: "dateTime" }, "1"],
    ["Validity Period", r.validityPeriod, { code: "Period" }, "1"],
    ["Indication", r.indication, { code: "CodeableReference" }, "1"],
    ["Intended Use", r.intendedUse, { code: "CodeableConcept" }, "1"],
    ["Basis", r.basis, { code: "CodeableConcept" }, "*"],
    ["Holder", r.holder, { code: "Reference" }, "1"],
    ["Regulator", r.regulator, { code: "Reference" }, "1"],
    ["Case", r.case, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeRelatedPerson(r: RelatedPerson): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Relationship", r.relationship, { code: "CodeableConcept" }, "*"],
    ["Name", r.name, { code: "HumanName" }, "*"],
    ["Telecom", r.telecom, { code: "ContactPoint" }, "*"],
    ["Gender", r.gender, { code: "code" }, "1"],
    ["Birth Date", r.birthDate, { code: "date" }, "1"],
    ["Address", r.address, { code: "Address" }, "*"],
  ]);
}

function narrativeRequestGroup(r: RequestGroup): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Group Identifier", r.groupIdentifier, { code: "Identifier" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeResearchDefinition(r: ResearchDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Population", r.population, { code: "Reference" }, "1"],
    ["Exposure", r.exposure, { code: "Reference" }, "1"],
    ["Exposure Alternative", r.exposureAlternative, { code: "Reference" }, "1"],
    ["Outcome", r.outcome, { code: "Reference" }, "1"],
  ]);
}

function narrativeResearchElementDefinition(
  r: ResearchElementDefinition
): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Short Title", r.shortTitle, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Type", r.type, { code: "code" }, "1"],
    ["Characteristic", r.characteristic, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeResearchStudy(r: ResearchStudy): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Protocol", r.protocol, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    [
      "Primary Purpose Type",
      r.primaryPurposeType,
      { code: "CodeableConcept" },
      "1",
    ],
    ["Phase", r.phase, { code: "CodeableConcept" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Focus", r.focus, { code: "CodeableConcept" }, "*"],
    ["Condition", r.condition, { code: "CodeableConcept" }, "*"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Keyword", r.keyword, { code: "CodeableConcept" }, "*"],
    ["Location", r.location, { code: "CodeableConcept" }, "*"],
    ["Enrollment", r.enrollment, { code: "Reference" }, "*"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Sponsor", r.sponsor, { code: "Reference" }, "1"],
    [
      "Principal Investigator",
      r.principalInvestigator,
      { code: "Reference" },
      "1",
    ],
    ["Site", r.site, { code: "Reference" }, "*"],
    ["Reason Stopped", r.reasonStopped, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeResearchSubject(r: ResearchSubject): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Period", r.period, { code: "Period" }, "1"],
    ["Study", r.study, { code: "Reference" }, "1"],
    ["Individual", r.individual, { code: "Reference" }, "1"],
  ]);
}

function narrativeRiskAssessment(r: RiskAssessment): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Method", r.method, { code: "CodeableConcept" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Condition", r.condition, { code: "Reference" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "1"],
  ]);
}

function narrativeSchedule(r: Schedule): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Active", r.active, { code: "boolean" }, "1"],
    ["Service Category", r.serviceCategory, { code: "CodeableConcept" }, "*"],
    ["Service Type", r.serviceType, { code: "CodeableConcept" }, "*"],
    ["Specialty", r.specialty, { code: "CodeableConcept" }, "*"],
    ["Actor", r.actor, { code: "Reference" }, "*"],
    ["Planning Horizon", r.planningHorizon, { code: "Period" }, "1"],
  ]);
}

function narrativeSearchParameter(r: SearchParameter): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Code", r.code, { code: "code" }, "1"],
    ["Base", r.base, { code: "code" }, "*"],
    ["Type", r.type, { code: "code" }, "1"],
  ]);
}

function narrativeServiceRequest(r: ServiceRequest): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "*",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "*"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Replaces", r.replaces, { code: "Reference" }, "*"],
    ["Requisition", r.requisition, { code: "Identifier" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Do Not Perform", r.doNotPerform, { code: "boolean" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Order Detail", r.orderDetail, { code: "CodeableConcept" }, "*"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Authored On", r.authoredOn, { code: "dateTime" }, "1"],
    ["Requester", r.requester, { code: "Reference" }, "1"],
    ["Performer Type", r.performerType, { code: "CodeableConcept" }, "1"],
    ["Performer", r.performer, { code: "Reference" }, "*"],
    ["Location Code", r.locationCode, { code: "CodeableConcept" }, "*"],
    ["Location Reference", r.locationReference, { code: "Reference" }, "*"],
    ["Reason Code", r.reasonCode, { code: "CodeableConcept" }, "*"],
    ["Reason Reference", r.reasonReference, { code: "Reference" }, "*"],
    ["Specimen", r.specimen, { code: "Reference" }, "*"],
    ["Body Site", r.bodySite, { code: "CodeableConcept" }, "*"],
    ["Patient Instruction", r.patientInstruction, { code: "string" }, "1"],
  ]);
}

function narrativeSlot(r: Slot): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Service Category", r.serviceCategory, { code: "CodeableConcept" }, "*"],
    ["Service Type", r.serviceType, { code: "CodeableConcept" }, "*"],
    ["Specialty", r.specialty, { code: "CodeableConcept" }, "*"],
    ["Appointment Type", r.appointmentType, { code: "CodeableConcept" }, "1"],
    ["Schedule", r.schedule, { code: "Reference" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Start", r.start, { code: "instant" }, "1"],
    ["End", r.end, { code: "instant" }, "1"],
  ]);
}

function narrativeSpecimen(r: Specimen): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    [
      "Accession Identifier",
      r.accessionIdentifier,
      { code: "Identifier" },
      "1",
    ],
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "CodeableConcept" }, "1"],
    ["Subject", r.subject, { code: "Reference" }, "1"],
    ["Received Time", r.receivedTime, { code: "dateTime" }, "1"],
    ["Condition", r.condition, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeSpecimenDefinition(r: SpecimenDefinition): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Type Collected", r.typeCollected, { code: "CodeableConcept" }, "1"],
    [
      "Patient Preparation",
      r.patientPreparation,
      { code: "CodeableConcept" },
      "*",
    ],
    ["Time Aspect", r.timeAspect, { code: "string" }, "1"],
    ["Collection", r.collection, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeStructureDefinition(r: StructureDefinition): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Keyword", r.keyword, { code: "Coding" }, "*"],
    ["Fhir Version", r.fhirVersion, { code: "code" }, "1"],
    ["Kind", r.kind, { code: "code" }, "1"],
    ["Abstract", r.abstract, { code: "boolean" }, "1"],
    ["Context", r.context, { code: "BackboneElement" }, "*"],
    ["Context Invariant", r.contextInvariant, { code: "string" }, "*"],
    ["Type", r.type, { code: "uri" }, "1"],
    [
      "Base Definition",
      r.baseDefinition,
      {
        extension: [
          {
            url: "http://hl7.org/fhir/StructureDefinition/structuredefinition-hierarchy",
            valueBoolean: true,
          },
        ],
        code: "canonical",
      },
      "1",
    ],
    ["Derivation", r.derivation, { code: "code" }, "1"],
  ]);
}

function narrativeStructureMap(r: StructureMap): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Structure", r.structure, { code: "BackboneElement" }, "*"],
    ["Import", r.import, { code: "canonical" }, "*"],
    ["Group", r.group, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeSubscription(r: Subscription): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Contact", r.contact, { code: "ContactPoint" }, "*"],
    ["End", r.end, { code: "instant" }, "1"],
    ["Reason", r.reason, { code: "string" }, "1"],
    ["Criteria", r.criteria, { code: "string" }, "1"],
    ["Error", r.error, { code: "string" }, "1"],
    ["Channel", r.channel, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeSubscriptionStatus(r: SubscriptionStatus): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Type", r.type, { code: "code" }, "1"],
    [
      "Events Since Subscription Start",
      r.eventsSinceSubscriptionStart,
      { code: "string" },
      "1",
    ],
    ["Subscription", r.subscription, { code: "Reference" }, "1"],
    ["Topic", r.topic, { code: "canonical" }, "1"],
    ["Error", r.error, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeSubscriptionTopic(r: SubscriptionTopic): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Derived From", r.derivedFrom, { code: "canonical" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Effective Period", r.effectivePeriod, { code: "Period" }, "1"],
    ["Resource Trigger", r.resourceTrigger, { code: "BackboneElement" }, "*"],
    ["Event Trigger", r.eventTrigger, { code: "BackboneElement" }, "*"],
    ["Can Filter By", r.canFilterBy, { code: "BackboneElement" }, "*"],
    [
      "Notification Shape",
      r.notificationShape,
      { code: "BackboneElement" },
      "*",
    ],
  ]);
}

function narrativeSubstance(r: Substance): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "*"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Instance", r.instance, { code: "BackboneElement" }, "*"],
    ["Ingredient", r.ingredient, { code: "BackboneElement" }, "*"],
  ]);
}

function narrativeSubstanceDefinition(r: SubstanceDefinition): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Status", r.status, { code: "CodeableConcept" }, "1"],
    ["Classification", r.classification, { code: "CodeableConcept" }, "*"],
    ["Domain", r.domain, { code: "CodeableConcept" }, "1"],
    ["Grade", r.grade, { code: "CodeableConcept" }, "*"],
    ["Description", r.description, { code: "markdown" }, "1"],
    ["Information Source", r.informationSource, { code: "Reference" }, "*"],
    ["Note", r.note, { code: "Annotation" }, "*"],
    ["Manufacturer", r.manufacturer, { code: "Reference" }, "*"],
    ["Supplier", r.supplier, { code: "Reference" }, "*"],
    ["Moiety", r.moiety, { code: "BackboneElement" }, "*"],
    ["Property", r.property, { code: "BackboneElement" }, "*"],
    ["Molecular Weight", r.molecularWeight, { code: "BackboneElement" }, "*"],
    ["Structure", r.structure, { code: "BackboneElement" }, "1"],
    ["Code", r.code, { code: "BackboneElement" }, "*"],
    ["Name", r.name, { code: "BackboneElement" }, "*"],
    ["Relationship", r.relationship, { code: "BackboneElement" }, "*"],
    ["Source Material", r.sourceMaterial, { code: "BackboneElement" }, "1"],
  ]);
}

function narrativeSupplyDelivery(r: SupplyDelivery): Narrative {
  return buildNarrative([
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
  ]);
}

function narrativeSupplyRequest(r: SupplyRequest): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Category", r.category, { code: "CodeableConcept" }, "1"],
    ["Priority", r.priority, { code: "code" }, "1"],
    ["Quantity", r.quantity, { code: "Quantity" }, "1"],
    ["Authored On", r.authoredOn, { code: "dateTime" }, "1"],
    ["Requester", r.requester, { code: "Reference" }, "1"],
    ["Supplier", r.supplier, { code: "Reference" }, "*"],
  ]);
}

function narrativeTask(r: Task): Narrative {
  return buildNarrative([
    [
      "Instantiates Canonical",
      r.instantiatesCanonical,
      { code: "canonical" },
      "1",
    ],
    ["Instantiates Uri", r.instantiatesUri, { code: "uri" }, "1"],
    ["Based On", r.basedOn, { code: "Reference" }, "*"],
    ["Group Identifier", r.groupIdentifier, { code: "Identifier" }, "1"],
    ["Part Of", r.partOf, { code: "Reference" }, "*"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Status Reason", r.statusReason, { code: "CodeableConcept" }, "1"],
    ["Business Status", r.businessStatus, { code: "CodeableConcept" }, "1"],
    ["Intent", r.intent, { code: "code" }, "1"],
    ["Code", r.code, { code: "CodeableConcept" }, "1"],
    ["Description", r.description, { code: "string" }, "1"],
    ["Focus", r.focus, { code: "Reference" }, "1"],
    ["For", r.for, { code: "Reference" }, "1"],
    ["Encounter", r.encounter, { code: "Reference" }, "1"],
    ["Execution Period", r.executionPeriod, { code: "Period" }, "1"],
    ["Last Modified", r.lastModified, { code: "dateTime" }, "1"],
    ["Requester", r.requester, { code: "Reference" }, "1"],
    ["Owner", r.owner, { code: "Reference" }, "1"],
    ["Location", r.location, { code: "Reference" }, "1"],
  ]);
}

function narrativeTerminologyCapabilities(
  r: TerminologyCapabilities
): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Copyright", r.copyright, { code: "markdown" }, "1"],
    ["Kind", r.kind, { code: "code" }, "1"],
    ["Software", r.software, { code: "BackboneElement" }, "1"],
    ["Implementation", r.implementation, { code: "BackboneElement" }, "1"],
    ["Locked Date", r.lockedDate, { code: "boolean" }, "1"],
  ]);
}

function narrativeTestReport(r: TestReport): Narrative {
  return buildNarrative([
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Test Script", r.testScript, { code: "Reference" }, "1"],
    ["Result", r.result, { code: "code" }, "1"],
    ["Score", r.score, { code: "decimal" }, "1"],
    ["Tester", r.tester, { code: "string" }, "1"],
    ["Issued", r.issued, { code: "dateTime" }, "1"],
  ]);
}

function narrativeTestScript(r: TestScript): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "1"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
  ]);
}

function narrativeValueSet(r: ValueSet): Narrative {
  return buildNarrative([
    ["Url", r.url, { code: "uri" }, "1"],
    ["Identifier", r.identifier, { code: "Identifier" }, "*"],
    ["Version", r.version, { code: "string" }, "1"],
    ["Name", r.name, { code: "string" }, "1"],
    ["Title", r.title, { code: "string" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Experimental", r.experimental, { code: "boolean" }, "1"],
    ["Date", r.date, { code: "dateTime" }, "1"],
    ["Publisher", r.publisher, { code: "string" }, "1"],
    ["Contact", r.contact, { code: "ContactDetail" }, "*"],
    ["Use Context", r.useContext, { code: "UsageContext" }, "*"],
    ["Jurisdiction", r.jurisdiction, { code: "CodeableConcept" }, "*"],
    ["Immutable", r.immutable, { code: "boolean" }, "1"],
  ]);
}

function narrativeVerificationResult(r: VerificationResult): Narrative {
  return buildNarrative([
    ["Target", r.target, { code: "Reference" }, "*"],
    ["Target Location", r.targetLocation, { code: "string" }, "*"],
    ["Need", r.need, { code: "CodeableConcept" }, "1"],
    ["Status", r.status, { code: "code" }, "1"],
    ["Status Date", r.statusDate, { code: "dateTime" }, "1"],
    ["Validation Type", r.validationType, { code: "CodeableConcept" }, "1"],
    [
      "Validation Process",
      r.validationProcess,
      { code: "CodeableConcept" },
      "*",
    ],
    ["Failure Action", r.failureAction, { code: "CodeableConcept" }, "1"],
  ]);
}

function narrativeVisionPrescription(r: VisionPrescription): Narrative {
  return buildNarrative([
    ["Status", r.status, { code: "code" }, "1"],
    ["Created", r.created, { code: "dateTime" }, "1"],
    ["Patient", r.patient, { code: "Reference" }, "1"],
    ["Date Written", r.dateWritten, { code: "dateTime" }, "1"],
    ["Prescriber", r.prescriber, { code: "Reference" }, "1"],
    [
      "Lens Specification",
      r.lensSpecification,
      { code: "BackboneElement" },
      "*",
    ],
  ]);
}

/**
 * Build a `Narrative` from a list of `NarrativeElement`. This can be used to compose final `Narrative` for FHIR resources.
 */
export function buildNarrative(components: NarrativeElement[]): Narrative {
  return {
    status: "generated",
    div: `<div xmlns="http://www.w3.org/1999/xhtml" class="fhir-narrative"><ul>${components
      .map(narrativeElementByType)
      .filter((x) => !!x)
      .join("")}</ul></div>`,
  };
}

function htmlEncode(value: string): string {
  return value.replace(
    /[\u00A0-\u9999<>&]/g,
    (i) => "&#" + i.charCodeAt(0) + ";"
  );
}
