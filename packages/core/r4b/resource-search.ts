/**
 * NOTE: This file is auto generated by the @bonfhir/codegen code generator program.
 *
 * Do not edit this file manually.
 * Instead, edit the template file "resource-search.ts.hbs".
 */

import {
  fhirSearch,
  FhirSearchBuilder,
  Prefix,
  StringModifier,
  TokenModifier,
  UriModifier,
} from "./search-builder";
import type { ExtractResource, ResourceType } from "./types";

/**
 * Return a typed search builder for a specific resource.
 *
 * @example
 *  > resourceSearch("Patient").name("John").active("true").href
 *  > "name=John&active=true"
 */
export function resourceSearch<TResource extends ResourceType>(
  type: TResource
): ExtractSearchBuilder<TResource> {
  switch (type) {
    case "Account":
      return new ResourceSearchBuilderAccount() as ExtractSearchBuilder<TResource>;
    case "ActivityDefinition":
      return new ResourceSearchBuilderActivityDefinition() as ExtractSearchBuilder<TResource>;
    case "AdministrableProductDefinition":
      return new ResourceSearchBuilderAdministrableProductDefinition() as ExtractSearchBuilder<TResource>;
    case "AdverseEvent":
      return new ResourceSearchBuilderAdverseEvent() as ExtractSearchBuilder<TResource>;
    case "AllergyIntolerance":
      return new ResourceSearchBuilderAllergyIntolerance() as ExtractSearchBuilder<TResource>;
    case "Appointment":
      return new ResourceSearchBuilderAppointment() as ExtractSearchBuilder<TResource>;
    case "AppointmentResponse":
      return new ResourceSearchBuilderAppointmentResponse() as ExtractSearchBuilder<TResource>;
    case "AuditEvent":
      return new ResourceSearchBuilderAuditEvent() as ExtractSearchBuilder<TResource>;
    case "Basic":
      return new ResourceSearchBuilderBasic() as ExtractSearchBuilder<TResource>;
    case "BiologicallyDerivedProduct":
      return new ResourceSearchBuilderBiologicallyDerivedProduct() as ExtractSearchBuilder<TResource>;
    case "BodyStructure":
      return new ResourceSearchBuilderBodyStructure() as ExtractSearchBuilder<TResource>;
    case "CapabilityStatement":
      return new ResourceSearchBuilderCapabilityStatement() as ExtractSearchBuilder<TResource>;
    case "CarePlan":
      return new ResourceSearchBuilderCarePlan() as ExtractSearchBuilder<TResource>;
    case "CareTeam":
      return new ResourceSearchBuilderCareTeam() as ExtractSearchBuilder<TResource>;
    case "CatalogEntry":
      return new ResourceSearchBuilderCatalogEntry() as ExtractSearchBuilder<TResource>;
    case "ChargeItem":
      return new ResourceSearchBuilderChargeItem() as ExtractSearchBuilder<TResource>;
    case "ChargeItemDefinition":
      return new ResourceSearchBuilderChargeItemDefinition() as ExtractSearchBuilder<TResource>;
    case "Citation":
      return new ResourceSearchBuilderCitation() as ExtractSearchBuilder<TResource>;
    case "Claim":
      return new ResourceSearchBuilderClaim() as ExtractSearchBuilder<TResource>;
    case "ClaimResponse":
      return new ResourceSearchBuilderClaimResponse() as ExtractSearchBuilder<TResource>;
    case "ClinicalImpression":
      return new ResourceSearchBuilderClinicalImpression() as ExtractSearchBuilder<TResource>;
    case "ClinicalUseDefinition":
      return new ResourceSearchBuilderClinicalUseDefinition() as ExtractSearchBuilder<TResource>;
    case "CodeSystem":
      return new ResourceSearchBuilderCodeSystem() as ExtractSearchBuilder<TResource>;
    case "Communication":
      return new ResourceSearchBuilderCommunication() as ExtractSearchBuilder<TResource>;
    case "CommunicationRequest":
      return new ResourceSearchBuilderCommunicationRequest() as ExtractSearchBuilder<TResource>;
    case "CompartmentDefinition":
      return new ResourceSearchBuilderCompartmentDefinition() as ExtractSearchBuilder<TResource>;
    case "Composition":
      return new ResourceSearchBuilderComposition() as ExtractSearchBuilder<TResource>;
    case "ConceptMap":
      return new ResourceSearchBuilderConceptMap() as ExtractSearchBuilder<TResource>;
    case "Condition":
      return new ResourceSearchBuilderCondition() as ExtractSearchBuilder<TResource>;
    case "Consent":
      return new ResourceSearchBuilderConsent() as ExtractSearchBuilder<TResource>;
    case "Contract":
      return new ResourceSearchBuilderContract() as ExtractSearchBuilder<TResource>;
    case "Coverage":
      return new ResourceSearchBuilderCoverage() as ExtractSearchBuilder<TResource>;
    case "CoverageEligibilityRequest":
      return new ResourceSearchBuilderCoverageEligibilityRequest() as ExtractSearchBuilder<TResource>;
    case "CoverageEligibilityResponse":
      return new ResourceSearchBuilderCoverageEligibilityResponse() as ExtractSearchBuilder<TResource>;
    case "DetectedIssue":
      return new ResourceSearchBuilderDetectedIssue() as ExtractSearchBuilder<TResource>;
    case "Device":
      return new ResourceSearchBuilderDevice() as ExtractSearchBuilder<TResource>;
    case "DeviceDefinition":
      return new ResourceSearchBuilderDeviceDefinition() as ExtractSearchBuilder<TResource>;
    case "DeviceMetric":
      return new ResourceSearchBuilderDeviceMetric() as ExtractSearchBuilder<TResource>;
    case "DeviceRequest":
      return new ResourceSearchBuilderDeviceRequest() as ExtractSearchBuilder<TResource>;
    case "DeviceUseStatement":
      return new ResourceSearchBuilderDeviceUseStatement() as ExtractSearchBuilder<TResource>;
    case "DiagnosticReport":
      return new ResourceSearchBuilderDiagnosticReport() as ExtractSearchBuilder<TResource>;
    case "DocumentManifest":
      return new ResourceSearchBuilderDocumentManifest() as ExtractSearchBuilder<TResource>;
    case "DocumentReference":
      return new ResourceSearchBuilderDocumentReference() as ExtractSearchBuilder<TResource>;
    case "Encounter":
      return new ResourceSearchBuilderEncounter() as ExtractSearchBuilder<TResource>;
    case "Endpoint":
      return new ResourceSearchBuilderEndpoint() as ExtractSearchBuilder<TResource>;
    case "EnrollmentRequest":
      return new ResourceSearchBuilderEnrollmentRequest() as ExtractSearchBuilder<TResource>;
    case "EnrollmentResponse":
      return new ResourceSearchBuilderEnrollmentResponse() as ExtractSearchBuilder<TResource>;
    case "EpisodeOfCare":
      return new ResourceSearchBuilderEpisodeOfCare() as ExtractSearchBuilder<TResource>;
    case "EventDefinition":
      return new ResourceSearchBuilderEventDefinition() as ExtractSearchBuilder<TResource>;
    case "Evidence":
      return new ResourceSearchBuilderEvidence() as ExtractSearchBuilder<TResource>;
    case "EvidenceReport":
      return new ResourceSearchBuilderEvidenceReport() as ExtractSearchBuilder<TResource>;
    case "EvidenceVariable":
      return new ResourceSearchBuilderEvidenceVariable() as ExtractSearchBuilder<TResource>;
    case "ExampleScenario":
      return new ResourceSearchBuilderExampleScenario() as ExtractSearchBuilder<TResource>;
    case "ExplanationOfBenefit":
      return new ResourceSearchBuilderExplanationOfBenefit() as ExtractSearchBuilder<TResource>;
    case "FamilyMemberHistory":
      return new ResourceSearchBuilderFamilyMemberHistory() as ExtractSearchBuilder<TResource>;
    case "Flag":
      return new ResourceSearchBuilderFlag() as ExtractSearchBuilder<TResource>;
    case "Goal":
      return new ResourceSearchBuilderGoal() as ExtractSearchBuilder<TResource>;
    case "GraphDefinition":
      return new ResourceSearchBuilderGraphDefinition() as ExtractSearchBuilder<TResource>;
    case "Group":
      return new ResourceSearchBuilderGroup() as ExtractSearchBuilder<TResource>;
    case "GuidanceResponse":
      return new ResourceSearchBuilderGuidanceResponse() as ExtractSearchBuilder<TResource>;
    case "HealthcareService":
      return new ResourceSearchBuilderHealthcareService() as ExtractSearchBuilder<TResource>;
    case "ImagingStudy":
      return new ResourceSearchBuilderImagingStudy() as ExtractSearchBuilder<TResource>;
    case "Immunization":
      return new ResourceSearchBuilderImmunization() as ExtractSearchBuilder<TResource>;
    case "ImmunizationEvaluation":
      return new ResourceSearchBuilderImmunizationEvaluation() as ExtractSearchBuilder<TResource>;
    case "ImmunizationRecommendation":
      return new ResourceSearchBuilderImmunizationRecommendation() as ExtractSearchBuilder<TResource>;
    case "ImplementationGuide":
      return new ResourceSearchBuilderImplementationGuide() as ExtractSearchBuilder<TResource>;
    case "Ingredient":
      return new ResourceSearchBuilderIngredient() as ExtractSearchBuilder<TResource>;
    case "InsurancePlan":
      return new ResourceSearchBuilderInsurancePlan() as ExtractSearchBuilder<TResource>;
    case "Invoice":
      return new ResourceSearchBuilderInvoice() as ExtractSearchBuilder<TResource>;
    case "Library":
      return new ResourceSearchBuilderLibrary() as ExtractSearchBuilder<TResource>;
    case "Linkage":
      return new ResourceSearchBuilderLinkage() as ExtractSearchBuilder<TResource>;
    case "List":
      return new ResourceSearchBuilderList() as ExtractSearchBuilder<TResource>;
    case "Location":
      return new ResourceSearchBuilderLocation() as ExtractSearchBuilder<TResource>;
    case "ManufacturedItemDefinition":
      return new ResourceSearchBuilderManufacturedItemDefinition() as ExtractSearchBuilder<TResource>;
    case "Measure":
      return new ResourceSearchBuilderMeasure() as ExtractSearchBuilder<TResource>;
    case "MeasureReport":
      return new ResourceSearchBuilderMeasureReport() as ExtractSearchBuilder<TResource>;
    case "Media":
      return new ResourceSearchBuilderMedia() as ExtractSearchBuilder<TResource>;
    case "Medication":
      return new ResourceSearchBuilderMedication() as ExtractSearchBuilder<TResource>;
    case "MedicationAdministration":
      return new ResourceSearchBuilderMedicationAdministration() as ExtractSearchBuilder<TResource>;
    case "MedicationDispense":
      return new ResourceSearchBuilderMedicationDispense() as ExtractSearchBuilder<TResource>;
    case "MedicationKnowledge":
      return new ResourceSearchBuilderMedicationKnowledge() as ExtractSearchBuilder<TResource>;
    case "MedicationRequest":
      return new ResourceSearchBuilderMedicationRequest() as ExtractSearchBuilder<TResource>;
    case "MedicationStatement":
      return new ResourceSearchBuilderMedicationStatement() as ExtractSearchBuilder<TResource>;
    case "MedicinalProductDefinition":
      return new ResourceSearchBuilderMedicinalProductDefinition() as ExtractSearchBuilder<TResource>;
    case "MessageDefinition":
      return new ResourceSearchBuilderMessageDefinition() as ExtractSearchBuilder<TResource>;
    case "MessageHeader":
      return new ResourceSearchBuilderMessageHeader() as ExtractSearchBuilder<TResource>;
    case "MolecularSequence":
      return new ResourceSearchBuilderMolecularSequence() as ExtractSearchBuilder<TResource>;
    case "NamingSystem":
      return new ResourceSearchBuilderNamingSystem() as ExtractSearchBuilder<TResource>;
    case "NutritionOrder":
      return new ResourceSearchBuilderNutritionOrder() as ExtractSearchBuilder<TResource>;
    case "NutritionProduct":
      return new ResourceSearchBuilderNutritionProduct() as ExtractSearchBuilder<TResource>;
    case "Observation":
      return new ResourceSearchBuilderObservation() as ExtractSearchBuilder<TResource>;
    case "ObservationDefinition":
      return new ResourceSearchBuilderObservationDefinition() as ExtractSearchBuilder<TResource>;
    case "OperationDefinition":
      return new ResourceSearchBuilderOperationDefinition() as ExtractSearchBuilder<TResource>;
    case "OperationOutcome":
      return new ResourceSearchBuilderOperationOutcome() as ExtractSearchBuilder<TResource>;
    case "Organization":
      return new ResourceSearchBuilderOrganization() as ExtractSearchBuilder<TResource>;
    case "OrganizationAffiliation":
      return new ResourceSearchBuilderOrganizationAffiliation() as ExtractSearchBuilder<TResource>;
    case "PackagedProductDefinition":
      return new ResourceSearchBuilderPackagedProductDefinition() as ExtractSearchBuilder<TResource>;
    case "Patient":
      return new ResourceSearchBuilderPatient() as ExtractSearchBuilder<TResource>;
    case "PaymentNotice":
      return new ResourceSearchBuilderPaymentNotice() as ExtractSearchBuilder<TResource>;
    case "PaymentReconciliation":
      return new ResourceSearchBuilderPaymentReconciliation() as ExtractSearchBuilder<TResource>;
    case "Person":
      return new ResourceSearchBuilderPerson() as ExtractSearchBuilder<TResource>;
    case "PlanDefinition":
      return new ResourceSearchBuilderPlanDefinition() as ExtractSearchBuilder<TResource>;
    case "Practitioner":
      return new ResourceSearchBuilderPractitioner() as ExtractSearchBuilder<TResource>;
    case "PractitionerRole":
      return new ResourceSearchBuilderPractitionerRole() as ExtractSearchBuilder<TResource>;
    case "Procedure":
      return new ResourceSearchBuilderProcedure() as ExtractSearchBuilder<TResource>;
    case "Provenance":
      return new ResourceSearchBuilderProvenance() as ExtractSearchBuilder<TResource>;
    case "Questionnaire":
      return new ResourceSearchBuilderQuestionnaire() as ExtractSearchBuilder<TResource>;
    case "QuestionnaireResponse":
      return new ResourceSearchBuilderQuestionnaireResponse() as ExtractSearchBuilder<TResource>;
    case "RegulatedAuthorization":
      return new ResourceSearchBuilderRegulatedAuthorization() as ExtractSearchBuilder<TResource>;
    case "RelatedPerson":
      return new ResourceSearchBuilderRelatedPerson() as ExtractSearchBuilder<TResource>;
    case "RequestGroup":
      return new ResourceSearchBuilderRequestGroup() as ExtractSearchBuilder<TResource>;
    case "ResearchDefinition":
      return new ResourceSearchBuilderResearchDefinition() as ExtractSearchBuilder<TResource>;
    case "ResearchElementDefinition":
      return new ResourceSearchBuilderResearchElementDefinition() as ExtractSearchBuilder<TResource>;
    case "ResearchStudy":
      return new ResourceSearchBuilderResearchStudy() as ExtractSearchBuilder<TResource>;
    case "ResearchSubject":
      return new ResourceSearchBuilderResearchSubject() as ExtractSearchBuilder<TResource>;
    case "RiskAssessment":
      return new ResourceSearchBuilderRiskAssessment() as ExtractSearchBuilder<TResource>;
    case "Schedule":
      return new ResourceSearchBuilderSchedule() as ExtractSearchBuilder<TResource>;
    case "SearchParameter":
      return new ResourceSearchBuilderSearchParameter() as ExtractSearchBuilder<TResource>;
    case "ServiceRequest":
      return new ResourceSearchBuilderServiceRequest() as ExtractSearchBuilder<TResource>;
    case "Slot":
      return new ResourceSearchBuilderSlot() as ExtractSearchBuilder<TResource>;
    case "Specimen":
      return new ResourceSearchBuilderSpecimen() as ExtractSearchBuilder<TResource>;
    case "SpecimenDefinition":
      return new ResourceSearchBuilderSpecimenDefinition() as ExtractSearchBuilder<TResource>;
    case "StructureDefinition":
      return new ResourceSearchBuilderStructureDefinition() as ExtractSearchBuilder<TResource>;
    case "StructureMap":
      return new ResourceSearchBuilderStructureMap() as ExtractSearchBuilder<TResource>;
    case "Subscription":
      return new ResourceSearchBuilderSubscription() as ExtractSearchBuilder<TResource>;
    case "SubscriptionStatus":
      return new ResourceSearchBuilderSubscriptionStatus() as ExtractSearchBuilder<TResource>;
    case "SubscriptionTopic":
      return new ResourceSearchBuilderSubscriptionTopic() as ExtractSearchBuilder<TResource>;
    case "Substance":
      return new ResourceSearchBuilderSubstance() as ExtractSearchBuilder<TResource>;
    case "SubstanceDefinition":
      return new ResourceSearchBuilderSubstanceDefinition() as ExtractSearchBuilder<TResource>;
    case "SupplyDelivery":
      return new ResourceSearchBuilderSupplyDelivery() as ExtractSearchBuilder<TResource>;
    case "SupplyRequest":
      return new ResourceSearchBuilderSupplyRequest() as ExtractSearchBuilder<TResource>;
    case "Task":
      return new ResourceSearchBuilderTask() as ExtractSearchBuilder<TResource>;
    case "TerminologyCapabilities":
      return new ResourceSearchBuilderTerminologyCapabilities() as ExtractSearchBuilder<TResource>;
    case "TestReport":
      return new ResourceSearchBuilderTestReport() as ExtractSearchBuilder<TResource>;
    case "TestScript":
      return new ResourceSearchBuilderTestScript() as ExtractSearchBuilder<TResource>;
    case "ValueSet":
      return new ResourceSearchBuilderValueSet() as ExtractSearchBuilder<TResource>;
    case "VerificationResult":
      return new ResourceSearchBuilderVerificationResult() as ExtractSearchBuilder<TResource>;
    case "VisionPrescription":
      return new ResourceSearchBuilderVisionPrescription() as ExtractSearchBuilder<TResource>;
    default:
      throw new Error(`Unsupported resourceSearch for resource type ${type}`);
  }
}

/**
 * Base class for all ResourceSearchBuilder{type}
 */
class BaseResourceSearchBuilder<TResourceSearchBuilder> {
  /**
   * The underlying `FhirSearchBuilder`, that can be used directly if needed.
   */
  public builder: FhirSearchBuilder = fhirSearch();

  /**
   * Get the final string containing the whole URL.
   */
  public get href(): string {
    return this.builder.href;
  }

  /**
   * The number of primary resources to return by page.
   *
   * @see https://hl7.org/fhir/search.html#count
   */
  _count(value: number): TResourceSearchBuilder {
    this.builder.string("_count", `${value}`, null, "replace");
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   * Include a related resource directly referenced by the main resource.
   *
   * @see https://hl7.org/fhir/search.html#include
   */
  _include<TResourceType extends ResourceType>(
    sourceResource: TResourceType,
    searchParameter: keyof ExtractResource<TResourceType>,
    options?: {
      targetResourceType?: ResourceType | null | undefined;
      iterate?: boolean | null | undefined;
    }
  ): TResourceSearchBuilder {
    this.builder.string(
      `_include${options?.iterate == null ? "" : ":iterate"}`,
      `${sourceResource}:${String(searchParameter)}${
        options?.targetResourceType ? `:${options.targetResourceType}` : ""
      }`
    );
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   * Include a related resource referencing the main resource.
   *
   * @see https://hl7.org/fhir/search.html#revinclude
   */
  _revinclude<TResourceType extends ResourceType>(
    sourceResource: TResourceType,
    searchParameter: keyof ExtractResource<TResourceType>,
    options?: {
      targetResourceType?: ResourceType | null | undefined;
      iterate?: boolean | null | undefined;
    }
  ): TResourceSearchBuilder {
    this.builder.string(
      `_revinclude${options?.iterate == null ? "" : ":iterate"}`,
      `${sourceResource}:${String(searchParameter)}${
        options?.targetResourceType ? `:${options.targetResourceType}` : ""
      }`
    );
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   *  Return only a portion of the resources.
   *
   * @see https://hl7.org/fhir/search.html#summary
   */
  _summary(value: SummaryValue): TResourceSearchBuilder {
    this.builder.string("_summary", `${value}`, null, "replace");
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   * Add a `total` element to the returned `Bundle` which is the number of resources that match the search parameters.
   * Note that `Bundle.total` represents the total number of matches, not how many resources are returned in a particular response
   *
   * @see https://hl7.org/fhir/search.html#total
   */
  _total(value: "none" | "estimate" | "accurate"): TResourceSearchBuilder {
    this.builder.string("_total", value, null, "replace");
    return this as unknown as TResourceSearchBuilder;
  }
}

class ResourceSearchBuilderAccount extends BaseResourceSearchBuilder<ResourceSearchBuilderAccount> {
  readonly resourceType = "Account";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderAccount | SortOrderAccount[]
  ): ResourceSearchBuilderAccount {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Account number
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Human-readable label
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Entity managing the Account
   */
  owner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.reference("owner", id, modifier);
    return this;
  }

  /**
   * The entity that caused the expenses
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Transaction window
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * active | inactive | entered-in-error | on-hold | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The entity that caused the expenses
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * E.g. patient, expense, depreciation
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAccount {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderAccount =
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "owner"
  | "-owner"
  | "patient"
  | "-patient"
  | "period"
  | "-period"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "type"
  | "-type";

class ResourceSearchBuilderActivityDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderActivityDefinition> {
  readonly resourceType = "ActivityDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderActivityDefinition | SortOrderActivityDefinition[]
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * A use context assigned to the activity definition
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the activity definition
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the activity definition
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The activity definition publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the activity definition
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the activity definition is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the activity definition
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the activity definition
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the activity definition
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the activity definition
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the activity definition
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the activity definition
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the module
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the activity definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the activity definition
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderActivityDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderActivityDefinition =
  | "composed-of"
  | "-composed-of"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderAdministrableProductDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderAdministrableProductDefinition> {
  readonly resourceType = "AdministrableProductDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderAdministrableProductDefinition
      | SortOrderAdministrableProductDefinition[]
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co-packaged
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * The administrable dose form, i.e. the dose form of the final product after necessary reconstitution or processing
   */
  doseform(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("dose-form", value, modifier);
    return this;
  }

  /**
   * The medicinal product that this is an administrable form of. This is not a reference to the item(s) that make up this administrable form - it is the whole product
   */
  formof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.reference("form-of", id, modifier);
    return this;
  }

  /**
   * An identifier for the administrable product
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The ingredients of this administrable medicinal product
   */
  ingredient(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("ingredient", value, modifier);
    return this;
  }

  /**
   * The manufactured item(s) that this administrable product is produced from. Either a single item, or several that are mixed before administration (e.g. a power item and a solution item). Note that these are not raw ingredients
   */
  manufactureditem(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.reference("manufactured-item", id, modifier);
    return this;
  }

  /**
   * Coded expression for the route
   */
  route(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("route", value, modifier);
    return this;
  }

  /**
   * Coded expression for the species
   */
  targetspecies(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdministrableProductDefinition {
    this.builder.token("target-species", value, modifier);
    return this;
  }
}

export type SortOrderAdministrableProductDefinition =
  | "device"
  | "-device"
  | "dose-form"
  | "-dose-form"
  | "form-of"
  | "-form-of"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient"
  | "manufactured-item"
  | "-manufactured-item"
  | "route"
  | "-route"
  | "target-species"
  | "-target-species";

class ResourceSearchBuilderAdverseEvent extends BaseResourceSearchBuilder<ResourceSearchBuilderAdverseEvent> {
  readonly resourceType = "AdverseEvent";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderAdverseEvent | SortOrderAdverseEvent[]
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * actual | potential
   */
  actuality(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("actuality", value, modifier);
    return this;
  }

  /**
   * product-problem | product-quality | product-use-error | wrong-dose | incorrect-prescribing-information | wrong-technique | wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time | expired-drug | medical-device-use-error | problem-different-manufacturer | unsafe-physical-environment
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * When the event occurred
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Type of the event itself in relation to the subject
   */
  event(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("event", value, modifier);
    return this;
  }

  /**
   * Location where adverse event occurred
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * Who recorded the adverse event
   */
  recorder(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.reference("recorder", id, modifier);
    return this;
  }

  /**
   * Effect on the subject due to this event
   */
  resultingcondition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.reference("resultingcondition", id, modifier);
    return this;
  }

  /**
   * Seriousness of the event
   */
  seriousness(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("seriousness", value, modifier);
    return this;
  }

  /**
   * mild | moderate | severe
   */
  severity(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.token("severity", value, modifier);
    return this;
  }

  /**
   * AdverseEvent.study
   */
  study(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.reference("study", id, modifier);
    return this;
  }

  /**
   * Subject impacted by event
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Refers to the specific entity that caused the adverse event
   */
  substance(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAdverseEvent {
    this.builder.reference("substance", id, modifier);
    return this;
  }
}

export type SortOrderAdverseEvent =
  | "actuality"
  | "-actuality"
  | "category"
  | "-category"
  | "date"
  | "-date"
  | "event"
  | "-event"
  | "location"
  | "-location"
  | "recorder"
  | "-recorder"
  | "resultingcondition"
  | "-resultingcondition"
  | "seriousness"
  | "-seriousness"
  | "severity"
  | "-severity"
  | "study"
  | "-study"
  | "subject"
  | "-subject"
  | "substance"
  | "-substance";

class ResourceSearchBuilderAllergyIntolerance extends BaseResourceSearchBuilder<ResourceSearchBuilderAllergyIntolerance> {
  readonly resourceType = "AllergyIntolerance";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderAllergyIntolerance | SortOrderAllergyIntolerance[]
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Source of the information about the allergy
   */
  asserter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.reference("asserter", id, modifier);
    return this;
  }

  /**
   * food | medication | environment | biologic
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * active | inactive | resolved
   */
  clinicalstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("clinical-status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * low | high | unable-to-assess
   */
  criticality(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("criticality", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Date(/time) of last known occurrence of a reaction
   */
  lastdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.date("last-date", value, prefix);
    return this;
  }

  /**
   * Clinical symptoms/signs associated with the Event
   */
  manifestation(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("manifestation", value, modifier);
    return this;
  }

  /**
   * Date(/time) when manifestations showed
   */
  onset(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.date("onset", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Who recorded the sensitivity
   */
  recorder(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.reference("recorder", id, modifier);
    return this;
  }

  /**
   * How the subject was exposed to the substance
   */
  route(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("route", value, modifier);
    return this;
  }

  /**
   * mild | moderate | severe (of event as a whole)
   */
  severity(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("severity", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy | intolerance - Underlying mechanism (if known)
* [Composition](composition.html): Kind of composition (LOINC if possible)
* [DocumentManifest](documentmanifest.html): Kind of document set
* [DocumentReference](documentreference.html): Kind of document (LOINC if possible)
* [Encounter](encounter.html): Specific type of encounter
* [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral, disease management

    */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * unconfirmed | confirmed | refuted | entered-in-error
   */
  verificationstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAllergyIntolerance {
    this.builder.token("verification-status", value, modifier);
    return this;
  }
}

export type SortOrderAllergyIntolerance =
  | "asserter"
  | "-asserter"
  | "category"
  | "-category"
  | "clinical-status"
  | "-clinical-status"
  | "code"
  | "-code"
  | "criticality"
  | "-criticality"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "last-date"
  | "-last-date"
  | "manifestation"
  | "-manifestation"
  | "onset"
  | "-onset"
  | "patient"
  | "-patient"
  | "recorder"
  | "-recorder"
  | "route"
  | "-route"
  | "severity"
  | "-severity"
  | "type"
  | "-type"
  | "verification-status"
  | "-verification-status";

class ResourceSearchBuilderAppointment extends BaseResourceSearchBuilder<ResourceSearchBuilderAppointment> {
  readonly resourceType = "Appointment";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderAppointment | SortOrderAppointment[]
  ): ResourceSearchBuilderAppointment {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Any one of the individuals participating in the appointment
   */
  actor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("actor", id, modifier);
    return this;
  }

  /**
   * The style of appointment or patient that has been booked in the slot (not service type)
   */
  appointmenttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("appointment-type", value, modifier);
    return this;
  }

  /**
   * The service request this appointment is allocated to assess
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Appointment date/time.
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * An Identifier of the Appointment
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * This location is listed in the participants of the appointment
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * The Participation status of the subject, or other participant on the appointment. Can be used to locate participants that have not responded to meeting requests.
   */
  partstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("part-status", value, modifier);
    return this;
  }

  /**
   * One of the individuals of the appointment is this patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * One of the individuals of the appointment is this practitioner
   */
  practitioner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("practitioner", id, modifier);
    return this;
  }

  /**
   * Coded reason this appointment is scheduled
   */
  reasoncode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("reason-code", value, modifier);
    return this;
  }

  /**
   * Reason the appointment is to take place (resource)
   */
  reasonreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("reason-reference", id, modifier);
    return this;
  }

  /**
   * A broad categorization of the service that is to be performed during this appointment
   */
  servicecategory(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("service-category", value, modifier);
    return this;
  }

  /**
   * The specific service that is to be performed during this appointment
   */
  servicetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("service-type", value, modifier);
    return this;
  }

  /**
   * The slots that this appointment is filling
   */
  slot(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("slot", id, modifier);
    return this;
  }

  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment
   */
  specialty(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("specialty", value, modifier);
    return this;
  }

  /**
   * The overall status of the appointment
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Additional information to support the appointment
   */
  supportinginfo(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointment {
    this.builder.reference("supporting-info", id, modifier);
    return this;
  }
}

export type SortOrderAppointment =
  | "actor"
  | "-actor"
  | "appointment-type"
  | "-appointment-type"
  | "based-on"
  | "-based-on"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "part-status"
  | "-part-status"
  | "patient"
  | "-patient"
  | "practitioner"
  | "-practitioner"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "slot"
  | "-slot"
  | "specialty"
  | "-specialty"
  | "status"
  | "-status"
  | "supporting-info"
  | "-supporting-info";

class ResourceSearchBuilderAppointmentResponse extends BaseResourceSearchBuilder<ResourceSearchBuilderAppointmentResponse> {
  readonly resourceType = "AppointmentResponse";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderAppointmentResponse | SortOrderAppointmentResponse[]
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The Person, Location/HealthcareService or Device that this appointment response replies for
   */
  actor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.reference("actor", id, modifier);
    return this;
  }

  /**
   * The appointment that the response is attached to
   */
  appointment(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.reference("appointment", id, modifier);
    return this;
  }

  /**
   * An Identifier in this appointment response
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * This Response is for this Location
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * The participants acceptance status for this appointment
   */
  partstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.token("part-status", value, modifier);
    return this;
  }

  /**
   * This Response is for this Patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * This Response is for this Practitioner
   */
  practitioner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAppointmentResponse {
    this.builder.reference("practitioner", id, modifier);
    return this;
  }
}

export type SortOrderAppointmentResponse =
  | "actor"
  | "-actor"
  | "appointment"
  | "-appointment"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "part-status"
  | "-part-status"
  | "patient"
  | "-patient"
  | "practitioner"
  | "-practitioner";

class ResourceSearchBuilderAuditEvent extends BaseResourceSearchBuilder<ResourceSearchBuilderAuditEvent> {
  readonly resourceType = "AuditEvent";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderAuditEvent | SortOrderAuditEvent[]
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Type of action performed during the event
   */
  action(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("action", value, modifier);
    return this;
  }

  /**
   * Identifier for the network access point of the user device
   */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
   * Identifier of who
   */
  agent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.reference("agent", id, modifier);
    return this;
  }

  /**
   * Human friendly name for the agent
   */
  agentname(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("agent-name", value, modifier);
    return this;
  }

  /**
   * Agent role in the event
   */
  agentrole(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("agent-role", value, modifier);
    return this;
  }

  /**
   * Alternative User identity
   */
  altid(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("altid", value, modifier);
    return this;
  }

  /**
   * Time when the event was recorded
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Specific instance of resource
   */
  entity(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.reference("entity", id, modifier);
    return this;
  }

  /**
   * Descriptor for entity
   */
  entityname(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.string("entity-name", value, modifier);
    return this;
  }

  /**
   * What role the entity played
   */
  entityrole(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("entity-role", value, modifier);
    return this;
  }

  /**
   * Type of entity involved
   */
  entitytype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("entity-type", value, modifier);
    return this;
  }

  /**
   * Whether the event succeeded or failed
   */
  outcome(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("outcome", value, modifier);
    return this;
  }

  /**
   * Identifier of who
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Policy that authorized event
   */
  policy(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.uri("policy", value, modifier);
    return this;
  }

  /**
   * Logical source location within the enterprise
   */
  site(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("site", value, modifier);
    return this;
  }

  /**
   * The identity of source detecting the event
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.reference("source", id, modifier);
    return this;
  }

  /**
   * More specific type/id for the event
   */
  subtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("subtype", value, modifier);
    return this;
  }

  /**
   * Type/identifier of event
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderAuditEvent {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderAuditEvent =
  | "action"
  | "-action"
  | "address"
  | "-address"
  | "agent"
  | "-agent"
  | "agent-name"
  | "-agent-name"
  | "agent-role"
  | "-agent-role"
  | "altid"
  | "-altid"
  | "date"
  | "-date"
  | "entity"
  | "-entity"
  | "entity-name"
  | "-entity-name"
  | "entity-role"
  | "-entity-role"
  | "entity-type"
  | "-entity-type"
  | "outcome"
  | "-outcome"
  | "patient"
  | "-patient"
  | "policy"
  | "-policy"
  | "site"
  | "-site"
  | "source"
  | "-source"
  | "subtype"
  | "-subtype"
  | "type"
  | "-type";

class ResourceSearchBuilderBasic extends BaseResourceSearchBuilder<ResourceSearchBuilderBasic> {
  readonly resourceType = "Basic";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderBasic | SortOrderBasic[]
  ): ResourceSearchBuilderBasic {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Who created
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * Kind of Resource
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * When created
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * Business identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Identifies the focus of this resource
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Identifies the focus of this resource
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderBasic {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderBasic =
  | "author"
  | "-author"
  | "code"
  | "-code"
  | "created"
  | "-created"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "subject"
  | "-subject";

class ResourceSearchBuilderBiologicallyDerivedProduct extends BaseResourceSearchBuilder<ResourceSearchBuilderBiologicallyDerivedProduct> {
  readonly resourceType = "BiologicallyDerivedProduct";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBiologicallyDerivedProduct {
    this.builder.token("_type", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderBodyStructure extends BaseResourceSearchBuilder<ResourceSearchBuilderBodyStructure> {
  readonly resourceType = "BodyStructure";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderBodyStructure | SortOrderBodyStructure[]
  ): ResourceSearchBuilderBodyStructure {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Bodystructure identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Body site
   */
  location(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("location", value, modifier);
    return this;
  }

  /**
   * Kind of Structure
   */
  morphology(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.token("morphology", value, modifier);
    return this;
  }

  /**
   * Who this is about
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderBodyStructure {
    this.builder.reference("patient", id, modifier);
    return this;
  }
}

export type SortOrderBodyStructure =
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "morphology"
  | "-morphology"
  | "patient"
  | "-patient";

class ResourceSearchBuilderCapabilityStatement extends BaseResourceSearchBuilder<ResourceSearchBuilderCapabilityStatement> {
  readonly resourceType = "CapabilityStatement";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCapabilityStatement | SortOrderCapabilityStatement[]
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The version of FHIR
   */
  fhirversion(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("fhirversion", value, modifier);
    return this;
  }

  /**
   * formats supported (xml | json | ttl | mime type)
   */
  format(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("format", value, modifier);
    return this;
  }

  /**
   * Implementation guides supported
   */
  guide(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.reference("guide", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Mode - restful (server/client) or messaging (sender/receiver)
   */
  mode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("mode", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * Name of a resource mentioned in a capability statement
   */
  resource(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("resource", value, modifier);
    return this;
  }

  /**
   * A profile id invoked in a capability statement
   */
  resourceprofile(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.reference("resource-profile", id, modifier);
    return this;
  }

  /**
   * OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
   */
  securityservice(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("security-service", value, modifier);
    return this;
  }

  /**
   * Part of the name of a software application
   */
  software(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("software", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Profiles for use cases supported
   */
  supportedprofile(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.reference("supported-profile", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCapabilityStatement {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderCapabilityStatement =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "fhirversion"
  | "-fhirversion"
  | "format"
  | "-format"
  | "guide"
  | "-guide"
  | "jurisdiction"
  | "-jurisdiction"
  | "mode"
  | "-mode"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "resource"
  | "-resource"
  | "resource-profile"
  | "-resource-profile"
  | "security-service"
  | "-security-service"
  | "software"
  | "-software"
  | "status"
  | "-status"
  | "supported-profile"
  | "-supported-profile"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderCarePlan extends BaseResourceSearchBuilder<ResourceSearchBuilderCarePlan> {
  readonly resourceType = "CarePlan";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCarePlan | SortOrderCarePlan[]
  ): ResourceSearchBuilderCarePlan {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Detail type of activity
   */
  activitycode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("activity-code", value, modifier);
    return this;
  }

  /**
   * Specified date occurs within period specified by CarePlan.activity.detail.scheduled[x]
   */
  activitydate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.date("activity-date", value, prefix);
    return this;
  }

  /**
   * Activity details defined in specific resource
   */
  activityreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("activity-reference", id, modifier);
    return this;
  }

  /**
   * Fulfills CarePlan
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Who's involved in plan?
   */
  careteam(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("care-team", id, modifier);
    return this;
  }

  /**
   * Type of plan
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Health issues this plan addresses
   */
  condition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("condition", id, modifier);
    return this;
  }

  /**
   * Encounter created as part of
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Desired outcome of plan
   */
  goal(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("goal", id, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * proposal | plan | order | option
   */
  intent(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("intent", value, modifier);
    return this;
  }

  /**
   * Part of referenced CarePlan
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * Matches if the practitioner is listed as a performer in any of the "simple" activities.  (For performers of the detailed activities, chain through the activitydetail search parameter.)
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * CarePlan replaced by this CarePlan
   */
  replaces(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("replaces", id, modifier);
    return this;
  }

  /**
   * draft | active | on-hold | revoked | completed | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Who the care plan is for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCarePlan {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderCarePlan =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "activity-code"
  | "-activity-code"
  | "activity-date"
  | "-activity-date"
  | "activity-reference"
  | "-activity-reference"
  | "based-on"
  | "-based-on"
  | "care-team"
  | "-care-team"
  | "category"
  | "-category"
  | "condition"
  | "-condition"
  | "encounter"
  | "-encounter"
  | "goal"
  | "-goal"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "intent"
  | "-intent"
  | "part-of"
  | "-part-of"
  | "performer"
  | "-performer"
  | "replaces"
  | "-replaces"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderCareTeam extends BaseResourceSearchBuilder<ResourceSearchBuilderCareTeam> {
  readonly resourceType = "CareTeam";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCareTeam | SortOrderCareTeam[]
  ): ResourceSearchBuilderCareTeam {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Type of team
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Encounter created as part of
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Who is involved
   */
  participant(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.reference("participant", id, modifier);
    return this;
  }

  /**
   * proposed | active | suspended | inactive | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Who care team is for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCareTeam {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderCareTeam =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "category"
  | "-category"
  | "encounter"
  | "-encounter"
  | "participant"
  | "-participant"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderCatalogEntry extends BaseResourceSearchBuilder<ResourceSearchBuilderCatalogEntry> {
  readonly resourceType = "CatalogEntry";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCatalogEntry {
    this.builder.token("_type", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderChargeItem extends BaseResourceSearchBuilder<ResourceSearchBuilderChargeItem> {
  readonly resourceType = "ChargeItem";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderChargeItem | SortOrderChargeItem[]
  ): ResourceSearchBuilderChargeItem {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Account to place this charge
   */
  account(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("account", id, modifier);
    return this;
  }

  /**
   * A code that identifies the charge, like a billing code
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Encounter / Episode associated with event
   */
  context(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("context", id, modifier);
    return this;
  }

  /**
   * Date the charge item was entered
   */
  entereddate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.date("entered-date", value, prefix);
    return this;
  }

  /**
   * Individual who was entering
   */
  enterer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("enterer", id, modifier);
    return this;
  }

  /**
   * Factor overriding the associated rules
   */
  factoroverride(
    value: Parameters<FhirSearchBuilder["number"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.number("factor-override", value, prefix);
    return this;
  }

  /**
   * Business Identifier for item
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * When the charged service was applied
   */
  occurrence(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.date("occurrence", value, prefix);
    return this;
  }

  /**
   * Individual service was done for/to
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Individual who was performing
   */
  performeractor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("performer-actor", id, modifier);
    return this;
  }

  /**
   * What type of performance was done
   */
  performerfunction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.token("performer-function", value, modifier);
    return this;
  }

  /**
   * Organization providing the charged service
   */
  performingorganization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("performing-organization", id, modifier);
    return this;
  }

  /**
   * Price overriding the associated rules
   */
  priceoverride(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.quantity("price-override", number, prefix);
    return this;
  }

  /**
   * Quantity of which the charge item has been serviced
   */
  quantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.quantity("quantity", number, prefix);
    return this;
  }

  /**
   * Organization requesting the charged service
   */
  requestingorganization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("requesting-organization", id, modifier);
    return this;
  }

  /**
   * Which rendered service is being charged?
   */
  service(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("service", id, modifier);
    return this;
  }

  /**
   * Individual service was done for/to
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderChargeItem {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderChargeItem =
  | "account"
  | "-account"
  | "code"
  | "-code"
  | "context"
  | "-context"
  | "entered-date"
  | "-entered-date"
  | "enterer"
  | "-enterer"
  | "factor-override"
  | "-factor-override"
  | "identifier"
  | "-identifier"
  | "occurrence"
  | "-occurrence"
  | "patient"
  | "-patient"
  | "performer-actor"
  | "-performer-actor"
  | "performer-function"
  | "-performer-function"
  | "performing-organization"
  | "-performing-organization"
  | "price-override"
  | "-price-override"
  | "quantity"
  | "-quantity"
  | "requesting-organization"
  | "-requesting-organization"
  | "service"
  | "-service"
  | "subject"
  | "-subject";

class ResourceSearchBuilderChargeItemDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderChargeItemDefinition> {
  readonly resourceType = "ChargeItemDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderChargeItemDefinition | SortOrderChargeItemDefinition[]
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the charge item definition
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the charge item definition
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the charge item definition
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The charge item definition publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * The description of the charge item definition
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the charge item definition is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the charge item definition
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the charge item definition
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the charge item definition
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the charge item definition
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The human-friendly name of the charge item definition
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the charge item definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the charge item definition
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderChargeItemDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderChargeItemDefinition =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderCitation extends BaseResourceSearchBuilder<ResourceSearchBuilderCitation> {
  readonly resourceType = "Citation";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCitation | SortOrderCitation[]
  ): ResourceSearchBuilderCitation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the citation
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the citation
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the citation
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The citation publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * The description of the citation
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the citation is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the citation
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the citation
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the citation
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the citation
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the citation
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The human-friendly name of the citation
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the citation
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the citation
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCitation {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderCitation =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderClaim extends BaseResourceSearchBuilder<ResourceSearchBuilderClaim> {
  readonly resourceType = "Claim";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderClaim | SortOrderClaim[]
  ): ResourceSearchBuilderClaim {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Member of the CareTeam
   */
  careteam(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("care-team", id, modifier);
    return this;
  }

  /**
   * The creation date for the Claim
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * UDI associated with a line item, detail product or service
   */
  detailudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("detail-udi", id, modifier);
    return this;
  }

  /**
   * Encounters associated with a billed line item
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * The party responsible for the entry of the Claim
   */
  enterer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("enterer", id, modifier);
    return this;
  }

  /**
   * Facility where the products or services have been or will be provided
   */
  facility(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("facility", id, modifier);
    return this;
  }

  /**
   * The primary identifier of the financial resource
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The target payor/insurer for the Claim
   */
  insurer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("insurer", id, modifier);
    return this;
  }

  /**
   * UDI associated with a line item product or service
   */
  itemudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("item-udi", id, modifier);
    return this;
  }

  /**
   * Patient receiving the products or services
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The party receiving any payment for the Claim
   */
  payee(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("payee", id, modifier);
    return this;
  }

  /**
   * Processing priority requested
   */
  priority(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("priority", value, modifier);
    return this;
  }

  /**
   * UDI associated with a procedure
   */
  procedureudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("procedure-udi", id, modifier);
    return this;
  }

  /**
   * Provider responsible for the Claim
   */
  provider(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("provider", id, modifier);
    return this;
  }

  /**
   * The status of the Claim instance.
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * UDI associated with a line item, detail, subdetail product or service
   */
  subdetailudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.reference("subdetail-udi", id, modifier);
    return this;
  }

  /**
   * The kind of financial resource
   */
  use(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaim {
    this.builder.token("use", value, modifier);
    return this;
  }
}

export type SortOrderClaim =
  | "care-team"
  | "-care-team"
  | "created"
  | "-created"
  | "detail-udi"
  | "-detail-udi"
  | "encounter"
  | "-encounter"
  | "enterer"
  | "-enterer"
  | "facility"
  | "-facility"
  | "identifier"
  | "-identifier"
  | "insurer"
  | "-insurer"
  | "item-udi"
  | "-item-udi"
  | "patient"
  | "-patient"
  | "payee"
  | "-payee"
  | "priority"
  | "-priority"
  | "procedure-udi"
  | "-procedure-udi"
  | "provider"
  | "-provider"
  | "status"
  | "-status"
  | "subdetail-udi"
  | "-subdetail-udi"
  | "use"
  | "-use";

class ResourceSearchBuilderClaimResponse extends BaseResourceSearchBuilder<ResourceSearchBuilderClaimResponse> {
  readonly resourceType = "ClaimResponse";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderClaimResponse | SortOrderClaimResponse[]
  ): ResourceSearchBuilderClaimResponse {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The creation date
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * The contents of the disposition message
   */
  disposition(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.string("disposition", value, modifier);
    return this;
  }

  /**
   * The identity of the ClaimResponse
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The organization which generated this resource
   */
  insurer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.reference("insurer", id, modifier);
    return this;
  }

  /**
   * The processing outcome
   */
  outcome(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("outcome", value, modifier);
    return this;
  }

  /**
   * The subject of care
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The expected payment date
   */
  paymentdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.date("payment-date", value, prefix);
    return this;
  }

  /**
   * The claim reference
   */
  request(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.reference("request", id, modifier);
    return this;
  }

  /**
   * The Provider of the claim
   */
  requestor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.reference("requestor", id, modifier);
    return this;
  }

  /**
   * The status of the ClaimResponse
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The type of claim
   */
  use(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClaimResponse {
    this.builder.token("use", value, modifier);
    return this;
  }
}

export type SortOrderClaimResponse =
  | "created"
  | "-created"
  | "disposition"
  | "-disposition"
  | "identifier"
  | "-identifier"
  | "insurer"
  | "-insurer"
  | "outcome"
  | "-outcome"
  | "patient"
  | "-patient"
  | "payment-date"
  | "-payment-date"
  | "request"
  | "-request"
  | "requestor"
  | "-requestor"
  | "status"
  | "-status"
  | "use"
  | "-use";

class ResourceSearchBuilderClinicalImpression extends BaseResourceSearchBuilder<ResourceSearchBuilderClinicalImpression> {
  readonly resourceType = "ClinicalImpression";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderClinicalImpression | SortOrderClinicalImpression[]
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The clinician performing the assessment
   */
  assessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("assessor", id, modifier);
    return this;
  }

  /**
   * Encounter created as part of
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * What was found
   */
  findingcode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("finding-code", value, modifier);
    return this;
  }

  /**
   * What was found
   */
  findingref(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("finding-ref", id, modifier);
    return this;
  }

  /**
   * Business identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Record of a specific investigation
   */
  investigation(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("investigation", id, modifier);
    return this;
  }

  /**
   * Reference to last assessment
   */
  previous(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("previous", id, modifier);
    return this;
  }

  /**
   * Relevant impressions of patient state
   */
  problem(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("problem", id, modifier);
    return this;
  }

  /**
   * in-progress | completed | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Patient or group assessed
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Information supporting the clinical impression
   */
  supportinginfo(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalImpression {
    this.builder.reference("supporting-info", id, modifier);
    return this;
  }
}

export type SortOrderClinicalImpression =
  | "date"
  | "-date"
  | "patient"
  | "-patient"
  | "assessor"
  | "-assessor"
  | "encounter"
  | "-encounter"
  | "finding-code"
  | "-finding-code"
  | "finding-ref"
  | "-finding-ref"
  | "identifier"
  | "-identifier"
  | "investigation"
  | "-investigation"
  | "previous"
  | "-previous"
  | "problem"
  | "-problem"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "supporting-info"
  | "-supporting-info";

class ResourceSearchBuilderClinicalUseDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderClinicalUseDefinition> {
  readonly resourceType = "ClinicalUseDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderClinicalUseDefinition
      | SortOrderClinicalUseDefinition[]
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The situation that is being documented as contraindicating against this item, as a code
   */
  contraindication(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("contraindication", value, modifier);
    return this;
  }

  /**
   * The situation that is being documented as contraindicating against this item, as a reference
   */
  contraindicationreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.reference("contraindication-reference", id, modifier);
    return this;
  }

  /**
   * The situation in which the undesirable effect may manifest, as a code
   */
  effect(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("effect", value, modifier);
    return this;
  }

  /**
   * The situation in which the undesirable effect may manifest, as a reference
   */
  effectreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.reference("effect-reference", id, modifier);
    return this;
  }

  /**
   * Business identifier for this issue
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The situation that is being documented as an indicaton for this item, as a code
   */
  indication(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("indication", value, modifier);
    return this;
  }

  /**
   * The situation that is being documented as an indicaton for this item, as a reference
   */
  indicationreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.reference("indication-reference", id, modifier);
    return this;
  }

  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction
   */
  interaction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("interaction", value, modifier);
    return this;
  }

  /**
   * The medicinal product for which this is a clinical usage issue
   */
  product(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.reference("product", id, modifier);
    return this;
  }

  /**
   * The resource for which this is a clinical usage issue
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * indication | contraindication | interaction | undesirable-effect | warning
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderClinicalUseDefinition {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderClinicalUseDefinition =
  | "contraindication"
  | "-contraindication"
  | "contraindication-reference"
  | "-contraindication-reference"
  | "effect"
  | "-effect"
  | "effect-reference"
  | "-effect-reference"
  | "identifier"
  | "-identifier"
  | "indication"
  | "-indication"
  | "indication-reference"
  | "-indication-reference"
  | "interaction"
  | "-interaction"
  | "product"
  | "-product"
  | "subject"
  | "-subject"
  | "type"
  | "-type";

class ResourceSearchBuilderCodeSystem extends BaseResourceSearchBuilder<ResourceSearchBuilderCodeSystem> {
  readonly resourceType = "CodeSystem";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCodeSystem | SortOrderCodeSystem[]
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
   * A code defined in the code system
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * not-present | example | fragment | complete | supplement
   */
  contentmode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("content-mode", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for the code system
* [ConceptMap](conceptmap.html): External identifier for the concept map
* [MessageDefinition](messagedefinition.html): External identifier for the message definition
* [StructureDefinition](structuredefinition.html): External identifier for the structure definition
* [StructureMap](structuremap.html): External identifier for the structure map
* [ValueSet](valueset.html): External identifier for the value set

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A language in which a designation is provided
   */
  language(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.token("language", value, modifier);
    return this;
  }

  /**
   * Find code system supplements for the referenced code system
   */
  supplements(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.reference("supplements", id, modifier);
    return this;
  }

  /**
   * The system for any codes defined by this code system (same as 'url')
   */
  system(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCodeSystem {
    this.builder.uri("system", value, modifier);
    return this;
  }
}

export type SortOrderCodeSystem =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "code"
  | "-code"
  | "content-mode"
  | "-content-mode"
  | "identifier"
  | "-identifier"
  | "language"
  | "-language"
  | "supplements"
  | "-supplements"
  | "system"
  | "-system";

class ResourceSearchBuilderCommunication extends BaseResourceSearchBuilder<ResourceSearchBuilderCommunication> {
  readonly resourceType = "Communication";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCommunication | SortOrderCommunication[]
  ): ResourceSearchBuilderCommunication {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Request fulfilled by this communication
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Message category
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Encounter created as part of
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Unique identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * A channel of communication
   */
  medium(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("medium", value, modifier);
    return this;
  }

  /**
   * Part of this action
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * Focus of message
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * When received
   */
  received(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.date("received", value, prefix);
    return this;
  }

  /**
   * Message recipient
   */
  recipient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("recipient", id, modifier);
    return this;
  }

  /**
   * Message sender
   */
  sender(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("sender", id, modifier);
    return this;
  }

  /**
   * When sent
   */
  sent(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.date("sent", value, prefix);
    return this;
  }

  /**
   * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Focus of message
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunication {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderCommunication =
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "medium"
  | "-medium"
  | "part-of"
  | "-part-of"
  | "patient"
  | "-patient"
  | "received"
  | "-received"
  | "recipient"
  | "-recipient"
  | "sender"
  | "-sender"
  | "sent"
  | "-sent"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderCommunicationRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderCommunicationRequest> {
  readonly resourceType = "CommunicationRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCommunicationRequest | SortOrderCommunicationRequest[]
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * When request transitioned to being actionable
   */
  authored(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.date("authored", value, prefix);
    return this;
  }

  /**
   * Fulfills plan or proposal
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Message category
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Encounter created as part of
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Composite request this is part of
   */
  groupidentifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("group-identifier", value, modifier);
    return this;
  }

  /**
   * Unique identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A channel of communication
   */
  medium(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("medium", value, modifier);
    return this;
  }

  /**
   * When scheduled
   */
  occurrence(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.date("occurrence", value, prefix);
    return this;
  }

  /**
   * Focus of message
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * routine | urgent | asap | stat
   */
  priority(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("priority", value, modifier);
    return this;
  }

  /**
   * Message recipient
   */
  recipient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("recipient", id, modifier);
    return this;
  }

  /**
   * Request(s) replaced by this request
   */
  replaces(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("replaces", id, modifier);
    return this;
  }

  /**
   * Who/what is requesting service
   */
  requester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("requester", id, modifier);
    return this;
  }

  /**
   * Message sender
   */
  sender(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("sender", id, modifier);
    return this;
  }

  /**
   * draft | active | on-hold | revoked | completed | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Focus of message
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCommunicationRequest {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderCommunicationRequest =
  | "authored"
  | "-authored"
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "encounter"
  | "-encounter"
  | "group-identifier"
  | "-group-identifier"
  | "identifier"
  | "-identifier"
  | "medium"
  | "-medium"
  | "occurrence"
  | "-occurrence"
  | "patient"
  | "-patient"
  | "priority"
  | "-priority"
  | "recipient"
  | "-recipient"
  | "replaces"
  | "-replaces"
  | "requester"
  | "-requester"
  | "sender"
  | "-sender"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderCompartmentDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderCompartmentDefinition> {
  readonly resourceType = "CompartmentDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderCompartmentDefinition
      | SortOrderCompartmentDefinition[]
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
   * Patient | Encounter | RelatedPerson | Practitioner | Device
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Name of resource type
   */
  resource(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCompartmentDefinition {
    this.builder.token("resource", value, modifier);
    return this;
  }
}

export type SortOrderCompartmentDefinition =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "code"
  | "-code"
  | "resource"
  | "-resource";

class ResourceSearchBuilderComposition extends BaseResourceSearchBuilder<ResourceSearchBuilderComposition> {
  readonly resourceType = "Composition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderComposition | SortOrderComposition[]
  ): ResourceSearchBuilderComposition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy | intolerance - Underlying mechanism (if known)
* [Composition](composition.html): Kind of composition (LOINC if possible)
* [DocumentManifest](documentmanifest.html): Kind of document set
* [DocumentReference](documentreference.html): Kind of document (LOINC if possible)
* [Encounter](encounter.html): Specific type of encounter
* [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral, disease management

    */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * Who attested the composition
   */
  attester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("attester", id, modifier);
    return this;
  }

  /**
   * Who and/or what authored the composition
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * Categorization of Composition
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * As defined by affinity domain
   */
  confidentiality(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("confidentiality", value, modifier);
    return this;
  }

  /**
   * Code(s) that apply to the event being documented
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * A reference to data that supports this section
   */
  entry(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("entry", id, modifier);
    return this;
  }

  /**
   * The period covered by the documentation
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * Target of the relationship
   */
  relatedid(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("related-id", value, modifier);
    return this;
  }

  /**
   * Target of the relationship
   */
  relatedref(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("related-ref", id, modifier);
    return this;
  }

  /**
   * Classification of section (recommended)
   */
  section(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("section", value, modifier);
    return this;
  }

  /**
   * preliminary | final | amended | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Who and/or what the composition is about
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Human Readable name/title
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderComposition {
    this.builder.string("title", value, modifier);
    return this;
  }
}

export type SortOrderComposition =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type"
  | "attester"
  | "-attester"
  | "author"
  | "-author"
  | "category"
  | "-category"
  | "confidentiality"
  | "-confidentiality"
  | "context"
  | "-context"
  | "encounter"
  | "-encounter"
  | "entry"
  | "-entry"
  | "period"
  | "-period"
  | "related-id"
  | "-related-id"
  | "related-ref"
  | "-related-ref"
  | "section"
  | "-section"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "title"
  | "-title";

class ResourceSearchBuilderConceptMap extends BaseResourceSearchBuilder<ResourceSearchBuilderConceptMap> {
  readonly resourceType = "ConceptMap";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderConceptMap | SortOrderConceptMap[]
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for the code system
* [ConceptMap](conceptmap.html): External identifier for the concept map
* [MessageDefinition](messagedefinition.html): External identifier for the message definition
* [StructureDefinition](structuredefinition.html): External identifier for the structure definition
* [StructureMap](structuremap.html): External identifier for the structure map
* [ValueSet](valueset.html): External identifier for the value set

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Reference to property mapping depends on
   */
  dependson(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("dependson", value, modifier);
    return this;
  }

  /**
   * canonical reference to an additional ConceptMap to use for mapping if the source concept is unmapped
   */
  other(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.reference("other", id, modifier);
    return this;
  }

  /**
   * Reference to property mapping depends on
   */
  product(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("product", value, modifier);
    return this;
  }

  /**
   * The source value set that contains the concepts that are being mapped
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.reference("source", id, modifier);
    return this;
  }

  /**
   * Identifies element being mapped
   */
  sourcecode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("source-code", value, modifier);
    return this;
  }

  /**
   * Source system where concepts to be mapped are defined
   */
  sourcesystem(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("source-system", value, modifier);
    return this;
  }

  /**
   * The source value set that contains the concepts that are being mapped
   */
  sourceuri(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.reference("source-uri", id, modifier);
    return this;
  }

  /**
   * The target value set which provides context for the mappings
   */
  target(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.reference("target", id, modifier);
    return this;
  }

  /**
   * Code that identifies the target element
   */
  targetcode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.token("target-code", value, modifier);
    return this;
  }

  /**
   * Target system that the concepts are to be mapped to
   */
  targetsystem(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.uri("target-system", value, modifier);
    return this;
  }

  /**
   * The target value set which provides context for the mappings
   */
  targeturi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConceptMap {
    this.builder.reference("target-uri", id, modifier);
    return this;
  }
}

export type SortOrderConceptMap =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "identifier"
  | "-identifier"
  | "dependson"
  | "-dependson"
  | "other"
  | "-other"
  | "product"
  | "-product"
  | "source"
  | "-source"
  | "source-code"
  | "-source-code"
  | "source-system"
  | "-source-system"
  | "source-uri"
  | "-source-uri"
  | "target"
  | "-target"
  | "target-code"
  | "-target-code"
  | "target-system"
  | "-target-system"
  | "target-uri"
  | "-target-uri";

class ResourceSearchBuilderCondition extends BaseResourceSearchBuilder<ResourceSearchBuilderCondition> {
  readonly resourceType = "Condition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCondition | SortOrderCondition[]
  ): ResourceSearchBuilderCondition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Abatement as age or age range
   */
  abatementage(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.quantity("abatement-age", number, prefix);
    return this;
  }

  /**
   * Date-related abatements (dateTime and period)
   */
  abatementdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.date("abatement-date", value, prefix);
    return this;
  }

  /**
   * Abatement as a string
   */
  abatementstring(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.string("abatement-string", value, modifier);
    return this;
  }

  /**
   * Person who asserts this condition
   */
  asserter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.reference("asserter", id, modifier);
    return this;
  }

  /**
   * Anatomical location, if relevant
   */
  bodysite(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("body-site", value, modifier);
    return this;
  }

  /**
   * The category of the condition
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * The clinical status of the condition
   */
  clinicalstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("clinical-status", value, modifier);
    return this;
  }

  /**
   * Encounter created as part of
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Manifestation/symptom
   */
  evidence(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("evidence", value, modifier);
    return this;
  }

  /**
   * Supporting information found elsewhere
   */
  evidencedetail(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.reference("evidence-detail", id, modifier);
    return this;
  }

  /**
   * Onsets as age or age range
   */
  onsetage(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.quantity("onset-age", number, prefix);
    return this;
  }

  /**
   * Date related onsets (dateTime and Period)
   */
  onsetdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.date("onset-date", value, prefix);
    return this;
  }

  /**
   * Onsets as a string
   */
  onsetinfo(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.string("onset-info", value, modifier);
    return this;
  }

  /**
   * Date record was first recorded
   */
  recordeddate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.date("recorded-date", value, prefix);
    return this;
  }

  /**
   * The severity of the condition
   */
  severity(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("severity", value, modifier);
    return this;
  }

  /**
   * Simple summary (disease specific)
   */
  stage(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("stage", value, modifier);
    return this;
  }

  /**
   * Who has the condition?
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * unconfirmed | provisional | differential | confirmed | refuted | entered-in-error
   */
  verificationstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCondition {
    this.builder.token("verification-status", value, modifier);
    return this;
  }
}

export type SortOrderCondition =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "abatement-age"
  | "-abatement-age"
  | "abatement-date"
  | "-abatement-date"
  | "abatement-string"
  | "-abatement-string"
  | "asserter"
  | "-asserter"
  | "body-site"
  | "-body-site"
  | "category"
  | "-category"
  | "clinical-status"
  | "-clinical-status"
  | "encounter"
  | "-encounter"
  | "evidence"
  | "-evidence"
  | "evidence-detail"
  | "-evidence-detail"
  | "onset-age"
  | "-onset-age"
  | "onset-date"
  | "-onset-date"
  | "onset-info"
  | "-onset-info"
  | "recorded-date"
  | "-recorded-date"
  | "severity"
  | "-severity"
  | "stage"
  | "-stage"
  | "subject"
  | "-subject"
  | "verification-status"
  | "-verification-status";

class ResourceSearchBuilderConsent extends BaseResourceSearchBuilder<ResourceSearchBuilderConsent> {
  readonly resourceType = "Consent";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderConsent | SortOrderConsent[]
  ): ResourceSearchBuilderConsent {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Actions controlled by this rule
   */
  action(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("action", value, modifier);
    return this;
  }

  /**
   * Resource for the actor (or group, by role)
   */
  actor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.reference("actor", id, modifier);
    return this;
  }

  /**
   * Classification of the consent statement - for indexing/retrieval
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Who is agreeing to the policy and rules
   */
  consentor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.reference("consentor", id, modifier);
    return this;
  }

  /**
   * The actual data reference
   */
  data(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.reference("data", id, modifier);
    return this;
  }

  /**
   * Custodian of the consent
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * Timeframe for this rule
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * Context of activities covered by this rule
   */
  purpose(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("purpose", value, modifier);
    return this;
  }

  /**
   * Which of the four areas this resource covers (extensible)
   */
  scope(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("scope", value, modifier);
    return this;
  }

  /**
   * Security Labels that define affected resources
   */
  securitylabel(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("security-label", value, modifier);
    return this;
  }

  /**
   * Search by reference to a Consent, DocumentReference, Contract  or QuestionnaireResponse
   */
  sourcereference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.reference("source-reference", id, modifier);
    return this;
  }

  /**
   * draft | proposed | active | rejected | inactive | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderConsent {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderConsent =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "action"
  | "-action"
  | "actor"
  | "-actor"
  | "category"
  | "-category"
  | "consentor"
  | "-consentor"
  | "data"
  | "-data"
  | "organization"
  | "-organization"
  | "period"
  | "-period"
  | "purpose"
  | "-purpose"
  | "scope"
  | "-scope"
  | "security-label"
  | "-security-label"
  | "source-reference"
  | "-source-reference"
  | "status"
  | "-status";

class ResourceSearchBuilderContract extends BaseResourceSearchBuilder<ResourceSearchBuilderContract> {
  readonly resourceType = "Contract";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderContract | SortOrderContract[]
  ): ResourceSearchBuilderContract {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The authority of the contract
   */
  authority(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.reference("authority", id, modifier);
    return this;
  }

  /**
   * The domain of the contract
   */
  domain(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.reference("domain", id, modifier);
    return this;
  }

  /**
   * The identity of the contract
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A source definition of the contract
   */
  instantiates(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.uri("instantiates", value, modifier);
    return this;
  }

  /**
   * The date/time the contract was issued
   */
  issued(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.date("issued", value, prefix);
    return this;
  }

  /**
   * The identity of the subject of the contract (if a patient)
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Contract Signatory Party
   */
  signer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.reference("signer", id, modifier);
    return this;
  }

  /**
   * The status of the contract
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The identity of the subject of the contract
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * The basal contract definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderContract {
    this.builder.uri("url", value, modifier);
    return this;
  }
}

export type SortOrderContract =
  | "authority"
  | "-authority"
  | "domain"
  | "-domain"
  | "identifier"
  | "-identifier"
  | "instantiates"
  | "-instantiates"
  | "issued"
  | "-issued"
  | "patient"
  | "-patient"
  | "signer"
  | "-signer"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "url"
  | "-url";

class ResourceSearchBuilderCoverage extends BaseResourceSearchBuilder<ResourceSearchBuilderCoverage> {
  readonly resourceType = "Coverage";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderCoverage | SortOrderCoverage[]
  ): ResourceSearchBuilderCoverage {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Covered party
   */
  beneficiary(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.reference("beneficiary", id, modifier);
    return this;
  }

  /**
   * Coverage class (eg. plan, group)
   */
  classtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("class-type", value, modifier);
    return this;
  }

  /**
   * Value of the class (eg. Plan number, group number)
   */
  classvalue(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.string("class-value", value, modifier);
    return this;
  }

  /**
   * Dependent number
   */
  dependent(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.string("dependent", value, modifier);
    return this;
  }

  /**
   * The primary identifier of the insured and the coverage
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Retrieve coverages for a patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The identity of the insurer or party paying for services
   */
  payor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.reference("payor", id, modifier);
    return this;
  }

  /**
   * Reference to the policyholder
   */
  policyholder(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.reference("policy-holder", id, modifier);
    return this;
  }

  /**
   * The status of the Coverage
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Reference to the subscriber
   */
  subscriber(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.reference("subscriber", id, modifier);
    return this;
  }

  /**
   * The kind of coverage (health plan, auto, Workers Compensation)
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverage {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderCoverage =
  | "beneficiary"
  | "-beneficiary"
  | "class-type"
  | "-class-type"
  | "class-value"
  | "-class-value"
  | "dependent"
  | "-dependent"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "payor"
  | "-payor"
  | "policy-holder"
  | "-policy-holder"
  | "status"
  | "-status"
  | "subscriber"
  | "-subscriber"
  | "type"
  | "-type";

class ResourceSearchBuilderCoverageEligibilityRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderCoverageEligibilityRequest> {
  readonly resourceType = "CoverageEligibilityRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderCoverageEligibilityRequest
      | SortOrderCoverageEligibilityRequest[]
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The creation date for the EOB
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * The party who is responsible for the request
   */
  enterer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.reference("enterer", id, modifier);
    return this;
  }

  /**
   * Facility responsible for the goods and services
   */
  facility(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.reference("facility", id, modifier);
    return this;
  }

  /**
   * The business identifier of the Eligibility
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The reference to the patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The reference to the provider
   */
  provider(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.reference("provider", id, modifier);
    return this;
  }

  /**
   * The status of the EligibilityRequest
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityRequest {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderCoverageEligibilityRequest =
  | "created"
  | "-created"
  | "enterer"
  | "-enterer"
  | "facility"
  | "-facility"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "provider"
  | "-provider"
  | "status"
  | "-status";

class ResourceSearchBuilderCoverageEligibilityResponse extends BaseResourceSearchBuilder<ResourceSearchBuilderCoverageEligibilityResponse> {
  readonly resourceType = "CoverageEligibilityResponse";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderCoverageEligibilityResponse
      | SortOrderCoverageEligibilityResponse[]
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The creation date
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * The contents of the disposition message
   */
  disposition(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.string("disposition", value, modifier);
    return this;
  }

  /**
   * The business identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The organization which generated this resource
   */
  insurer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.reference("insurer", id, modifier);
    return this;
  }

  /**
   * The processing outcome
   */
  outcome(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("outcome", value, modifier);
    return this;
  }

  /**
   * The reference to the patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The EligibilityRequest reference
   */
  request(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.reference("request", id, modifier);
    return this;
  }

  /**
   * The EligibilityRequest provider
   */
  requestor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.reference("requestor", id, modifier);
    return this;
  }

  /**
   * The EligibilityRequest status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderCoverageEligibilityResponse {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderCoverageEligibilityResponse =
  | "created"
  | "-created"
  | "disposition"
  | "-disposition"
  | "identifier"
  | "-identifier"
  | "insurer"
  | "-insurer"
  | "outcome"
  | "-outcome"
  | "patient"
  | "-patient"
  | "request"
  | "-request"
  | "requestor"
  | "-requestor"
  | "status"
  | "-status";

class ResourceSearchBuilderDetectedIssue extends BaseResourceSearchBuilder<ResourceSearchBuilderDetectedIssue> {
  readonly resourceType = "DetectedIssue";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDetectedIssue | SortOrderDetectedIssue[]
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The provider or device that identified the issue
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * Issue Category, e.g. drug-drug, duplicate therapy, etc.
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * When identified
   */
  identified(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.date("identified", value, prefix);
    return this;
  }

  /**
   * Problem resource
   */
  implicated(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDetectedIssue {
    this.builder.reference("implicated", id, modifier);
    return this;
  }
}

export type SortOrderDetectedIssue =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "author"
  | "-author"
  | "code"
  | "-code"
  | "identified"
  | "-identified"
  | "implicated"
  | "-implicated";

class ResourceSearchBuilderDevice extends BaseResourceSearchBuilder<ResourceSearchBuilderDevice> {
  readonly resourceType = "Device";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDevice | SortOrderDevice[]
  ): ResourceSearchBuilderDevice {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in Device.deviceName or Device.type.
   */
  devicename(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("device-name", value, modifier);
    return this;
  }

  /**
   * Instance id from manufacturer, owner, and others
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A location, where the resource is found
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * The manufacturer of the device
   */
  manufacturer(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("manufacturer", value, modifier);
    return this;
  }

  /**
   * The model of the device
   */
  model(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("model", value, modifier);
    return this;
  }

  /**
   * The organization responsible for the device
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * Patient information, if the resource is affixed to a person
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * active | inactive | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The type of the device
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * UDI Barcode (RFID or other technology) string in *HRF* format.
   */
  udicarrier(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("udi-carrier", value, modifier);
    return this;
  }

  /**
   * The udi Device Identifier (DI)
   */
  udidi(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.string("udi-di", value, modifier);
    return this;
  }

  /**
   * Network address to contact device
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDevice {
    this.builder.uri("url", value, modifier);
    return this;
  }
}

export type SortOrderDevice =
  | "device-name"
  | "-device-name"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "manufacturer"
  | "-manufacturer"
  | "model"
  | "-model"
  | "organization"
  | "-organization"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "type"
  | "-type"
  | "udi-carrier"
  | "-udi-carrier"
  | "udi-di"
  | "-udi-di"
  | "url"
  | "-url";

class ResourceSearchBuilderDeviceDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderDeviceDefinition> {
  readonly resourceType = "DeviceDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDeviceDefinition | SortOrderDeviceDefinition[]
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The identifier of the component
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The parent DeviceDefinition resource
   */
  parent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.reference("parent", id, modifier);
    return this;
  }

  /**
   * The device component type
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceDefinition {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderDeviceDefinition =
  | "identifier"
  | "-identifier"
  | "parent"
  | "-parent"
  | "type"
  | "-type";

class ResourceSearchBuilderDeviceMetric extends BaseResourceSearchBuilder<ResourceSearchBuilderDeviceMetric> {
  readonly resourceType = "DeviceMetric";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDeviceMetric | SortOrderDeviceMetric[]
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The category of the metric
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * The identifier of the metric
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The parent DeviceMetric resource
   */
  parent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.reference("parent", id, modifier);
    return this;
  }

  /**
   * The device resource
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.reference("source", id, modifier);
    return this;
  }

  /**
   * The component type
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceMetric {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderDeviceMetric =
  | "category"
  | "-category"
  | "identifier"
  | "-identifier"
  | "parent"
  | "-parent"
  | "source"
  | "-source"
  | "type"
  | "-type";

class ResourceSearchBuilderDeviceRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderDeviceRequest> {
  readonly resourceType = "DeviceRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDeviceRequest | SortOrderDeviceRequest[]
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * When the request transitioned to being actionable
   */
  authoredon(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.date("authored-on", value, prefix);
    return this;
  }

  /**
   * Plan/proposal/order fulfilled by this request
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Reference to resource that is being requested/ordered
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * When service should occur
   */
  eventdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.date("event-date", value, prefix);
    return this;
  }

  /**
   * Composite request this is part of
   */
  groupidentifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("group-identifier", value, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * Associated insurance coverage
   */
  insurance(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("insurance", id, modifier);
    return this;
  }

  /**
   * proposal | plan | original-order |reflex-order
   */
  intent(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("intent", value, modifier);
    return this;
  }

  /**
   * Desired performer for service
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Request takes the place of referenced completed or terminated requests
   */
  priorrequest(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("prior-request", id, modifier);
    return this;
  }

  /**
   * Who/what is requesting service
   */
  requester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("requester", id, modifier);
    return this;
  }

  /**
   * entered-in-error | draft | active |suspended | completed
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Individual the service is ordered for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceRequest {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderDeviceRequest =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "authored-on"
  | "-authored-on"
  | "based-on"
  | "-based-on"
  | "device"
  | "-device"
  | "event-date"
  | "-event-date"
  | "group-identifier"
  | "-group-identifier"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "insurance"
  | "-insurance"
  | "intent"
  | "-intent"
  | "performer"
  | "-performer"
  | "prior-request"
  | "-prior-request"
  | "requester"
  | "-requester"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderDeviceUseStatement extends BaseResourceSearchBuilder<ResourceSearchBuilderDeviceUseStatement> {
  readonly resourceType = "DeviceUseStatement";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDeviceUseStatement | SortOrderDeviceUseStatement[]
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Search by device
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * Search by identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Search by subject
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDeviceUseStatement {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderDeviceUseStatement =
  | "patient"
  | "-patient"
  | "device"
  | "-device"
  | "identifier"
  | "-identifier"
  | "subject"
  | "-subject";

class ResourceSearchBuilderDiagnosticReport extends BaseResourceSearchBuilder<ResourceSearchBuilderDiagnosticReport> {
  readonly resourceType = "DiagnosticReport";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDiagnosticReport | SortOrderDiagnosticReport[]
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Reference to the service request.
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Which diagnostic discipline/department created the report
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * A coded conclusion (interpretation/impression) on the report
   */
  conclusion(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("conclusion", value, modifier);
    return this;
  }

  /**
   * When the report was issued
   */
  issued(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.date("issued", value, prefix);
    return this;
  }

  /**
   * A reference to the image source.
   */
  media(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("media", id, modifier);
    return this;
  }

  /**
   * Who is responsible for the report
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Link to an atomic result (observation resource)
   */
  result(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("result", id, modifier);
    return this;
  }

  /**
   * Who was the source of the report
   */
  resultsinterpreter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("results-interpreter", id, modifier);
    return this;
  }

  /**
   * The specimen details
   */
  specimen(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("specimen", id, modifier);
    return this;
  }

  /**
   * The status of the report
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The subject of the report
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDiagnosticReport {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderDiagnosticReport =
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "conclusion"
  | "-conclusion"
  | "issued"
  | "-issued"
  | "media"
  | "-media"
  | "performer"
  | "-performer"
  | "result"
  | "-result"
  | "results-interpreter"
  | "-results-interpreter"
  | "specimen"
  | "-specimen"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderDocumentManifest extends BaseResourceSearchBuilder<ResourceSearchBuilderDocumentManifest> {
  readonly resourceType = "DocumentManifest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDocumentManifest | SortOrderDocumentManifest[]
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy | intolerance - Underlying mechanism (if known)
* [Composition](composition.html): Kind of composition (LOINC if possible)
* [DocumentManifest](documentmanifest.html): Kind of document set
* [DocumentReference](documentreference.html): Kind of document (LOINC if possible)
* [Encounter](encounter.html): Specific type of encounter
* [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral, disease management

    */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * Who and/or what authored the DocumentManifest
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * When this document manifest created
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * Human-readable description (title)
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * Items in manifest
   */
  item(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.reference("item", id, modifier);
    return this;
  }

  /**
   * Intended to get notified about this set of documents
   */
  recipient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.reference("recipient", id, modifier);
    return this;
  }

  /**
   * Identifiers of things that are related
   */
  relatedid(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("related-id", value, modifier);
    return this;
  }

  /**
   * Related Resource
   */
  relatedref(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.reference("related-ref", id, modifier);
    return this;
  }

  /**
   * The source system/application/software
   */
  source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.uri("source", value, modifier);
    return this;
  }

  /**
   * current | superseded | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The subject of the set of documents
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentManifest {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderDocumentManifest =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type"
  | "author"
  | "-author"
  | "created"
  | "-created"
  | "description"
  | "-description"
  | "item"
  | "-item"
  | "recipient"
  | "-recipient"
  | "related-id"
  | "-related-id"
  | "related-ref"
  | "-related-ref"
  | "source"
  | "-source"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderDocumentReference extends BaseResourceSearchBuilder<ResourceSearchBuilderDocumentReference> {
  readonly resourceType = "DocumentReference";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderDocumentReference | SortOrderDocumentReference[]
  ): ResourceSearchBuilderDocumentReference {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy | intolerance - Underlying mechanism (if known)
* [Composition](composition.html): Kind of composition (LOINC if possible)
* [DocumentManifest](documentmanifest.html): Kind of document set
* [DocumentReference](documentreference.html): Kind of document (LOINC if possible)
* [Encounter](encounter.html): Specific type of encounter
* [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral, disease management

    */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Who/what authenticated the document
   */
  authenticator(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("authenticator", id, modifier);
    return this;
  }

  /**
   * Who and/or what authored the document
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * Categorization of document
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Mime type of the content, with charset etc.
   */
  contenttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("contenttype", value, modifier);
    return this;
  }

  /**
   * Organization which maintains the document
   */
  custodian(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("custodian", id, modifier);
    return this;
  }

  /**
   * When this document reference was created
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Human-readable description
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * Main clinical acts documented
   */
  event(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("event", value, modifier);
    return this;
  }

  /**
   * Kind of facility where patient was seen
   */
  facility(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("facility", value, modifier);
    return this;
  }

  /**
   * Format/content rules for the document
   */
  format(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("format", value, modifier);
    return this;
  }

  /**
   * Human language of the content (BCP-47)
   */
  language(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("language", value, modifier);
    return this;
  }

  /**
   * Uri where the data can be found
   */
  location(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.uri("location", value, modifier);
    return this;
  }

  /**
   * Time of service that is being documented
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * Related identifiers or resources
   */
  related(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("related", id, modifier);
    return this;
  }

  /**
   * Target of the relationship
   */
  relatesto(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("relatesto", id, modifier);
    return this;
  }

  /**
   * replaces | transforms | signs | appends
   */
  relation(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("relation", value, modifier);
    return this;
  }

  /**
   * Document security-tags
   */
  securitylabel(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("security-label", value, modifier);
    return this;
  }

  /**
   * Additional details about where the content was created (e.g. clinical specialty)
   */
  setting(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("setting", value, modifier);
    return this;
  }

  /**
   * current | superseded | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Who/what is the subject of the document
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderDocumentReference {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderDocumentReference =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type"
  | "encounter"
  | "-encounter"
  | "authenticator"
  | "-authenticator"
  | "author"
  | "-author"
  | "category"
  | "-category"
  | "contenttype"
  | "-contenttype"
  | "custodian"
  | "-custodian"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "event"
  | "-event"
  | "facility"
  | "-facility"
  | "format"
  | "-format"
  | "language"
  | "-language"
  | "location"
  | "-location"
  | "period"
  | "-period"
  | "related"
  | "-related"
  | "relatesto"
  | "-relatesto"
  | "relation"
  | "-relation"
  | "security-label"
  | "-security-label"
  | "setting"
  | "-setting"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderEncounter extends BaseResourceSearchBuilder<ResourceSearchBuilderEncounter> {
  readonly resourceType = "Encounter";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEncounter | SortOrderEncounter[]
  ): ResourceSearchBuilderEncounter {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy | intolerance - Underlying mechanism (if known)
* [Composition](composition.html): Kind of composition (LOINC if possible)
* [DocumentManifest](documentmanifest.html): Kind of document set
* [DocumentReference](documentreference.html): Kind of document (LOINC if possible)
* [Encounter](encounter.html): Specific type of encounter
* [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral, disease management

    */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * The set of accounts that may be used for billing for this Encounter
   */
  account(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("account", id, modifier);
    return this;
  }

  /**
   * The appointment that scheduled this encounter
   */
  appointment(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("appointment", id, modifier);
    return this;
  }

  /**
   * The ServiceRequest that initiated this encounter
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Classification of patient encounter
   */
  class(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("class", value, modifier);
    return this;
  }

  /**
   * The diagnosis or procedure relevant to the encounter
   */
  diagnosis(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("diagnosis", id, modifier);
    return this;
  }

  /**
   * Episode(s) of care that this encounter should be recorded against
   */
  episodeofcare(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("episode-of-care", id, modifier);
    return this;
  }

  /**
   * Length of encounter in days
   */
  length(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.quantity("length", number, prefix);
    return this;
  }

  /**
   * Location the encounter takes place
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * Time period during which the patient was present at the location
   */
  locationperiod(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.date("location-period", value, prefix);
    return this;
  }

  /**
   * Another Encounter this encounter is part of
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * Persons involved in the encounter other than the patient
   */
  participant(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("participant", id, modifier);
    return this;
  }

  /**
   * Role of participant in encounter
   */
  participanttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("participant-type", value, modifier);
    return this;
  }

  /**
   * Persons involved in the encounter other than the patient
   */
  practitioner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("practitioner", id, modifier);
    return this;
  }

  /**
   * Coded reason the encounter takes place
   */
  reasoncode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("reason-code", value, modifier);
    return this;
  }

  /**
   * Reason the encounter takes place (reference)
   */
  reasonreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("reason-reference", id, modifier);
    return this;
  }

  /**
   * The organization (facility) responsible for this encounter
   */
  serviceprovider(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("service-provider", id, modifier);
    return this;
  }

  /**
   * Wheelchair, translator, stretcher, etc.
   */
  specialarrangement(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("special-arrangement", value, modifier);
    return this;
  }

  /**
   * planned | arrived | triaged | in-progress | onleave | finished | cancelled +
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The patient or group present at the encounter
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEncounter {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderEncounter =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type"
  | "account"
  | "-account"
  | "appointment"
  | "-appointment"
  | "based-on"
  | "-based-on"
  | "class"
  | "-class"
  | "diagnosis"
  | "-diagnosis"
  | "episode-of-care"
  | "-episode-of-care"
  | "length"
  | "-length"
  | "location"
  | "-location"
  | "location-period"
  | "-location-period"
  | "part-of"
  | "-part-of"
  | "participant"
  | "-participant"
  | "participant-type"
  | "-participant-type"
  | "practitioner"
  | "-practitioner"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "service-provider"
  | "-service-provider"
  | "special-arrangement"
  | "-special-arrangement"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderEndpoint extends BaseResourceSearchBuilder<ResourceSearchBuilderEndpoint> {
  readonly resourceType = "Endpoint";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEndpoint | SortOrderEndpoint[]
  ): ResourceSearchBuilderEndpoint {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Protocol/Profile/Standard to be used with this endpoint connection
   */
  connectiontype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("connection-type", value, modifier);
    return this;
  }

  /**
   * Identifies this endpoint across multiple systems
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A name that this endpoint can be identified by
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * The organization that is managing the endpoint
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * The type of content that may be used at this endpoint (e.g. XDS Discharge summaries)
   */
  payloadtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("payload-type", value, modifier);
    return this;
  }

  /**
   * The current status of the Endpoint (usually expected to be active)
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEndpoint {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderEndpoint =
  | "connection-type"
  | "-connection-type"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "payload-type"
  | "-payload-type"
  | "status"
  | "-status";

class ResourceSearchBuilderEnrollmentRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderEnrollmentRequest> {
  readonly resourceType = "EnrollmentRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEnrollmentRequest | SortOrderEnrollmentRequest[]
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The business identifier of the Enrollment
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The party to be enrolled
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The status of the enrollment
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The party to be enrolled
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEnrollmentRequest {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderEnrollmentRequest =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderEnrollmentResponse extends BaseResourceSearchBuilder<ResourceSearchBuilderEnrollmentResponse> {
  readonly resourceType = "EnrollmentResponse";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEnrollmentResponse | SortOrderEnrollmentResponse[]
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The business identifier of the EnrollmentResponse
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The reference to the claim
   */
  request(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.reference("request", id, modifier);
    return this;
  }

  /**
   * The status of the enrollment response
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEnrollmentResponse {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderEnrollmentResponse =
  | "identifier"
  | "-identifier"
  | "request"
  | "-request"
  | "status"
  | "-status";

class ResourceSearchBuilderEpisodeOfCare extends BaseResourceSearchBuilder<ResourceSearchBuilderEpisodeOfCare> {
  readonly resourceType = "EpisodeOfCare";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEpisodeOfCare | SortOrderEpisodeOfCare[]
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy | intolerance - Underlying mechanism (if known)
* [Composition](composition.html): Kind of composition (LOINC if possible)
* [DocumentManifest](documentmanifest.html): Kind of document set
* [DocumentReference](documentreference.html): Kind of document (LOINC if possible)
* [Encounter](encounter.html): Specific type of encounter
* [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral, disease management

    */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * Care manager/care coordinator for the patient
   */
  caremanager(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.reference("care-manager", id, modifier);
    return this;
  }

  /**
   * Conditions/problems/diagnoses this episode of care is for
   */
  condition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.reference("condition", id, modifier);
    return this;
  }

  /**
   * Incoming Referral Request
   */
  incomingreferral(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.reference("incoming-referral", id, modifier);
    return this;
  }

  /**
   * The organization that has assumed the specific responsibilities of this EpisodeOfCare
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * The current status of the Episode of Care as provided (does not check the status history collection)
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEpisodeOfCare {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderEpisodeOfCare =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type"
  | "care-manager"
  | "-care-manager"
  | "condition"
  | "-condition"
  | "incoming-referral"
  | "-incoming-referral"
  | "organization"
  | "-organization"
  | "status"
  | "-status";

class ResourceSearchBuilderEventDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderEventDefinition> {
  readonly resourceType = "EventDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEventDefinition | SortOrderEventDefinition[]
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * A use context assigned to the event definition
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the event definition
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the event definition
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The event definition publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the event definition
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the event definition is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the event definition
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the event definition
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the event definition
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the event definition
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the event definition
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the event definition
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the module
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the event definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the event definition
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEventDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderEventDefinition =
  | "composed-of"
  | "-composed-of"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderEvidence extends BaseResourceSearchBuilder<ResourceSearchBuilderEvidence> {
  readonly resourceType = "Evidence";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEvidence | SortOrderEvidence[]
  ): ResourceSearchBuilderEvidence {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the evidence
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the evidence
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the evidence
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The evidence publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * The description of the evidence
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * External identifier for the evidence
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the evidence
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the evidence
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The human-friendly name of the evidence
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the evidence
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the evidence
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidence {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderEvidence =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderEvidenceReport extends BaseResourceSearchBuilder<ResourceSearchBuilderEvidenceReport> {
  readonly resourceType = "EvidenceReport";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEvidenceReport | SortOrderEvidenceReport[]
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the evidence report
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the evidence report
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the evidence report
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * External identifier for the evidence report
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the evidence report
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the evidence report
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the evidence report
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidenceReport {
    this.builder.uri("url", value, modifier);
    return this;
  }
}

export type SortOrderEvidenceReport =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "identifier"
  | "-identifier"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url";

class ResourceSearchBuilderEvidenceVariable extends BaseResourceSearchBuilder<ResourceSearchBuilderEvidenceVariable> {
  readonly resourceType = "EvidenceVariable";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderEvidenceVariable | SortOrderEvidenceVariable[]
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the evidence variable
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the evidence variable
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the evidence variable
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The evidence variable publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * The description of the evidence variable
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * External identifier for the evidence variable
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the evidence variable
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the evidence variable
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the evidence variable
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The human-friendly name of the evidence variable
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the evidence variable
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the evidence variable
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderEvidenceVariable {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderEvidenceVariable =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderExampleScenario extends BaseResourceSearchBuilder<ResourceSearchBuilderExampleScenario> {
  readonly resourceType = "ExampleScenario";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderExampleScenario | SortOrderExampleScenario[]
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the example scenario
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the example scenario
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the example scenario
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The example scenario publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * External identifier for the example scenario
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the example scenario
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the example scenario
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the example scenario
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the example scenario
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the example scenario
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the example scenario
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExampleScenario {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderExampleScenario =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderExplanationOfBenefit extends BaseResourceSearchBuilder<ResourceSearchBuilderExplanationOfBenefit> {
  readonly resourceType = "ExplanationOfBenefit";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderExplanationOfBenefit | SortOrderExplanationOfBenefit[]
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Member of the CareTeam
   */
  careteam(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("care-team", id, modifier);
    return this;
  }

  /**
   * The reference to the claim
   */
  claim(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("claim", id, modifier);
    return this;
  }

  /**
   * The plan under which the claim was adjudicated
   */
  coverage(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("coverage", id, modifier);
    return this;
  }

  /**
   * The creation date for the EOB
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * UDI associated with a line item detail product or service
   */
  detailudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("detail-udi", id, modifier);
    return this;
  }

  /**
   * The contents of the disposition message
   */
  disposition(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.string("disposition", value, modifier);
    return this;
  }

  /**
   * Encounters associated with a billed line item
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * The party responsible for the entry of the Claim
   */
  enterer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("enterer", id, modifier);
    return this;
  }

  /**
   * Facility responsible for the goods and services
   */
  facility(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("facility", id, modifier);
    return this;
  }

  /**
   * The business identifier of the Explanation of Benefit
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * UDI associated with a line item product or service
   */
  itemudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("item-udi", id, modifier);
    return this;
  }

  /**
   * The reference to the patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The party receiving any payment for the Claim
   */
  payee(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("payee", id, modifier);
    return this;
  }

  /**
   * UDI associated with a procedure
   */
  procedureudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("procedure-udi", id, modifier);
    return this;
  }

  /**
   * The reference to the provider
   */
  provider(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("provider", id, modifier);
    return this;
  }

  /**
   * Status of the instance
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * UDI associated with a line item detail subdetail product or service
   */
  subdetailudi(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderExplanationOfBenefit {
    this.builder.reference("subdetail-udi", id, modifier);
    return this;
  }
}

export type SortOrderExplanationOfBenefit =
  | "care-team"
  | "-care-team"
  | "claim"
  | "-claim"
  | "coverage"
  | "-coverage"
  | "created"
  | "-created"
  | "detail-udi"
  | "-detail-udi"
  | "disposition"
  | "-disposition"
  | "encounter"
  | "-encounter"
  | "enterer"
  | "-enterer"
  | "facility"
  | "-facility"
  | "identifier"
  | "-identifier"
  | "item-udi"
  | "-item-udi"
  | "patient"
  | "-patient"
  | "payee"
  | "-payee"
  | "procedure-udi"
  | "-procedure-udi"
  | "provider"
  | "-provider"
  | "status"
  | "-status"
  | "subdetail-udi"
  | "-subdetail-udi";

class ResourceSearchBuilderFamilyMemberHistory extends BaseResourceSearchBuilder<ResourceSearchBuilderFamilyMemberHistory> {
  readonly resourceType = "FamilyMemberHistory";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderFamilyMemberHistory | SortOrderFamilyMemberHistory[]
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * A search by a relationship type
   */
  relationship(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("relationship", value, modifier);
    return this;
  }

  /**
   * A search by a sex code of a family member
   */
  sex(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("sex", value, modifier);
    return this;
  }

  /**
   * partial | completed | entered-in-error | health-unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFamilyMemberHistory {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderFamilyMemberHistory =
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "relationship"
  | "-relationship"
  | "sex"
  | "-sex"
  | "status"
  | "-status";

class ResourceSearchBuilderFlag extends BaseResourceSearchBuilder<ResourceSearchBuilderFlag> {
  readonly resourceType = "Flag";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderFlag | SortOrderFlag[]
  ): ResourceSearchBuilderFlag {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Flag creator
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * Business identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The identity of a subject to list flags for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderFlag {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderFlag =
  | "date"
  | "-date"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "author"
  | "-author"
  | "identifier"
  | "-identifier"
  | "subject"
  | "-subject";

class ResourceSearchBuilderGoal extends BaseResourceSearchBuilder<ResourceSearchBuilderGoal> {
  readonly resourceType = "Goal";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderGoal | SortOrderGoal[]
  ): ResourceSearchBuilderGoal {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * in-progress | improving | worsening | no-change | achieved | sustaining | not-achieved | no-progress | not-attainable
   */
  achievementstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("achievement-status", value, modifier);
    return this;
  }

  /**
   * E.g. Treatment, dietary, behavioral, etc.
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * proposed | planned | accepted | active | on-hold | completed | cancelled | entered-in-error | rejected
   */
  lifecyclestatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.token("lifecycle-status", value, modifier);
    return this;
  }

  /**
   * When goal pursuit begins
   */
  startdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.date("start-date", value, prefix);
    return this;
  }

  /**
   * Who this goal is intended for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Reach goal on or before
   */
  targetdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGoal {
    this.builder.date("target-date", value, prefix);
    return this;
  }
}

export type SortOrderGoal =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "achievement-status"
  | "-achievement-status"
  | "category"
  | "-category"
  | "lifecycle-status"
  | "-lifecycle-status"
  | "start-date"
  | "-start-date"
  | "subject"
  | "-subject"
  | "target-date"
  | "-target-date";

class ResourceSearchBuilderGraphDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderGraphDefinition> {
  readonly resourceType = "GraphDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderGraphDefinition | SortOrderGraphDefinition[]
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
   * Type of resource at which the graph starts
   */
  start(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGraphDefinition {
    this.builder.token("start", value, modifier);
    return this;
  }
}

export type SortOrderGraphDefinition =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "start"
  | "-start";

class ResourceSearchBuilderGroup extends BaseResourceSearchBuilder<ResourceSearchBuilderGroup> {
  readonly resourceType = "Group";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderGroup | SortOrderGroup[]
  ): ResourceSearchBuilderGroup {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Descriptive or actual
   */
  actual(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("actual", value, modifier);
    return this;
  }

  /**
   * Kind of characteristic
   */
  characteristic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("characteristic", value, modifier);
    return this;
  }

  /**
   * The kind of resources contained
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Group includes or excludes
   */
  exclude(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("exclude", value, modifier);
    return this;
  }

  /**
   * Unique id
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Entity that is the custodian of the Group's definition
   */
  managingentity(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.reference("managing-entity", id, modifier);
    return this;
  }

  /**
   * Reference to the group member
   */
  member(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.reference("member", id, modifier);
    return this;
  }

  /**
   * The type of resources the group contains
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * Value held by characteristic
   */
  value(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGroup {
    this.builder.token("value", value, modifier);
    return this;
  }
}

export type SortOrderGroup =
  | "actual"
  | "-actual"
  | "characteristic"
  | "-characteristic"
  | "code"
  | "-code"
  | "exclude"
  | "-exclude"
  | "identifier"
  | "-identifier"
  | "managing-entity"
  | "-managing-entity"
  | "member"
  | "-member"
  | "type"
  | "-type"
  | "value"
  | "-value";

class ResourceSearchBuilderGuidanceResponse extends BaseResourceSearchBuilder<ResourceSearchBuilderGuidanceResponse> {
  readonly resourceType = "GuidanceResponse";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderGuidanceResponse | SortOrderGuidanceResponse[]
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The identifier of the guidance response
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The identity of a patient to search for guidance response results
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The identifier of the request associated with the response
   */
  request(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.token("request", value, modifier);
    return this;
  }

  /**
   * The subject that the guidance response is about
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderGuidanceResponse {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderGuidanceResponse =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "request"
  | "-request"
  | "subject"
  | "-subject";

class ResourceSearchBuilderHealthcareService extends BaseResourceSearchBuilder<ResourceSearchBuilderHealthcareService> {
  readonly resourceType = "HealthcareService";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderHealthcareService | SortOrderHealthcareService[]
  ): ResourceSearchBuilderHealthcareService {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The Healthcare Service is currently marked as active
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * One of the HealthcareService's characteristics
   */
  characteristic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("characteristic", value, modifier);
    return this;
  }

  /**
   * Location(s) service is intended for/available to
   */
  coveragearea(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.reference("coverage-area", id, modifier);
    return this;
  }

  /**
   * Technical endpoints providing access to electronic services operated for the healthcare service
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * External identifiers for this item
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The location of the Healthcare Service
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * A portion of the Healthcare service name
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * The organization that provides this Healthcare Service
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * One of the Programs supported by this HealthcareService
   */
  program(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("program", value, modifier);
    return this;
  }

  /**
   * Service Category of the Healthcare Service
   */
  servicecategory(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("service-category", value, modifier);
    return this;
  }

  /**
   * The type of service provided by this healthcare service
   */
  servicetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("service-type", value, modifier);
    return this;
  }

  /**
   * The specialty of the service provided by this healthcare service
   */
  specialty(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderHealthcareService {
    this.builder.token("specialty", value, modifier);
    return this;
  }
}

export type SortOrderHealthcareService =
  | "active"
  | "-active"
  | "characteristic"
  | "-characteristic"
  | "coverage-area"
  | "-coverage-area"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "program"
  | "-program"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "specialty"
  | "-specialty";

class ResourceSearchBuilderImagingStudy extends BaseResourceSearchBuilder<ResourceSearchBuilderImagingStudy> {
  readonly resourceType = "ImagingStudy";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderImagingStudy | SortOrderImagingStudy[]
  ): ResourceSearchBuilderImagingStudy {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The order for the image
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("basedon", id, modifier);
    return this;
  }

  /**
   * The body site studied
   */
  bodysite(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("bodysite", value, modifier);
    return this;
  }

  /**
   * The type of the instance
   */
  dicomclass(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("dicom-class", value, modifier);
    return this;
  }

  /**
   * The context of the study
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * The endpoint for the study or series
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * SOP Instance UID for an instance
   */
  instance(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("instance", value, modifier);
    return this;
  }

  /**
   * Who interpreted the images
   */
  interpreter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("interpreter", id, modifier);
    return this;
  }

  /**
   * The modality of the series
   */
  modality(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("modality", value, modifier);
    return this;
  }

  /**
   * The person who performed the study
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * The reason for the study
   */
  reason(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("reason", value, modifier);
    return this;
  }

  /**
   * The referring physician
   */
  referrer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("referrer", id, modifier);
    return this;
  }

  /**
   * DICOM Series Instance UID for a series
   */
  series(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("series", value, modifier);
    return this;
  }

  /**
   * When the study was started
   */
  started(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.date("started", value, prefix);
    return this;
  }

  /**
   * The status of the study
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Who the study is about
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImagingStudy {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderImagingStudy =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "basedon"
  | "-basedon"
  | "bodysite"
  | "-bodysite"
  | "dicom-class"
  | "-dicom-class"
  | "encounter"
  | "-encounter"
  | "endpoint"
  | "-endpoint"
  | "instance"
  | "-instance"
  | "interpreter"
  | "-interpreter"
  | "modality"
  | "-modality"
  | "performer"
  | "-performer"
  | "reason"
  | "-reason"
  | "referrer"
  | "-referrer"
  | "series"
  | "-series"
  | "started"
  | "-started"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderImmunization extends BaseResourceSearchBuilder<ResourceSearchBuilderImmunization> {
  readonly resourceType = "Immunization";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderImmunization | SortOrderImmunization[]
  ): ResourceSearchBuilderImmunization {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The service delivery location or facility in which the vaccine was / was to be administered
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * Vaccine Lot Number
   */
  lotnumber(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.string("lot-number", value, modifier);
    return this;
  }

  /**
   * Vaccine Manufacturer
   */
  manufacturer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.reference("manufacturer", id, modifier);
    return this;
  }

  /**
   * The practitioner or organization who played a role in the vaccination
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Additional information on reaction
   */
  reaction(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.reference("reaction", id, modifier);
    return this;
  }

  /**
   * When reaction started
   */
  reactiondate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.date("reaction-date", value, prefix);
    return this;
  }

  /**
   * Reason why the vaccine was administered
   */
  reasoncode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("reason-code", value, modifier);
    return this;
  }

  /**
   * Why immunization occurred
   */
  reasonreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.reference("reason-reference", id, modifier);
    return this;
  }

  /**
   * The series being followed by the provider
   */
  series(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.string("series", value, modifier);
    return this;
  }

  /**
   * Immunization event status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Reason why the vaccine was not administered
   */
  statusreason(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("status-reason", value, modifier);
    return this;
  }

  /**
   * The target disease the dose is being administered against
   */
  targetdisease(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("target-disease", value, modifier);
    return this;
  }

  /**
   * Vaccine Product Administered
   */
  vaccinecode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunization {
    this.builder.token("vaccine-code", value, modifier);
    return this;
  }
}

export type SortOrderImmunization =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "location"
  | "-location"
  | "lot-number"
  | "-lot-number"
  | "manufacturer"
  | "-manufacturer"
  | "performer"
  | "-performer"
  | "reaction"
  | "-reaction"
  | "reaction-date"
  | "-reaction-date"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "series"
  | "-series"
  | "status"
  | "-status"
  | "status-reason"
  | "-status-reason"
  | "target-disease"
  | "-target-disease"
  | "vaccine-code"
  | "-vaccine-code";

class ResourceSearchBuilderImmunizationEvaluation extends BaseResourceSearchBuilder<ResourceSearchBuilderImmunizationEvaluation> {
  readonly resourceType = "ImmunizationEvaluation";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderImmunizationEvaluation
      | SortOrderImmunizationEvaluation[]
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Date the evaluation was generated
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * The status of the dose relative to published recommendations
   */
  dosestatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("dose-status", value, modifier);
    return this;
  }

  /**
   * ID of the evaluation
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The vaccine administration event being evaluated
   */
  immunizationevent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.reference("immunization-event", id, modifier);
    return this;
  }

  /**
   * The patient being evaluated
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Immunization evaluation status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The vaccine preventable disease being evaluated against
   */
  targetdisease(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationEvaluation {
    this.builder.token("target-disease", value, modifier);
    return this;
  }
}

export type SortOrderImmunizationEvaluation =
  | "date"
  | "-date"
  | "dose-status"
  | "-dose-status"
  | "identifier"
  | "-identifier"
  | "immunization-event"
  | "-immunization-event"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "target-disease"
  | "-target-disease";

class ResourceSearchBuilderImmunizationRecommendation extends BaseResourceSearchBuilder<ResourceSearchBuilderImmunizationRecommendation> {
  readonly resourceType = "ImmunizationRecommendation";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderImmunizationRecommendation
      | SortOrderImmunizationRecommendation[]
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Date recommendation(s) created
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Business identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Patient observations supporting recommendation
   */
  information(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.reference("information", id, modifier);
    return this;
  }

  /**
   * Who this profile is for
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Vaccine recommendation status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Past immunizations supporting recommendation
   */
  support(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.reference("support", id, modifier);
    return this;
  }

  /**
   * Disease to be immunized against
   */
  targetdisease(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("target-disease", value, modifier);
    return this;
  }

  /**
   * Vaccine  or vaccine group recommendation applies to
   */
  vaccinetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImmunizationRecommendation {
    this.builder.token("vaccine-type", value, modifier);
    return this;
  }
}

export type SortOrderImmunizationRecommendation =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "information"
  | "-information"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "support"
  | "-support"
  | "target-disease"
  | "-target-disease"
  | "vaccine-type"
  | "-vaccine-type";

class ResourceSearchBuilderImplementationGuide extends BaseResourceSearchBuilder<ResourceSearchBuilderImplementationGuide> {
  readonly resourceType = "ImplementationGuide";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderImplementationGuide | SortOrderImplementationGuide[]
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
   * Identity of the IG that this depends on
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * For testing purposes, not real usage
   */
  experimental(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.token("experimental", value, modifier);
    return this;
  }

  /**
   * Profile that all resources must conform to
   */
  global(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.reference("global", id, modifier);
    return this;
  }

  /**
   * Location of the resource
   */
  resource(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderImplementationGuide {
    this.builder.reference("resource", id, modifier);
    return this;
  }
}

export type SortOrderImplementationGuide =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "depends-on"
  | "-depends-on"
  | "experimental"
  | "-experimental"
  | "global"
  | "-global"
  | "resource"
  | "-resource";

class ResourceSearchBuilderIngredient extends BaseResourceSearchBuilder<ResourceSearchBuilderIngredient> {
  readonly resourceType = "Ingredient";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderIngredient | SortOrderIngredient[]
  ): ResourceSearchBuilderIngredient {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The product which this ingredient is a constituent part of
   */
  for(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.reference("for", id, modifier);
    return this;
  }

  /**
   * A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: Antioxidant, Alkalizing Agent
   */
  function(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("function", value, modifier);
    return this;
  }

  /**
   * An identifier or code by which the ingredient can be referenced
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The organization that manufactures this ingredient
   */
  manufacturer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.reference("manufacturer", id, modifier);
    return this;
  }

  /**
   * A classification of the ingredient identifying its purpose within the product, e.g. active, inactive
   */
  role(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("role", value, modifier);
    return this;
  }

  /**
   * Reference to a resource (by instance)
   */
  substance(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.reference("substance", id, modifier);
    return this;
  }

  /**
   * Reference to a concept (by class)
   */
  substancecode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.token("substance-code", value, modifier);
    return this;
  }

  /**
   * Reference to a resource (by instance)
   */
  substancedefinition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderIngredient {
    this.builder.reference("substance-definition", id, modifier);
    return this;
  }
}

export type SortOrderIngredient =
  | "for"
  | "-for"
  | "function"
  | "-function"
  | "identifier"
  | "-identifier"
  | "manufacturer"
  | "-manufacturer"
  | "role"
  | "-role"
  | "substance"
  | "-substance"
  | "substance-code"
  | "-substance-code"
  | "substance-definition"
  | "-substance-definition";

class ResourceSearchBuilderInsurancePlan extends BaseResourceSearchBuilder<ResourceSearchBuilderInsurancePlan> {
  readonly resourceType = "InsurancePlan";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderInsurancePlan | SortOrderInsurancePlan[]
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
   */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
   * A city specified in an address
   */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
   * A country specified in an address
   */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
   * A postal code specified in an address
   */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
   * A state specified in an address
   */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
   * A use code specified in an address
   */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
   * Product administrator
   */
  administeredby(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.reference("administered-by", id, modifier);
    return this;
  }

  /**
   * Technical endpoint
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * Any identifier for the organization (not the accreditation issuer's identifier)
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A portion of the organization's name or alias
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * An organization of which this organization forms a part
   */
  ownedby(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.reference("owned-by", id, modifier);
    return this;
  }

  /**
   * A portion of the organization's name using some kind of phonetic matching algorithm
   */
  phonetic(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.string("phonetic", value, modifier);
    return this;
  }

  /**
   * Is the Organization record active
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * A code for the type of organization
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInsurancePlan {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderInsurancePlan =
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "administered-by"
  | "-administered-by"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "owned-by"
  | "-owned-by"
  | "phonetic"
  | "-phonetic"
  | "status"
  | "-status"
  | "type"
  | "-type";

class ResourceSearchBuilderInvoice extends BaseResourceSearchBuilder<ResourceSearchBuilderInvoice> {
  readonly resourceType = "Invoice";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderInvoice | SortOrderInvoice[]
  ): ResourceSearchBuilderInvoice {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Account that is being balanced
   */
  account(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.reference("account", id, modifier);
    return this;
  }

  /**
   * Invoice date / posting date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Business Identifier for item
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Issuing Organization of Invoice
   */
  issuer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.reference("issuer", id, modifier);
    return this;
  }

  /**
   * Individual who was involved
   */
  participant(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.reference("participant", id, modifier);
    return this;
  }

  /**
   * Type of involvement in creation of this Invoice
   */
  participantrole(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("participant-role", value, modifier);
    return this;
  }

  /**
   * Recipient(s) of goods and services
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Recipient of this invoice
   */
  recipient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.reference("recipient", id, modifier);
    return this;
  }

  /**
   * draft | issued | balanced | cancelled | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Recipient(s) of goods and services
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Gross total of this Invoice
   */
  totalgross(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.quantity("totalgross", number, prefix);
    return this;
  }

  /**
   * Net total of this Invoice
   */
  totalnet(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.quantity("totalnet", number, prefix);
    return this;
  }

  /**
   * Type of Invoice
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderInvoice {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderInvoice =
  | "account"
  | "-account"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "issuer"
  | "-issuer"
  | "participant"
  | "-participant"
  | "participant-role"
  | "-participant-role"
  | "patient"
  | "-patient"
  | "recipient"
  | "-recipient"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "totalgross"
  | "-totalgross"
  | "totalnet"
  | "-totalnet"
  | "type"
  | "-type";

class ResourceSearchBuilderLibrary extends BaseResourceSearchBuilder<ResourceSearchBuilderLibrary> {
  readonly resourceType = "Library";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderLibrary | SortOrderLibrary[]
  ): ResourceSearchBuilderLibrary {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * The type of content in the library (e.g. text/cql)
   */
  contenttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("content-type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the library
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the library
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the library
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The library publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the library
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the library is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the library
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the library
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the library
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the library
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the library
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the library
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the module
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The type of the library (e.g. logic-library, model-definition, asset-collection, module-definition)
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the library
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the library
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLibrary {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderLibrary =
  | "composed-of"
  | "-composed-of"
  | "content-type"
  | "-content-type"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "type"
  | "-type"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderLinkage extends BaseResourceSearchBuilder<ResourceSearchBuilderLinkage> {
  readonly resourceType = "Linkage";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderLinkage | SortOrderLinkage[]
  ): ResourceSearchBuilderLinkage {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Author of the Linkage
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * Matches on any item in the Linkage
   */
  item(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.reference("item", id, modifier);
    return this;
  }

  /**
   * Matches on any item in the Linkage with a type of 'source'
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLinkage {
    this.builder.reference("source", id, modifier);
    return this;
  }
}

export type SortOrderLinkage =
  | "author"
  | "-author"
  | "item"
  | "-item"
  | "source"
  | "-source";

class ResourceSearchBuilderList extends BaseResourceSearchBuilder<ResourceSearchBuilderList> {
  readonly resourceType = "List";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderList | SortOrderList[]
  ): ResourceSearchBuilderList {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Why list is empty
   */
  emptyreason(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("empty-reason", value, modifier);
    return this;
  }

  /**
   * Actual entry
   */
  item(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.reference("item", id, modifier);
    return this;
  }

  /**
   * The annotation  - text content (as markdown)
   */
  notes(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.string("notes", value, modifier);
    return this;
  }

  /**
   * Who and/or what defined the list contents (aka Author)
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.reference("source", id, modifier);
    return this;
  }

  /**
   * current | retired | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * If all resources have the same subject
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Descriptive name for the list
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderList {
    this.builder.string("title", value, modifier);
    return this;
  }
}

export type SortOrderList =
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "empty-reason"
  | "-empty-reason"
  | "item"
  | "-item"
  | "notes"
  | "-notes"
  | "source"
  | "-source"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "title"
  | "-title";

class ResourceSearchBuilderLocation extends BaseResourceSearchBuilder<ResourceSearchBuilderLocation> {
  readonly resourceType = "Location";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderLocation | SortOrderLocation[]
  ): ResourceSearchBuilderLocation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A (part of the) address of the location
   */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
   * A city specified in an address
   */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
   * A country specified in an address
   */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
   * A postal code specified in an address
   */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
   * A state specified in an address
   */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
   * A use code specified in an address
   */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
   * Technical endpoints providing access to services operated for the location
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * An identifier for the location
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A portion of the location's name or alias
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Searches for locations (typically bed/room) that have an operational status (e.g. contaminated, housekeeping)
   */
  operationalstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("operational-status", value, modifier);
    return this;
  }

  /**
   * Searches for locations that are managed by the provided organization
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * A location of which this location is a part
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.reference("partof", id, modifier);
    return this;
  }

  /**
   * Searches for locations with a specific kind of status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * A code for the type of location
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderLocation {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderLocation =
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "operational-status"
  | "-operational-status"
  | "organization"
  | "-organization"
  | "partof"
  | "-partof"
  | "status"
  | "-status"
  | "type"
  | "-type";

class ResourceSearchBuilderManufacturedItemDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderManufacturedItemDefinition> {
  readonly resourceType = "ManufacturedItemDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderManufacturedItemDefinition
      | SortOrderManufacturedItemDefinition[]
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product
   */
  doseform(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("dose-form", value, modifier);
    return this;
  }

  /**
   * Unique identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * An ingredient of this item
   */
  ingredient(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderManufacturedItemDefinition {
    this.builder.token("ingredient", value, modifier);
    return this;
  }
}

export type SortOrderManufacturedItemDefinition =
  | "dose-form"
  | "-dose-form"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient";

class ResourceSearchBuilderMeasure extends BaseResourceSearchBuilder<ResourceSearchBuilderMeasure> {
  readonly resourceType = "Measure";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMeasure | SortOrderMeasure[]
  ): ResourceSearchBuilderMeasure {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * A use context assigned to the measure
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the measure
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the measure
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The measure publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the measure
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the measure is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the measure
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the measure
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the measure
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the measure
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the measure
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the measure
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the measure
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the measure
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the measure
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasure {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderMeasure =
  | "composed-of"
  | "-composed-of"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderMeasureReport extends BaseResourceSearchBuilder<ResourceSearchBuilderMeasureReport> {
  readonly resourceType = "MeasureReport";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMeasureReport | SortOrderMeasureReport[]
  ): ResourceSearchBuilderMeasureReport {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The date of the measure report
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * An evaluated resource referenced by the measure report
   */
  evaluatedresource(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.reference("evaluated-resource", id, modifier);
    return this;
  }

  /**
   * External identifier of the measure report to be returned
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The measure to return measure report results for
   */
  measure(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.reference("measure", id, modifier);
    return this;
  }

  /**
   * The identity of a patient to search for individual measure report results for
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The period of the measure report
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * The reporter to return measure report results for
   */
  reporter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.reference("reporter", id, modifier);
    return this;
  }

  /**
   * The status of the measure report
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The identity of a subject to search for individual measure report results for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMeasureReport {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderMeasureReport =
  | "date"
  | "-date"
  | "evaluated-resource"
  | "-evaluated-resource"
  | "identifier"
  | "-identifier"
  | "measure"
  | "-measure"
  | "patient"
  | "-patient"
  | "period"
  | "-period"
  | "reporter"
  | "-reporter"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderMedia extends BaseResourceSearchBuilder<ResourceSearchBuilderMedia> {
  readonly resourceType = "Media";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMedia | SortOrderMedia[]
  ): ResourceSearchBuilderMedia {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Procedure that caused this media to be created
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * When Media was collected
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * Observing Device
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * Encounter associated with media
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Identifier(s) for the image
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The type of acquisition equipment/process
   */
  modality(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("modality", value, modifier);
    return this;
  }

  /**
   * The person who generated the image
   */
  operator(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.reference("operator", id, modifier);
    return this;
  }

  /**
   * Who/What this Media is a record of
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Observed body part
   */
  site(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("site", value, modifier);
    return this;
  }

  /**
   * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Who/What this Media is a record of
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Classification of media as image, video, or audio
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * Imaging view, e.g. Lateral or Antero-posterior
   */
  view(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedia {
    this.builder.token("view", value, modifier);
    return this;
  }
}

export type SortOrderMedia =
  | "based-on"
  | "-based-on"
  | "created"
  | "-created"
  | "device"
  | "-device"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "modality"
  | "-modality"
  | "operator"
  | "-operator"
  | "patient"
  | "-patient"
  | "site"
  | "-site"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "type"
  | "-type"
  | "view"
  | "-view";

class ResourceSearchBuilderMedication extends BaseResourceSearchBuilder<ResourceSearchBuilderMedication> {
  readonly resourceType = "Medication";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMedication | SortOrderMedication[]
  ): ResourceSearchBuilderMedication {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Returns medications in a batch with this expiration date
   */
  expirationdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.date("expiration-date", value, prefix);
    return this;
  }

  /**
   * Returns medications for a specific dose form
   */
  form(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("form", value, modifier);
    return this;
  }

  /**
   * Returns medications with this external identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Returns medications for this ingredient reference
   */
  ingredient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.reference("ingredient", id, modifier);
    return this;
  }

  /**
   * Returns medications for this ingredient code
   */
  ingredientcode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("ingredient-code", value, modifier);
    return this;
  }

  /**
   * Returns medications in a batch with this lot number
   */
  lotnumber(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("lot-number", value, modifier);
    return this;
  }

  /**
   * Returns medications made or sold for this manufacturer
   */
  manufacturer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.reference("manufacturer", id, modifier);
    return this;
  }

  /**
   * Returns medications for this status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedication {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderMedication =
  | "code"
  | "-code"
  | "expiration-date"
  | "-expiration-date"
  | "form"
  | "-form"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient"
  | "ingredient-code"
  | "-ingredient-code"
  | "lot-number"
  | "-lot-number"
  | "manufacturer"
  | "-manufacturer"
  | "status"
  | "-status";

class ResourceSearchBuilderMedicationAdministration extends BaseResourceSearchBuilder<ResourceSearchBuilderMedicationAdministration> {
  readonly resourceType = "MedicationAdministration";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderMedicationAdministration
      | SortOrderMedicationAdministration[]
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Return administrations that share this encounter or episode of care
   */
  context(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("context", id, modifier);
    return this;
  }

  /**
   * Return administrations with this administration device identity
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * Date administration happened (or did not happen)
   */
  effectivetime(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.date("effective-time", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): Return administrations of this medication resource
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine resource
* [MedicationRequest](medicationrequest.html): Return prescriptions for this medication reference
* [MedicationStatement](medicationstatement.html): Return statements of this medication reference

    */
  medication(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("medication", id, modifier);
    return this;
  }

  /**
   * The identity of the individual who administered the medication
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Reasons for administering the medication
   */
  reasongiven(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("reason-given", value, modifier);
    return this;
  }

  /**
   * Reasons for not administering the medication
   */
  reasonnotgiven(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("reason-not-given", value, modifier);
    return this;
  }

  /**
   * The identity of a request to list administrations from
   */
  request(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("request", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): MedicationAdministration event status (for example one of active/paused/completed/nullified)
* [MedicationDispense](medicationdispense.html): Returns dispenses with a specified dispense status
* [MedicationRequest](medicationrequest.html): Status of the prescription
* [MedicationStatement](medicationstatement.html): Return statements that match the given status

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The identity of the individual or group to list administrations for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationAdministration {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderMedicationAdministration =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "context"
  | "-context"
  | "device"
  | "-device"
  | "effective-time"
  | "-effective-time"
  | "medication"
  | "-medication"
  | "performer"
  | "-performer"
  | "reason-given"
  | "-reason-given"
  | "reason-not-given"
  | "-reason-not-given"
  | "request"
  | "-request"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderMedicationDispense extends BaseResourceSearchBuilder<ResourceSearchBuilderMedicationDispense> {
  readonly resourceType = "MedicationDispense";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMedicationDispense | SortOrderMedicationDispense[]
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): Return administrations of this medication resource
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine resource
* [MedicationRequest](medicationrequest.html): Return prescriptions for this medication reference
* [MedicationStatement](medicationstatement.html): Return statements of this medication reference

    */
  medication(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("medication", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): MedicationAdministration event status (for example one of active/paused/completed/nullified)
* [MedicationDispense](medicationdispense.html): Returns dispenses with a specified dispense status
* [MedicationRequest](medicationrequest.html): Status of the prescription
* [MedicationStatement](medicationstatement.html): Return statements that match the given status

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Returns dispenses with a specific context (episode or episode of care)
   */
  context(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("context", id, modifier);
    return this;
  }

  /**
   * Returns dispenses that should be sent to a specific destination
   */
  destination(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("destination", id, modifier);
    return this;
  }

  /**
   * Returns dispenses performed by a specific individual
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationDispense](medicationdispense.html): The identity of a prescription to list dispenses from

    */
  prescription(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("prescription", id, modifier);
    return this;
  }

  /**
   * The identity of a receiver to list dispenses for
   */
  receiver(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("receiver", id, modifier);
    return this;
  }

  /**
   * Returns dispenses with the specified responsible party
   */
  responsibleparty(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("responsibleparty", id, modifier);
    return this;
  }

  /**
   * The identity of a patient for whom to list dispenses
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Returns dispenses of a specific type
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * Returns dispenses handed over on this date
   */
  whenhandedover(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.date("whenhandedover", value, prefix);
    return this;
  }

  /**
   * Returns dispenses prepared on this date
   */
  whenprepared(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationDispense {
    this.builder.date("whenprepared", value, prefix);
    return this;
  }
}

export type SortOrderMedicationDispense =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "medication"
  | "-medication"
  | "status"
  | "-status"
  | "context"
  | "-context"
  | "destination"
  | "-destination"
  | "performer"
  | "-performer"
  | "prescription"
  | "-prescription"
  | "receiver"
  | "-receiver"
  | "responsibleparty"
  | "-responsibleparty"
  | "subject"
  | "-subject"
  | "type"
  | "-type"
  | "whenhandedover"
  | "-whenhandedover"
  | "whenprepared"
  | "-whenprepared";

class ResourceSearchBuilderMedicationKnowledge extends BaseResourceSearchBuilder<ResourceSearchBuilderMedicationKnowledge> {
  readonly resourceType = "MedicationKnowledge";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMedicationKnowledge | SortOrderMedicationKnowledge[]
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Specific category assigned to the medication
   */
  classification(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("classification", value, modifier);
    return this;
  }

  /**
   * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification)
   */
  classificationtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("classification-type", value, modifier);
    return this;
  }

  /**
   * Code that identifies this medication
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * powder | tablets | capsule +
   */
  doseform(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("doseform", value, modifier);
    return this;
  }

  /**
   * Medication(s) or substance(s) contained in the medication
   */
  ingredient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.reference("ingredient", id, modifier);
    return this;
  }

  /**
   * Medication(s) or substance(s) contained in the medication
   */
  ingredientcode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("ingredient-code", value, modifier);
    return this;
  }

  /**
   * Manufacturer of the item
   */
  manufacturer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.reference("manufacturer", id, modifier);
    return this;
  }

  /**
   * Name of the reviewing program
   */
  monitoringprogramname(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("monitoring-program-name", value, modifier);
    return this;
  }

  /**
   * Type of program under which the medication is monitored
   */
  monitoringprogramtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("monitoring-program-type", value, modifier);
    return this;
  }

  /**
   * Associated documentation about the medication
   */
  monograph(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.reference("monograph", id, modifier);
    return this;
  }

  /**
   * The category of medication document
   */
  monographtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("monograph-type", value, modifier);
    return this;
  }

  /**
   * The source or owner for the price information
   */
  sourcecost(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("source-cost", value, modifier);
    return this;
  }

  /**
   * active | inactive | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationKnowledge {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderMedicationKnowledge =
  | "classification"
  | "-classification"
  | "classification-type"
  | "-classification-type"
  | "code"
  | "-code"
  | "doseform"
  | "-doseform"
  | "ingredient"
  | "-ingredient"
  | "ingredient-code"
  | "-ingredient-code"
  | "manufacturer"
  | "-manufacturer"
  | "monitoring-program-name"
  | "-monitoring-program-name"
  | "monitoring-program-type"
  | "-monitoring-program-type"
  | "monograph"
  | "-monograph"
  | "monograph-type"
  | "-monograph-type"
  | "source-cost"
  | "-source-cost"
  | "status"
  | "-status";

class ResourceSearchBuilderMedicationRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderMedicationRequest> {
  readonly resourceType = "MedicationRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMedicationRequest | SortOrderMedicationRequest[]
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): Return administrations of this medication resource
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine resource
* [MedicationRequest](medicationrequest.html): Return prescriptions for this medication reference
* [MedicationStatement](medicationstatement.html): Return statements of this medication reference

    */
  medication(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("medication", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): MedicationAdministration event status (for example one of active/paused/completed/nullified)
* [MedicationDispense](medicationdispense.html): Returns dispenses with a specified dispense status
* [MedicationRequest](medicationrequest.html): Status of the prescription
* [MedicationStatement](medicationstatement.html): Return statements that match the given status

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Return prescriptions written on this date
   */
  authoredon(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.date("authoredon", value, prefix);
    return this;
  }

  /**
   * Returns prescriptions with different categories
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationRequest](medicationrequest.html): Returns medication request to be administered on a specific date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationRequest](medicationrequest.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Returns prescriptions intended to be dispensed by this Organization
   */
  intendeddispenser(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("intended-dispenser", id, modifier);
    return this;
  }

  /**
   * Returns the intended performer of the administration of the medication request
   */
  intendedperformer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("intended-performer", id, modifier);
    return this;
  }

  /**
   * Returns requests for a specific type of performer
   */
  intendedperformertype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("intended-performertype", value, modifier);
    return this;
  }

  /**
   * Returns prescriptions with different intents
   */
  intent(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("intent", value, modifier);
    return this;
  }

  /**
   * Returns prescriptions with different priorities
   */
  priority(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.token("priority", value, modifier);
    return this;
  }

  /**
   * Returns prescriptions prescribed by this prescriber
   */
  requester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("requester", id, modifier);
    return this;
  }

  /**
   * The identity of a patient to list orders  for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationRequest {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderMedicationRequest =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "medication"
  | "-medication"
  | "status"
  | "-status"
  | "authoredon"
  | "-authoredon"
  | "category"
  | "-category"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "intended-dispenser"
  | "-intended-dispenser"
  | "intended-performer"
  | "-intended-performer"
  | "intended-performertype"
  | "-intended-performertype"
  | "intent"
  | "-intent"
  | "priority"
  | "-priority"
  | "requester"
  | "-requester"
  | "subject"
  | "-subject";

class ResourceSearchBuilderMedicationStatement extends BaseResourceSearchBuilder<ResourceSearchBuilderMedicationStatement> {
  readonly resourceType = "MedicationStatement";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMedicationStatement | SortOrderMedicationStatement[]
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): Return administrations of this medication resource
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine resource
* [MedicationRequest](medicationrequest.html): Return prescriptions for this medication reference
* [MedicationStatement](medicationstatement.html): Return statements of this medication reference

    */
  medication(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.reference("medication", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [MedicationAdministration](medicationadministration.html): MedicationAdministration event status (for example one of active/paused/completed/nullified)
* [MedicationDispense](medicationdispense.html): Returns dispenses with a specified dispense status
* [MedicationRequest](medicationrequest.html): Status of the prescription
* [MedicationStatement](medicationstatement.html): Return statements that match the given status

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Returns statements of this category of medicationstatement
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Returns statements for a specific context (episode or episode of Care).
   */
  context(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.reference("context", id, modifier);
    return this;
  }

  /**
   * Date when patient was taking (or not taking) the medication
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * Returns statements that are part of another event.
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * Who or where the information in the statement came from
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.reference("source", id, modifier);
    return this;
  }

  /**
   * The identity of a patient, animal or group to list statements for
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicationStatement {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderMedicationStatement =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "medication"
  | "-medication"
  | "status"
  | "-status"
  | "category"
  | "-category"
  | "context"
  | "-context"
  | "effective"
  | "-effective"
  | "part-of"
  | "-part-of"
  | "source"
  | "-source"
  | "subject"
  | "-subject";

class ResourceSearchBuilderMedicinalProductDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderMedicinalProductDefinition> {
  readonly resourceType = "MedicinalProductDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderMedicinalProductDefinition
      | SortOrderMedicinalProductDefinition[]
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import"
   */
  characteristic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("characteristic", value, modifier);
    return this;
  }

  /**
   * A category for the characteristic
   */
  characteristictype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("characteristic-type", value, modifier);
    return this;
  }

  /**
   * A product specific contact, person (in a role), or an organization
   */
  contact(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.reference("contact", id, modifier);
    return this;
  }

  /**
   * If this medicine applies to human or veterinary uses
   */
  domain(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("domain", value, modifier);
    return this;
  }

  /**
   * Business identifier for this product. Could be an MPID
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * An ingredient of this product
   */
  ingredient(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("ingredient", value, modifier);
    return this;
  }

  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File)
   */
  masterfile(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.reference("master-file", id, modifier);
    return this;
  }

  /**
   * The full product name
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Language code for this name
   */
  namelanguage(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("name-language", value, modifier);
    return this;
  }

  /**
   * Allows the product to be classified by various systems
   */
  productclassification(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("product-classification", value, modifier);
    return this;
  }

  /**
   * The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Regulatory type, e.g. Investigational or Authorized
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMedicinalProductDefinition {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderMedicinalProductDefinition =
  | "characteristic"
  | "-characteristic"
  | "characteristic-type"
  | "-characteristic-type"
  | "contact"
  | "-contact"
  | "domain"
  | "-domain"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient"
  | "master-file"
  | "-master-file"
  | "name"
  | "-name"
  | "name-language"
  | "-name-language"
  | "product-classification"
  | "-product-classification"
  | "status"
  | "-status"
  | "type"
  | "-type";

class ResourceSearchBuilderMessageDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderMessageDefinition> {
  readonly resourceType = "MessageDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMessageDefinition | SortOrderMessageDefinition[]
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for the code system
* [ConceptMap](conceptmap.html): External identifier for the concept map
* [MessageDefinition](messagedefinition.html): External identifier for the message definition
* [StructureDefinition](structuredefinition.html): External identifier for the structure definition
* [StructureMap](structuremap.html): External identifier for the structure map
* [ValueSet](valueset.html): External identifier for the value set

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The behavior associated with the message
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * The event that triggers the message or link to the event definition.
   */
  event(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("event", value, modifier);
    return this;
  }

  /**
   * A resource that is a permitted focus of the message
   */
  focus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.token("focus", value, modifier);
    return this;
  }

  /**
   * A resource that is the parent of the definition
   */
  parent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageDefinition {
    this.builder.reference("parent", id, modifier);
    return this;
  }
}

export type SortOrderMessageDefinition =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "identifier"
  | "-identifier"
  | "category"
  | "-category"
  | "event"
  | "-event"
  | "focus"
  | "-focus"
  | "parent"
  | "-parent";

class ResourceSearchBuilderMessageHeader extends BaseResourceSearchBuilder<ResourceSearchBuilderMessageHeader> {
  readonly resourceType = "MessageHeader";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMessageHeader | SortOrderMessageHeader[]
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The source of the decision
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * ok | transient-error | fatal-error
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Name of system
   */
  destination(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("destination", value, modifier);
    return this;
  }

  /**
   * Actual destination address or id
   */
  destinationuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.uri("destination-uri", value, modifier);
    return this;
  }

  /**
   * The source of the data entry
   */
  enterer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("enterer", id, modifier);
    return this;
  }

  /**
   * Code for the event this message represents or link to event definition
   */
  event(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("event", value, modifier);
    return this;
  }

  /**
   * The actual content of the message
   */
  focus(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("focus", id, modifier);
    return this;
  }

  /**
   * Intended "real-world" recipient for the data
   */
  receiver(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("receiver", id, modifier);
    return this;
  }

  /**
   * Id of original message
   */
  responseid(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.token("response-id", value, modifier);
    return this;
  }

  /**
   * Final responsibility for event
   */
  responsible(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("responsible", id, modifier);
    return this;
  }

  /**
   * Real world sender of the message
   */
  sender(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("sender", id, modifier);
    return this;
  }

  /**
   * Name of system
   */
  source(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.string("source", value, modifier);
    return this;
  }

  /**
   * Actual message source address or id
   */
  sourceuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.uri("source-uri", value, modifier);
    return this;
  }

  /**
   * Particular delivery destination within the destination
   */
  target(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMessageHeader {
    this.builder.reference("target", id, modifier);
    return this;
  }
}

export type SortOrderMessageHeader =
  | "author"
  | "-author"
  | "code"
  | "-code"
  | "destination"
  | "-destination"
  | "destination-uri"
  | "-destination-uri"
  | "enterer"
  | "-enterer"
  | "event"
  | "-event"
  | "focus"
  | "-focus"
  | "receiver"
  | "-receiver"
  | "response-id"
  | "-response-id"
  | "responsible"
  | "-responsible"
  | "sender"
  | "-sender"
  | "source"
  | "-source"
  | "source-uri"
  | "-source-uri"
  | "target"
  | "-target";

class ResourceSearchBuilderMolecularSequence extends BaseResourceSearchBuilder<ResourceSearchBuilderMolecularSequence> {
  readonly resourceType = "MolecularSequence";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderMolecularSequence | SortOrderMolecularSequence[]
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Chromosome number of the reference sequence
   */
  chromosome(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("chromosome", value, modifier);
    return this;
  }

  /**
   * The unique identity for a particular sequence
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The subject that the observation is about
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Reference Sequence of the sequence
   */
  referenceseqid(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("referenceseqid", value, modifier);
    return this;
  }

  /**
   * Amino Acid Sequence/ DNA Sequence / RNA Sequence
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * End position (0-based exclusive, which menas the acid at this position will not be included, 1-based inclusive, which means the acid at this position will be included) of the variant.
   */
  variantend(
    value: Parameters<FhirSearchBuilder["number"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.number("variant-end", value, prefix);
    return this;
  }

  /**
   * Start position (0-based inclusive, 1-based inclusive, that means the nucleic acid or amino acid at this position will be included) of the variant.
   */
  variantstart(
    value: Parameters<FhirSearchBuilder["number"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.number("variant-start", value, prefix);
    return this;
  }

  /**
   * End position (0-based exclusive, which menas the acid at this position will not be included, 1-based inclusive, which means the acid at this position will be included) of the reference sequence.
   */
  windowend(
    value: Parameters<FhirSearchBuilder["number"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.number("window-end", value, prefix);
    return this;
  }

  /**
   * Start position (0-based inclusive, 1-based inclusive, that means the nucleic acid or amino acid at this position will be included) of the reference sequence.
   */
  windowstart(
    value: Parameters<FhirSearchBuilder["number"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderMolecularSequence {
    this.builder.number("window-start", value, prefix);
    return this;
  }
}

export type SortOrderMolecularSequence =
  | "chromosome"
  | "-chromosome"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "referenceseqid"
  | "-referenceseqid"
  | "type"
  | "-type"
  | "variant-end"
  | "-variant-end"
  | "variant-start"
  | "-variant-start"
  | "window-end"
  | "-window-end"
  | "window-start"
  | "-window-start";

class ResourceSearchBuilderNamingSystem extends BaseResourceSearchBuilder<ResourceSearchBuilderNamingSystem> {
  readonly resourceType = "NamingSystem";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderNamingSystem | SortOrderNamingSystem[]
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Name of an individual to contact
   */
  contact(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("contact", value, modifier);
    return this;
  }

  /**
   * oid | uuid | uri | other
   */
  idtype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("id-type", value, modifier);
    return this;
  }

  /**
   * codesystem | identifier | root
   */
  kind(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("kind", value, modifier);
    return this;
  }

  /**
   * When is identifier valid?
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * Who maintains system namespace?
   */
  responsible(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("responsible", value, modifier);
    return this;
  }

  /**
   * Contact details for individual or organization
   */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("telecom", value, modifier);
    return this;
  }

  /**
   * e.g. driver,  provider,  patient, bank etc.
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * The unique identifier
   */
  value(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNamingSystem {
    this.builder.string("value", value, modifier);
    return this;
  }
}

export type SortOrderNamingSystem =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "contact"
  | "-contact"
  | "id-type"
  | "-id-type"
  | "kind"
  | "-kind"
  | "period"
  | "-period"
  | "responsible"
  | "-responsible"
  | "telecom"
  | "-telecom"
  | "type"
  | "-type"
  | "value"
  | "-value";

class ResourceSearchBuilderNutritionOrder extends BaseResourceSearchBuilder<ResourceSearchBuilderNutritionOrder> {
  readonly resourceType = "NutritionOrder";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderNutritionOrder | SortOrderNutritionOrder[]
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Type of module component to add to the feeding
   */
  additive(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("additive", value, modifier);
    return this;
  }

  /**
   * Return nutrition orders requested on this date
   */
  datetime(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.date("datetime", value, prefix);
    return this;
  }

  /**
   * Type of enteral or infant formula
   */
  formula(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("formula", value, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * Type of diet that can be consumed orally (i.e., take via the mouth).
   */
  oraldiet(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("oraldiet", value, modifier);
    return this;
  }

  /**
   * The identity of the provider who placed the nutrition order
   */
  provider(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.reference("provider", id, modifier);
    return this;
  }

  /**
   * Status of the nutrition order.
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Type of supplement product requested
   */
  supplement(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionOrder {
    this.builder.token("supplement", value, modifier);
    return this;
  }
}

export type SortOrderNutritionOrder =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "additive"
  | "-additive"
  | "datetime"
  | "-datetime"
  | "formula"
  | "-formula"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "oraldiet"
  | "-oraldiet"
  | "provider"
  | "-provider"
  | "status"
  | "-status"
  | "supplement"
  | "-supplement";

class ResourceSearchBuilderNutritionProduct extends BaseResourceSearchBuilder<ResourceSearchBuilderNutritionProduct> {
  readonly resourceType = "NutritionProduct";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderNutritionProduct | SortOrderNutritionProduct[]
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The identifier for the physical instance, typically a serial number
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * active | inactive | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderNutritionProduct {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderNutritionProduct =
  | "identifier"
  | "-identifier"
  | "status"
  | "-status";

class ResourceSearchBuilderObservation extends BaseResourceSearchBuilder<ResourceSearchBuilderObservation> {
  readonly resourceType = "Observation";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderObservation | SortOrderObservation[]
  ): ResourceSearchBuilderObservation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Reference to the service request.
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * The classification of the type of observation
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * The code of the observation type or component type
   */
  combocode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("combo-code", value, modifier);
    return this;
  }

  /**
   * The reason why the expected value in the element Observation.value[x] or Observation.component.value[x] is missing.
   */
  combodataabsentreason(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("combo-data-absent-reason", value, modifier);
    return this;
  }

  /**
   * The value or component value of the observation, if the value is a CodeableConcept
   */
  combovalueconcept(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("combo-value-concept", value, modifier);
    return this;
  }

  /**
   * The value or component value of the observation, if the value is a Quantity, or a SampledData (just search on the bounds of the values in sampled data)
   */
  combovaluequantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.quantity("combo-value-quantity", number, prefix);
    return this;
  }

  /**
   * The component code of the observation type
   */
  componentcode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("component-code", value, modifier);
    return this;
  }

  /**
   * The reason why the expected value in the element Observation.component.value[x] is missing.
   */
  componentdataabsentreason(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("component-data-absent-reason", value, modifier);
    return this;
  }

  /**
   * The value of the component observation, if the value is a CodeableConcept
   */
  componentvalueconcept(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("component-value-concept", value, modifier);
    return this;
  }

  /**
   * The value of the component observation, if the value is a Quantity, or a SampledData (just search on the bounds of the values in sampled data)
   */
  componentvaluequantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.quantity("component-value-quantity", number, prefix);
    return this;
  }

  /**
   * The reason why the expected value in the element Observation.value[x] is missing.
   */
  dataabsentreason(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("data-absent-reason", value, modifier);
    return this;
  }

  /**
   * Related measurements the observation is made from
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The Device that generated the observation data.
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * The focus of an observation when the focus is not the patient of record.
   */
  focus(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("focus", id, modifier);
    return this;
  }

  /**
   * Related resource that belongs to the Observation group
   */
  hasmember(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("has-member", id, modifier);
    return this;
  }

  /**
   * The method used for the observation
   */
  method(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("method", value, modifier);
    return this;
  }

  /**
   * Part of referenced event
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * Who performed the observation
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Specimen used for this observation
   */
  specimen(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("specimen", id, modifier);
    return this;
  }

  /**
   * The status of the observation
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The subject that the observation is about
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * The value of the observation, if the value is a CodeableConcept
   */
  valueconcept(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.token("value-concept", value, modifier);
    return this;
  }

  /**
   * The value of the observation, if the value is a date or period of time
   */
  valuedate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.date("value-date", value, prefix);
    return this;
  }

  /**
   * The value of the observation, if the value is a Quantity, or a SampledData (just search on the bounds of the values in sampled data)
   */
  valuequantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.quantity("value-quantity", number, prefix);
    return this;
  }

  /**
   * The value of the observation, if the value is a string, and also searches in CodeableConcept.text
   */
  valuestring(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservation {
    this.builder.string("value-string", value, modifier);
    return this;
  }
}

export type SortOrderObservation =
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "combo-code"
  | "-combo-code"
  | "combo-data-absent-reason"
  | "-combo-data-absent-reason"
  | "combo-value-concept"
  | "-combo-value-concept"
  | "combo-value-quantity"
  | "-combo-value-quantity"
  | "component-code"
  | "-component-code"
  | "component-data-absent-reason"
  | "-component-data-absent-reason"
  | "component-value-concept"
  | "-component-value-concept"
  | "component-value-quantity"
  | "-component-value-quantity"
  | "data-absent-reason"
  | "-data-absent-reason"
  | "derived-from"
  | "-derived-from"
  | "device"
  | "-device"
  | "focus"
  | "-focus"
  | "has-member"
  | "-has-member"
  | "method"
  | "-method"
  | "part-of"
  | "-part-of"
  | "performer"
  | "-performer"
  | "specimen"
  | "-specimen"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "value-concept"
  | "-value-concept"
  | "value-date"
  | "-value-date"
  | "value-quantity"
  | "-value-quantity"
  | "value-string"
  | "-value-string";

class ResourceSearchBuilderObservationDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderObservationDefinition> {
  readonly resourceType = "ObservationDefinition";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderObservationDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderOperationDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderOperationDefinition> {
  readonly resourceType = "OperationDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderOperationDefinition | SortOrderOperationDefinition[]
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
   * Marks this as a profile of the base
   */
  base(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.reference("base", id, modifier);
    return this;
  }

  /**
   * Name used to invoke the operation
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Validation information for in parameters
   */
  inputprofile(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.reference("input-profile", id, modifier);
    return this;
  }

  /**
   * Invoke on an instance?
   */
  instance(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("instance", value, modifier);
    return this;
  }

  /**
   * operation | query
   */
  kind(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("kind", value, modifier);
    return this;
  }

  /**
   * Validation information for out parameters
   */
  outputprofile(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.reference("output-profile", id, modifier);
    return this;
  }

  /**
   * Invoke at the system level?
   */
  system(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("system", value, modifier);
    return this;
  }

  /**
   * Invoke at the type level?
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationDefinition {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderOperationDefinition =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "base"
  | "-base"
  | "code"
  | "-code"
  | "input-profile"
  | "-input-profile"
  | "instance"
  | "-instance"
  | "kind"
  | "-kind"
  | "output-profile"
  | "-output-profile"
  | "system"
  | "-system"
  | "type"
  | "-type";

class ResourceSearchBuilderOperationOutcome extends BaseResourceSearchBuilder<ResourceSearchBuilderOperationOutcome> {
  readonly resourceType = "OperationOutcome";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOperationOutcome {
    this.builder.token("_type", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderOrganization extends BaseResourceSearchBuilder<ResourceSearchBuilderOrganization> {
  readonly resourceType = "Organization";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderOrganization | SortOrderOrganization[]
  ): ResourceSearchBuilderOrganization {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Is the Organization record active
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
   */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
   * A city specified in an address
   */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
   * A country specified in an address
   */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
   * A postal code specified in an address
   */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
   * A state specified in an address
   */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
   * A use code specified in an address
   */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
   * Technical endpoints providing access to services operated for the organization
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * Any identifier for the organization (not the accreditation issuer's identifier)
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A portion of the organization's name or alias
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * An organization of which this organization forms a part
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.reference("partof", id, modifier);
    return this;
  }

  /**
   * A portion of the organization's name using some kind of phonetic matching algorithm
   */
  phonetic(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.string("phonetic", value, modifier);
    return this;
  }

  /**
   * A code for the type of organization
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganization {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderOrganization =
  | "active"
  | "-active"
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "partof"
  | "-partof"
  | "phonetic"
  | "-phonetic"
  | "type"
  | "-type";

class ResourceSearchBuilderOrganizationAffiliation extends BaseResourceSearchBuilder<ResourceSearchBuilderOrganizationAffiliation> {
  readonly resourceType = "OrganizationAffiliation";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderOrganizationAffiliation
      | SortOrderOrganizationAffiliation[]
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Whether this organization affiliation record is in active use
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * The period during which the participatingOrganization is affiliated with the primary organization
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * A value in an email contact
   */
  email(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("email", value, modifier);
    return this;
  }

  /**
   * Technical endpoints providing access to services operated for this role
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * An organization affiliation's Identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The location(s) at which the role occurs
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined)
   */
  network(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.reference("network", id, modifier);
    return this;
  }

  /**
   * The organization that provides services to the primary organization
   */
  participatingorganization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.reference("participating-organization", id, modifier);
    return this;
  }

  /**
   * A value in a phone contact
   */
  phone(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("phone", value, modifier);
    return this;
  }

  /**
   * The organization that receives the services from the participating organization
   */
  primaryorganization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.reference("primary-organization", id, modifier);
    return this;
  }

  /**
   * Definition of the role the participatingOrganization plays
   */
  role(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("role", value, modifier);
    return this;
  }

  /**
   * Healthcare services provided through the role
   */
  service(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.reference("service", id, modifier);
    return this;
  }

  /**
   * Specific specialty of the participatingOrganization in the context of the role
   */
  specialty(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("specialty", value, modifier);
    return this;
  }

  /**
   * The value in any kind of contact
   */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderOrganizationAffiliation {
    this.builder.token("telecom", value, modifier);
    return this;
  }
}

export type SortOrderOrganizationAffiliation =
  | "active"
  | "-active"
  | "date"
  | "-date"
  | "email"
  | "-email"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "network"
  | "-network"
  | "participating-organization"
  | "-participating-organization"
  | "phone"
  | "-phone"
  | "primary-organization"
  | "-primary-organization"
  | "role"
  | "-role"
  | "service"
  | "-service"
  | "specialty"
  | "-specialty"
  | "telecom"
  | "-telecom";

class ResourceSearchBuilderPackagedProductDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderPackagedProductDefinition> {
  readonly resourceType = "PackagedProductDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderPackagedProductDefinition
      | SortOrderPackagedProductDefinition[]
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A biologically derived product within this packaged product
   */
  biological(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("biological", id, modifier);
    return this;
  }

  /**
   * Any of the contained items within this packaged product
   */
  containeditem(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("contained-item", id, modifier);
    return this;
  }

  /**
   * A device within this packaged product
   */
  device(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("device", id, modifier);
    return this;
  }

  /**
   * Unique identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A manufactured item of medication within this packaged product
   */
  manufactureditem(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("manufactured-item", id, modifier);
    return this;
  }

  /**
   * A manufactured item of medication within this packaged product
   */
  medication(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("medication", id, modifier);
    return this;
  }

  /**
   * A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc
   */
  name(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("name", value, modifier);
    return this;
  }

  /**
   * A nutrition product within this packaged product
   */
  nutrition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("nutrition", id, modifier);
    return this;
  }

  /**
   * A complete packaged product within this packaged product
   */
  package(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("package", id, modifier);
    return this;
  }

  /**
   * The product that this is a pack for
   */
  packagefor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.reference("package-for", id, modifier);
    return this;
  }

  /**
   * The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPackagedProductDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderPackagedProductDefinition =
  | "biological"
  | "-biological"
  | "contained-item"
  | "-contained-item"
  | "device"
  | "-device"
  | "identifier"
  | "-identifier"
  | "manufactured-item"
  | "-manufactured-item"
  | "medication"
  | "-medication"
  | "name"
  | "-name"
  | "nutrition"
  | "-nutrition"
  | "package"
  | "-package"
  | "package-for"
  | "-package-for"
  | "status"
  | "-status";

class ResourceSearchBuilderPatient extends BaseResourceSearchBuilder<ResourceSearchBuilderPatient> {
  readonly resourceType = "Patient";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderPatient | SortOrderPatient[]
  ): ResourceSearchBuilderPatient {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Whether the patient record is active
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Person](person.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Practitioner](practitioner.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text

    */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A city specified in an address
* [Person](person.html): A city specified in an address
* [Practitioner](practitioner.html): A city specified in an address
* [RelatedPerson](relatedperson.html): A city specified in an address

    */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A country specified in an address
* [Person](person.html): A country specified in an address
* [Practitioner](practitioner.html): A country specified in an address
* [RelatedPerson](relatedperson.html): A country specified in an address

    */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an address
* [Person](person.html): A postal code specified in an address
* [Practitioner](practitioner.html): A postalCode specified in an address
* [RelatedPerson](relatedperson.html): A postal code specified in an address

    */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A state specified in an address
* [Person](person.html): A state specified in an address
* [Practitioner](practitioner.html): A state specified in an address
* [RelatedPerson](relatedperson.html): A state specified in an address

    */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A use code specified in an address
* [Person](person.html): A use code specified in an address
* [Practitioner](practitioner.html): A use code specified in an address
* [RelatedPerson](relatedperson.html): A use code specified in an address

    */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The patient's date of birth
* [Person](person.html): The person's date of birth
* [RelatedPerson](relatedperson.html): The Related Person's date of birth

    */
  birthdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.date("birthdate", value, prefix);
    return this;
  }

  /**
   * The date of death has been provided and satisfies this search value
   */
  deathdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.date("death-date", value, prefix);
    return this;
  }

  /**
   * This patient has been marked as deceased, or has a death date entered
   */
  deceased(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("deceased", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in an email contact
* [Person](person.html): A value in an email contact
* [Practitioner](practitioner.html): A value in an email contact
* [PractitionerRole](practitionerrole.html): A value in an email contact
* [RelatedPerson](relatedperson.html): A value in an email contact

    */
  email(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("email", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of the family name of the patient
* [Practitioner](practitioner.html): A portion of the family name

    */
  family(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("family", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
* [Person](person.html): The gender of the person
* [Practitioner](practitioner.html): Gender of the practitioner
* [RelatedPerson](relatedperson.html): Gender of the related person

    */
  gender(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("gender", value, modifier);
    return this;
  }

  /**
   * Patient's nominated general practitioner, not the organization that manages the record
   */
  generalpractitioner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.reference("general-practitioner", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of the given name of the patient
* [Practitioner](practitioner.html): A portion of the given name

    */
  given(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("given", value, modifier);
    return this;
  }

  /**
   * A patient identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Language code (irrespective of use value)
   */
  language(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("language", value, modifier);
    return this;
  }

  /**
   * All patients linked to the given patient
   */
  link(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.reference("link", id, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in the HumanName, including family, give, prefix, suffix, suffix, and/or text
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * The organization that is the custodian of the patient record
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
* [Person](person.html): A value in a phone contact
* [Practitioner](practitioner.html): A value in a phone contact
* [PractitionerRole](practitionerrole.html): A value in a phone contact
* [RelatedPerson](relatedperson.html): A value in a phone contact

    */
  phone(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("phone", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [Person](person.html): A portion of name using some kind of phonetic matching algorithm
* [Practitioner](practitioner.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [RelatedPerson](relatedperson.html): A portion of name using some kind of phonetic matching algorithm

    */
  phonetic(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.string("phonetic", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The value in any kind of telecom details of the patient
* [Person](person.html): The value in any kind of contact
* [Practitioner](practitioner.html): The value in any kind of contact
* [PractitionerRole](practitionerrole.html): The value in any kind of contact
* [RelatedPerson](relatedperson.html): The value in any kind of contact

    */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPatient {
    this.builder.token("telecom", value, modifier);
    return this;
  }
}

export type SortOrderPatient =
  | "active"
  | "-active"
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "birthdate"
  | "-birthdate"
  | "death-date"
  | "-death-date"
  | "deceased"
  | "-deceased"
  | "email"
  | "-email"
  | "family"
  | "-family"
  | "gender"
  | "-gender"
  | "general-practitioner"
  | "-general-practitioner"
  | "given"
  | "-given"
  | "identifier"
  | "-identifier"
  | "language"
  | "-language"
  | "link"
  | "-link"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom";

class ResourceSearchBuilderPaymentNotice extends BaseResourceSearchBuilder<ResourceSearchBuilderPaymentNotice> {
  readonly resourceType = "PaymentNotice";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderPaymentNotice | SortOrderPaymentNotice[]
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Creation date fro the notice
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * The business identifier of the notice
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The type of payment notice
   */
  paymentstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("payment-status", value, modifier);
    return this;
  }

  /**
   * The reference to the provider
   */
  provider(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.reference("provider", id, modifier);
    return this;
  }

  /**
   * The Claim
   */
  request(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.reference("request", id, modifier);
    return this;
  }

  /**
   * The ClaimResponse
   */
  response(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.reference("response", id, modifier);
    return this;
  }

  /**
   * The status of the payment notice
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentNotice {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderPaymentNotice =
  | "created"
  | "-created"
  | "identifier"
  | "-identifier"
  | "payment-status"
  | "-payment-status"
  | "provider"
  | "-provider"
  | "request"
  | "-request"
  | "response"
  | "-response"
  | "status"
  | "-status";

class ResourceSearchBuilderPaymentReconciliation extends BaseResourceSearchBuilder<ResourceSearchBuilderPaymentReconciliation> {
  readonly resourceType = "PaymentReconciliation";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderPaymentReconciliation
      | SortOrderPaymentReconciliation[]
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The creation date
   */
  created(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.date("created", value, prefix);
    return this;
  }

  /**
   * The contents of the disposition message
   */
  disposition(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.string("disposition", value, modifier);
    return this;
  }

  /**
   * The business identifier of the ExplanationOfBenefit
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The processing outcome
   */
  outcome(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("outcome", value, modifier);
    return this;
  }

  /**
   * The organization which generated this resource
   */
  paymentissuer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.reference("payment-issuer", id, modifier);
    return this;
  }

  /**
   * The reference to the claim
   */
  request(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.reference("request", id, modifier);
    return this;
  }

  /**
   * The reference to the provider who submitted the claim
   */
  requestor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.reference("requestor", id, modifier);
    return this;
  }

  /**
   * The status of the payment reconciliation
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPaymentReconciliation {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderPaymentReconciliation =
  | "created"
  | "-created"
  | "disposition"
  | "-disposition"
  | "identifier"
  | "-identifier"
  | "outcome"
  | "-outcome"
  | "payment-issuer"
  | "-payment-issuer"
  | "request"
  | "-request"
  | "requestor"
  | "-requestor"
  | "status"
  | "-status";

class ResourceSearchBuilderPerson extends BaseResourceSearchBuilder<ResourceSearchBuilderPerson> {
  readonly resourceType = "Person";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderPerson | SortOrderPerson[]
  ): ResourceSearchBuilderPerson {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Person](person.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Practitioner](practitioner.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text

    */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A city specified in an address
* [Person](person.html): A city specified in an address
* [Practitioner](practitioner.html): A city specified in an address
* [RelatedPerson](relatedperson.html): A city specified in an address

    */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A country specified in an address
* [Person](person.html): A country specified in an address
* [Practitioner](practitioner.html): A country specified in an address
* [RelatedPerson](relatedperson.html): A country specified in an address

    */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an address
* [Person](person.html): A postal code specified in an address
* [Practitioner](practitioner.html): A postalCode specified in an address
* [RelatedPerson](relatedperson.html): A postal code specified in an address

    */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A state specified in an address
* [Person](person.html): A state specified in an address
* [Practitioner](practitioner.html): A state specified in an address
* [RelatedPerson](relatedperson.html): A state specified in an address

    */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A use code specified in an address
* [Person](person.html): A use code specified in an address
* [Practitioner](practitioner.html): A use code specified in an address
* [RelatedPerson](relatedperson.html): A use code specified in an address

    */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The patient's date of birth
* [Person](person.html): The person's date of birth
* [RelatedPerson](relatedperson.html): The Related Person's date of birth

    */
  birthdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.date("birthdate", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in an email contact
* [Person](person.html): A value in an email contact
* [Practitioner](practitioner.html): A value in an email contact
* [PractitionerRole](practitionerrole.html): A value in an email contact
* [RelatedPerson](relatedperson.html): A value in an email contact

    */
  email(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("email", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
* [Person](person.html): The gender of the person
* [Practitioner](practitioner.html): Gender of the practitioner
* [RelatedPerson](relatedperson.html): Gender of the related person

    */
  gender(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("gender", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
* [Person](person.html): A value in a phone contact
* [Practitioner](practitioner.html): A value in a phone contact
* [PractitionerRole](practitionerrole.html): A value in a phone contact
* [RelatedPerson](relatedperson.html): A value in a phone contact

    */
  phone(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("phone", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [Person](person.html): A portion of name using some kind of phonetic matching algorithm
* [Practitioner](practitioner.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [RelatedPerson](relatedperson.html): A portion of name using some kind of phonetic matching algorithm

    */
  phonetic(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("phonetic", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The value in any kind of telecom details of the patient
* [Person](person.html): The value in any kind of contact
* [Practitioner](practitioner.html): The value in any kind of contact
* [PractitionerRole](practitionerrole.html): The value in any kind of contact
* [RelatedPerson](relatedperson.html): The value in any kind of contact

    */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("telecom", value, modifier);
    return this;
  }

  /**
   * A person Identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Any link has this Patient, Person, RelatedPerson or Practitioner reference
   */
  link(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.reference("link", id, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in the HumanName, including family, give, prefix, suffix, suffix, and/or text
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * The organization at which this person record is being managed
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * The Person links to this Patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The Person links to this Practitioner
   */
  practitioner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.reference("practitioner", id, modifier);
    return this;
  }

  /**
   * The Person links to this RelatedPerson
   */
  relatedperson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPerson {
    this.builder.reference("relatedperson", id, modifier);
    return this;
  }
}

export type SortOrderPerson =
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "birthdate"
  | "-birthdate"
  | "email"
  | "-email"
  | "gender"
  | "-gender"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom"
  | "identifier"
  | "-identifier"
  | "link"
  | "-link"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "patient"
  | "-patient"
  | "practitioner"
  | "-practitioner"
  | "relatedperson"
  | "-relatedperson";

class ResourceSearchBuilderPlanDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderPlanDefinition> {
  readonly resourceType = "PlanDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderPlanDefinition | SortOrderPlanDefinition[]
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * A use context assigned to the plan definition
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the plan definition
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the plan definition
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The plan definition publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Activity or plan definitions used by plan definition
   */
  definition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.reference("definition", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the plan definition
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the plan definition is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the plan definition
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the plan definition
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the plan definition
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the plan definition
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the plan definition
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the plan definition
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the module
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The type of artifact the plan (e.g. order-set, eca-rule, protocol)
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the plan definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the plan definition
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPlanDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderPlanDefinition =
  | "composed-of"
  | "-composed-of"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "definition"
  | "-definition"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "type"
  | "-type"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderPractitioner extends BaseResourceSearchBuilder<ResourceSearchBuilderPractitioner> {
  readonly resourceType = "Practitioner";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderPractitioner | SortOrderPractitioner[]
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Person](person.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Practitioner](practitioner.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text

    */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A city specified in an address
* [Person](person.html): A city specified in an address
* [Practitioner](practitioner.html): A city specified in an address
* [RelatedPerson](relatedperson.html): A city specified in an address

    */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A country specified in an address
* [Person](person.html): A country specified in an address
* [Practitioner](practitioner.html): A country specified in an address
* [RelatedPerson](relatedperson.html): A country specified in an address

    */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an address
* [Person](person.html): A postal code specified in an address
* [Practitioner](practitioner.html): A postalCode specified in an address
* [RelatedPerson](relatedperson.html): A postal code specified in an address

    */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A state specified in an address
* [Person](person.html): A state specified in an address
* [Practitioner](practitioner.html): A state specified in an address
* [RelatedPerson](relatedperson.html): A state specified in an address

    */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A use code specified in an address
* [Person](person.html): A use code specified in an address
* [Practitioner](practitioner.html): A use code specified in an address
* [RelatedPerson](relatedperson.html): A use code specified in an address

    */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in an email contact
* [Person](person.html): A value in an email contact
* [Practitioner](practitioner.html): A value in an email contact
* [PractitionerRole](practitionerrole.html): A value in an email contact
* [RelatedPerson](relatedperson.html): A value in an email contact

    */
  email(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("email", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of the family name of the patient
* [Practitioner](practitioner.html): A portion of the family name

    */
  family(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("family", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
* [Person](person.html): The gender of the person
* [Practitioner](practitioner.html): Gender of the practitioner
* [RelatedPerson](relatedperson.html): Gender of the related person

    */
  gender(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("gender", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of the given name of the patient
* [Practitioner](practitioner.html): A portion of the given name

    */
  given(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("given", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
* [Person](person.html): A value in a phone contact
* [Practitioner](practitioner.html): A value in a phone contact
* [PractitionerRole](practitionerrole.html): A value in a phone contact
* [RelatedPerson](relatedperson.html): A value in a phone contact

    */
  phone(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("phone", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [Person](person.html): A portion of name using some kind of phonetic matching algorithm
* [Practitioner](practitioner.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [RelatedPerson](relatedperson.html): A portion of name using some kind of phonetic matching algorithm

    */
  phonetic(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("phonetic", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The value in any kind of telecom details of the patient
* [Person](person.html): The value in any kind of contact
* [Practitioner](practitioner.html): The value in any kind of contact
* [PractitionerRole](practitionerrole.html): The value in any kind of contact
* [RelatedPerson](relatedperson.html): The value in any kind of contact

    */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("telecom", value, modifier);
    return this;
  }

  /**
   * Whether the practitioner record is active
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * One of the languages that the practitioner can communicate with
   */
  communication(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("communication", value, modifier);
    return this;
  }

  /**
   * A practitioner's Identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in the HumanName, including family, give, prefix, suffix, suffix, and/or text
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitioner {
    this.builder.string("name", value, modifier);
    return this;
  }
}

export type SortOrderPractitioner =
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "email"
  | "-email"
  | "family"
  | "-family"
  | "gender"
  | "-gender"
  | "given"
  | "-given"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom"
  | "active"
  | "-active"
  | "communication"
  | "-communication"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name";

class ResourceSearchBuilderPractitionerRole extends BaseResourceSearchBuilder<ResourceSearchBuilderPractitionerRole> {
  readonly resourceType = "PractitionerRole";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderPractitionerRole | SortOrderPractitionerRole[]
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in an email contact
* [Person](person.html): A value in an email contact
* [Practitioner](practitioner.html): A value in an email contact
* [PractitionerRole](practitionerrole.html): A value in an email contact
* [RelatedPerson](relatedperson.html): A value in an email contact

    */
  email(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("email", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
* [Person](person.html): A value in a phone contact
* [Practitioner](practitioner.html): A value in a phone contact
* [PractitionerRole](practitionerrole.html): A value in a phone contact
* [RelatedPerson](relatedperson.html): A value in a phone contact

    */
  phone(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("phone", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The value in any kind of telecom details of the patient
* [Person](person.html): The value in any kind of contact
* [Practitioner](practitioner.html): The value in any kind of contact
* [PractitionerRole](practitionerrole.html): The value in any kind of contact
* [RelatedPerson](relatedperson.html): The value in any kind of contact

    */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("telecom", value, modifier);
    return this;
  }

  /**
   * Whether this practitioner role record is in active use
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * The period during which the practitioner is authorized to perform in these role(s)
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Technical endpoints providing access to services operated for the practitioner with this role
   */
  endpoint(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.reference("endpoint", id, modifier);
    return this;
  }

  /**
   * A practitioner's Identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * One of the locations at which this practitioner provides care
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * The identity of the organization the practitioner represents / acts on behalf of
   */
  organization(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.reference("organization", id, modifier);
    return this;
  }

  /**
   * Practitioner that is able to provide the defined services for the organization
   */
  practitioner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.reference("practitioner", id, modifier);
    return this;
  }

  /**
   * The practitioner can perform this role at for the organization
   */
  role(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("role", value, modifier);
    return this;
  }

  /**
   * The list of healthcare services that this worker provides for this role's Organization/Location(s)
   */
  service(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.reference("service", id, modifier);
    return this;
  }

  /**
   * The practitioner has this specialty at an organization
   */
  specialty(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderPractitionerRole {
    this.builder.token("specialty", value, modifier);
    return this;
  }
}

export type SortOrderPractitionerRole =
  | "email"
  | "-email"
  | "phone"
  | "-phone"
  | "telecom"
  | "-telecom"
  | "active"
  | "-active"
  | "date"
  | "-date"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "organization"
  | "-organization"
  | "practitioner"
  | "-practitioner"
  | "role"
  | "-role"
  | "service"
  | "-service"
  | "specialty"
  | "-specialty";

class ResourceSearchBuilderProcedure extends BaseResourceSearchBuilder<ResourceSearchBuilderProcedure> {
  readonly resourceType = "Procedure";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderProcedure | SortOrderProcedure[]
  ): ResourceSearchBuilderProcedure {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * A request for this procedure
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Classification of the procedure
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * Where the procedure happened
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * Part of referenced event
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * The reference to the practitioner
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Coded reason procedure performed
   */
  reasoncode(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("reason-code", value, modifier);
    return this;
  }

  /**
   * The justification that the procedure was performed
   */
  reasonreference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("reason-reference", id, modifier);
    return this;
  }

  /**
   * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Search by subject
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProcedure {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderProcedure =
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "location"
  | "-location"
  | "part-of"
  | "-part-of"
  | "performer"
  | "-performer"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderProvenance extends BaseResourceSearchBuilder<ResourceSearchBuilderProvenance> {
  readonly resourceType = "Provenance";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderProvenance | SortOrderProvenance[]
  ): ResourceSearchBuilderProvenance {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Who participated
   */
  agent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.reference("agent", id, modifier);
    return this;
  }

  /**
   * What the agents role was
   */
  agentrole(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("agent-role", value, modifier);
    return this;
  }

  /**
   * How the agent participated
   */
  agenttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("agent-type", value, modifier);
    return this;
  }

  /**
   * Identity of entity
   */
  entity(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.reference("entity", id, modifier);
    return this;
  }

  /**
   * Where the activity occurred, if relevant
   */
  location(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.reference("location", id, modifier);
    return this;
  }

  /**
   * Target Reference(s) (usually version specific)
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * When the activity was recorded / updated
   */
  recorded(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.date("recorded", value, prefix);
    return this;
  }

  /**
   * Indication of the reason the entity signed the object(s)
   */
  signaturetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.token("signature-type", value, modifier);
    return this;
  }

  /**
   * Target Reference(s) (usually version specific)
   */
  target(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.reference("target", id, modifier);
    return this;
  }

  /**
   * When the activity occurred
   */
  when(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderProvenance {
    this.builder.date("when", value, prefix);
    return this;
  }
}

export type SortOrderProvenance =
  | "agent"
  | "-agent"
  | "agent-role"
  | "-agent-role"
  | "agent-type"
  | "-agent-type"
  | "entity"
  | "-entity"
  | "location"
  | "-location"
  | "patient"
  | "-patient"
  | "recorded"
  | "-recorded"
  | "signature-type"
  | "-signature-type"
  | "target"
  | "-target"
  | "when"
  | "-when";

class ResourceSearchBuilderQuestionnaire extends BaseResourceSearchBuilder<ResourceSearchBuilderQuestionnaire> {
  readonly resourceType = "Questionnaire";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderQuestionnaire | SortOrderQuestionnaire[]
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A code that corresponds to one of its items in the questionnaire
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the questionnaire
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the questionnaire
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the questionnaire
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The questionnaire publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * ElementDefinition - details for the item
   */
  definition(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.uri("definition", value, modifier);
    return this;
  }

  /**
   * The description of the questionnaire
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the questionnaire is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the questionnaire
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the questionnaire
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the questionnaire
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the questionnaire
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the questionnaire
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Resource that can be subject of QuestionnaireResponse
   */
  subjecttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("subject-type", value, modifier);
    return this;
  }

  /**
   * The human-friendly name of the questionnaire
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the questionnaire
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the questionnaire
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaire {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderQuestionnaire =
  | "code"
  | "-code"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "definition"
  | "-definition"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "subject-type"
  | "-subject-type"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderQuestionnaireResponse extends BaseResourceSearchBuilder<ResourceSearchBuilderQuestionnaireResponse> {
  readonly resourceType = "QuestionnaireResponse";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderQuestionnaireResponse
      | SortOrderQuestionnaireResponse[]
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The author of the questionnaire response
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * When the questionnaire response was last changed
   */
  authored(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.date("authored", value, prefix);
    return this;
  }

  /**
   * Plan/proposal/order fulfilled by this questionnaire response
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Encounter associated with the questionnaire response
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * The unique identifier for the questionnaire response
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Procedure or observation this questionnaire response was performed as a part of
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * The patient that is the subject of the questionnaire response
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The questionnaire the answers are provided for
   */
  questionnaire(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("questionnaire", id, modifier);
    return this;
  }

  /**
   * The individual providing the information reflected in the questionnaire respose
   */
  source(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("source", id, modifier);
    return this;
  }

  /**
   * The status of the questionnaire response
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The subject of the questionnaire response
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderQuestionnaireResponse {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderQuestionnaireResponse =
  | "author"
  | "-author"
  | "authored"
  | "-authored"
  | "based-on"
  | "-based-on"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "part-of"
  | "-part-of"
  | "patient"
  | "-patient"
  | "questionnaire"
  | "-questionnaire"
  | "source"
  | "-source"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderRegulatedAuthorization extends BaseResourceSearchBuilder<ResourceSearchBuilderRegulatedAuthorization> {
  readonly resourceType = "RegulatedAuthorization";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderRegulatedAuthorization
      | SortOrderRegulatedAuthorization[]
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The case or procedure number
   */
  case(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("case", value, modifier);
    return this;
  }

  /**
   * The defining type of case
   */
  casetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("case-type", value, modifier);
    return this;
  }

  /**
   * The organization that holds the granted authorization
   */
  holder(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.reference("holder", id, modifier);
    return this;
  }

  /**
   * Business identifier for the authorization, typically assigned by the authorizing body
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The territory (e.g., country, jurisdiction etc.) in which the authorization has been granted
   */
  region(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("region", value, modifier);
    return this;
  }

  /**
   * The status that is authorised e.g. approved. Intermediate states can be tracked with cases and applications
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The type of regulated product, treatment, facility or activity that is being authorized
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRegulatedAuthorization {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderRegulatedAuthorization =
  | "case"
  | "-case"
  | "case-type"
  | "-case-type"
  | "holder"
  | "-holder"
  | "identifier"
  | "-identifier"
  | "region"
  | "-region"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderRelatedPerson extends BaseResourceSearchBuilder<ResourceSearchBuilderRelatedPerson> {
  readonly resourceType = "RelatedPerson";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderRelatedPerson | SortOrderRelatedPerson[]
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Person](person.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [Practitioner](practitioner.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A server defined search that may match any of the string fields in the Address, including line, city, district, state, country, postalCode, and/or text

    */
  address(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("address", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A city specified in an address
* [Person](person.html): A city specified in an address
* [Practitioner](practitioner.html): A city specified in an address
* [RelatedPerson](relatedperson.html): A city specified in an address

    */
  addresscity(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("address-city", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A country specified in an address
* [Person](person.html): A country specified in an address
* [Practitioner](practitioner.html): A country specified in an address
* [RelatedPerson](relatedperson.html): A country specified in an address

    */
  addresscountry(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("address-country", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an address
* [Person](person.html): A postal code specified in an address
* [Practitioner](practitioner.html): A postalCode specified in an address
* [RelatedPerson](relatedperson.html): A postal code specified in an address

    */
  addresspostalcode(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("address-postalcode", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A state specified in an address
* [Person](person.html): A state specified in an address
* [Practitioner](practitioner.html): A state specified in an address
* [RelatedPerson](relatedperson.html): A state specified in an address

    */
  addressstate(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("address-state", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A use code specified in an address
* [Person](person.html): A use code specified in an address
* [Practitioner](practitioner.html): A use code specified in an address
* [RelatedPerson](relatedperson.html): A use code specified in an address

    */
  addressuse(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("address-use", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The patient's date of birth
* [Person](person.html): The person's date of birth
* [RelatedPerson](relatedperson.html): The Related Person's date of birth

    */
  birthdate(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.date("birthdate", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in an email contact
* [Person](person.html): A value in an email contact
* [Practitioner](practitioner.html): A value in an email contact
* [PractitionerRole](practitionerrole.html): A value in an email contact
* [RelatedPerson](relatedperson.html): A value in an email contact

    */
  email(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("email", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
* [Person](person.html): The gender of the person
* [Practitioner](practitioner.html): Gender of the practitioner
* [RelatedPerson](relatedperson.html): Gender of the related person

    */
  gender(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("gender", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
* [Person](person.html): A value in a phone contact
* [Practitioner](practitioner.html): A value in a phone contact
* [PractitionerRole](practitionerrole.html): A value in a phone contact
* [RelatedPerson](relatedperson.html): A value in a phone contact

    */
  phone(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("phone", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [Person](person.html): A portion of name using some kind of phonetic matching algorithm
* [Practitioner](practitioner.html): A portion of either family or given name using some kind of phonetic matching algorithm
* [RelatedPerson](relatedperson.html): A portion of name using some kind of phonetic matching algorithm

    */
  phonetic(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("phonetic", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Patient](patient.html): The value in any kind of telecom details of the patient
* [Person](person.html): The value in any kind of contact
* [Practitioner](practitioner.html): The value in any kind of contact
* [PractitionerRole](practitionerrole.html): The value in any kind of contact
* [RelatedPerson](relatedperson.html): The value in any kind of contact

    */
  telecom(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("telecom", value, modifier);
    return this;
  }

  /**
   * Indicates if the related person record is active
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * An Identifier of the RelatedPerson
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * A server defined search that may match any of the string fields in the HumanName, including family, give, prefix, suffix, suffix, and/or text
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * The patient this related person is related to
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The relationship between the patient and the relatedperson
   */
  relationship(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRelatedPerson {
    this.builder.token("relationship", value, modifier);
    return this;
  }
}

export type SortOrderRelatedPerson =
  | "address"
  | "-address"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "birthdate"
  | "-birthdate"
  | "email"
  | "-email"
  | "gender"
  | "-gender"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom"
  | "active"
  | "-active"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "patient"
  | "-patient"
  | "relationship"
  | "-relationship";

class ResourceSearchBuilderRequestGroup extends BaseResourceSearchBuilder<ResourceSearchBuilderRequestGroup> {
  readonly resourceType = "RequestGroup";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderRequestGroup | SortOrderRequestGroup[]
  ): ResourceSearchBuilderRequestGroup {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The author of the request group
   */
  author(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.reference("author", id, modifier);
    return this;
  }

  /**
   * The date the request group was authored
   */
  authored(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.date("authored", value, prefix);
    return this;
  }

  /**
   * The code of the request group
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * The encounter the request group applies to
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * The group identifier for the request group
   */
  groupidentifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("group-identifier", value, modifier);
    return this;
  }

  /**
   * External identifiers for the request group
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The FHIR-based definition from which the request group is realized
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * The external definition from which the request group is realized
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * The intent of the request group
   */
  intent(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("intent", value, modifier);
    return this;
  }

  /**
   * The participant in the requests in the group
   */
  participant(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.reference("participant", id, modifier);
    return this;
  }

  /**
   * The identity of a patient to search for request groups
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * The priority of the request group
   */
  priority(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("priority", value, modifier);
    return this;
  }

  /**
   * The status of the request group
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The subject that the request group is about
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRequestGroup {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderRequestGroup =
  | "author"
  | "-author"
  | "authored"
  | "-authored"
  | "code"
  | "-code"
  | "encounter"
  | "-encounter"
  | "group-identifier"
  | "-group-identifier"
  | "identifier"
  | "-identifier"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "intent"
  | "-intent"
  | "participant"
  | "-participant"
  | "patient"
  | "-patient"
  | "priority"
  | "-priority"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderResearchDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderResearchDefinition> {
  readonly resourceType = "ResearchDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderResearchDefinition | SortOrderResearchDefinition[]
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * A use context assigned to the research definition
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the research definition
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the research definition
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The research definition publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the research definition
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the research definition is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the research definition
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the research definition
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the research definition
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the research definition
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the research definition
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the research definition
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the ResearchDefinition
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the research definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the research definition
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderResearchDefinition =
  | "composed-of"
  | "-composed-of"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderResearchElementDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderResearchElementDefinition> {
  readonly resourceType = "ResearchElementDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SortOrderResearchElementDefinition
      | SortOrderResearchElementDefinition[]
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  composedof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.reference("composed-of", id, modifier);
    return this;
  }

  /**
   * A use context assigned to the research element definition
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the research element definition
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the research element definition
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The research element definition publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * What resource is being referenced
   */
  dependson(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.reference("depends-on", id, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * The description of the research element definition
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * The time during which the research element definition is intended to be in use
   */
  effective(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.date("effective", value, prefix);
    return this;
  }

  /**
   * External identifier for the research element definition
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the research element definition
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the research element definition
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  predecessor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.reference("predecessor", id, modifier);
    return this;
  }

  /**
   * Name of the publisher of the research element definition
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the research element definition
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * What resource is being referenced
   */
  successor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.reference("successor", id, modifier);
    return this;
  }

  /**
   * The human-friendly name of the research element definition
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Topics associated with the ResearchElementDefinition
   */
  topic(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("topic", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the research element definition
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the research element definition
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchElementDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderResearchElementDefinition =
  | "composed-of"
  | "-composed-of"
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderResearchStudy extends BaseResourceSearchBuilder<ResourceSearchBuilderResearchStudy> {
  readonly resourceType = "ResearchStudy";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderResearchStudy | SortOrderResearchStudy[]
  ): ResourceSearchBuilderResearchStudy {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Classifications for the study
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * When the study began and ended
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Drugs, devices, etc. under study
   */
  focus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("focus", value, modifier);
    return this;
  }

  /**
   * Business Identifier for study
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Used to search for the study
   */
  keyword(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("keyword", value, modifier);
    return this;
  }

  /**
   * Geographic region(s) for study
   */
  location(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("location", value, modifier);
    return this;
  }

  /**
   * Part of larger study
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.reference("partof", id, modifier);
    return this;
  }

  /**
   * Researcher who oversees multiple aspects of the study
   */
  principalinvestigator(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.reference("principalinvestigator", id, modifier);
    return this;
  }

  /**
   * Steps followed in executing study
   */
  protocol(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.reference("protocol", id, modifier);
    return this;
  }

  /**
   * Facility where study activities are conducted
   */
  site(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.reference("site", id, modifier);
    return this;
  }

  /**
   * Organization that initiates and is legally responsible for the study
   */
  sponsor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.reference("sponsor", id, modifier);
    return this;
  }

  /**
   * active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Name for this study
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchStudy {
    this.builder.string("title", value, modifier);
    return this;
  }
}

export type SortOrderResearchStudy =
  | "category"
  | "-category"
  | "date"
  | "-date"
  | "focus"
  | "-focus"
  | "identifier"
  | "-identifier"
  | "keyword"
  | "-keyword"
  | "location"
  | "-location"
  | "partof"
  | "-partof"
  | "principalinvestigator"
  | "-principalinvestigator"
  | "protocol"
  | "-protocol"
  | "site"
  | "-site"
  | "sponsor"
  | "-sponsor"
  | "status"
  | "-status"
  | "title"
  | "-title";

class ResourceSearchBuilderResearchSubject extends BaseResourceSearchBuilder<ResourceSearchBuilderResearchSubject> {
  readonly resourceType = "ResearchSubject";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderResearchSubject | SortOrderResearchSubject[]
  ): ResourceSearchBuilderResearchSubject {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Start and end of participation
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * Business Identifier for research subject in a study
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Who is part of study
   */
  individual(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.reference("individual", id, modifier);
    return this;
  }

  /**
   * Who is part of study
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * candidate | eligible | follow-up | ineligible | not-registered | off-study | on-study | on-study-intervention | on-study-observation | pending-on-study | potential-candidate | screening | withdrawn
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Study subject is part of
   */
  study(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderResearchSubject {
    this.builder.reference("study", id, modifier);
    return this;
  }
}

export type SortOrderResearchSubject =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "individual"
  | "-individual"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "study"
  | "-study";

class ResourceSearchBuilderRiskAssessment extends BaseResourceSearchBuilder<ResourceSearchBuilderRiskAssessment> {
  readonly resourceType = "RiskAssessment";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderRiskAssessment | SortOrderRiskAssessment[]
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Condition assessed
   */
  condition(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.reference("condition", id, modifier);
    return this;
  }

  /**
   * Evaluation mechanism
   */
  method(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("method", value, modifier);
    return this;
  }

  /**
   * Who did assessment?
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Likelihood of specified outcome
   */
  probability(
    value: Parameters<FhirSearchBuilder["number"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.number("probability", value, prefix);
    return this;
  }

  /**
   * Likelihood of specified outcome as a qualitative value
   */
  risk(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.token("risk", value, modifier);
    return this;
  }

  /**
   * Who/what does assessment apply to?
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderRiskAssessment {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderRiskAssessment =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "condition"
  | "-condition"
  | "method"
  | "-method"
  | "performer"
  | "-performer"
  | "probability"
  | "-probability"
  | "risk"
  | "-risk"
  | "subject"
  | "-subject";

class ResourceSearchBuilderSchedule extends BaseResourceSearchBuilder<ResourceSearchBuilderSchedule> {
  readonly resourceType = "Schedule";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSchedule | SortOrderSchedule[]
  ): ResourceSearchBuilderSchedule {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Is the schedule in active use
   */
  active(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("active", value, modifier);
    return this;
  }

  /**
   * The individual(HealthcareService, Practitioner, Location, ...) to find a Schedule for
   */
  actor(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.reference("actor", id, modifier);
    return this;
  }

  /**
   * Search for Schedule resources that have a period that contains this date specified
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * A Schedule Identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * High-level category
   */
  servicecategory(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("service-category", value, modifier);
    return this;
  }

  /**
   * The type of appointments that can be booked into associated slot(s)
   */
  servicetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("service-type", value, modifier);
    return this;
  }

  /**
   * Type of specialty needed
   */
  specialty(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSchedule {
    this.builder.token("specialty", value, modifier);
    return this;
  }
}

export type SortOrderSchedule =
  | "active"
  | "-active"
  | "actor"
  | "-actor"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "specialty"
  | "-specialty";

class ResourceSearchBuilderSearchParameter extends BaseResourceSearchBuilder<ResourceSearchBuilderSearchParameter> {
  readonly resourceType = "SearchParameter";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSearchParameter | SortOrderSearchParameter[]
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
   * The resource type(s) this search parameter applies to
   */
  base(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("base", value, modifier);
    return this;
  }

  /**
   * Code used in URL
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Defines how the part works
   */
  component(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.reference("component", id, modifier);
    return this;
  }

  /**
   * Original definition for the search parameter
   */
  derivedfrom(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.reference("derived-from", id, modifier);
    return this;
  }

  /**
   * Types of resource (if a resource reference)
   */
  target(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("target", value, modifier);
    return this;
  }

  /**
   * number | date | string | token | reference | composite | quantity | uri | special
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSearchParameter {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderSearchParameter =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "base"
  | "-base"
  | "code"
  | "-code"
  | "component"
  | "-component"
  | "derived-from"
  | "-derived-from"
  | "target"
  | "-target"
  | "type"
  | "-type";

class ResourceSearchBuilderServiceRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderServiceRequest> {
  readonly resourceType = "ServiceRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderServiceRequest | SortOrderServiceRequest[]
  ): ResourceSearchBuilderServiceRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code that identifies the allergy or intolerance
* [Condition](condition.html): Code for the condition
* [DeviceRequest](devicerequest.html): Code for what is being requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the report, as opposed to codes for the atomic results, which are the names on the observation resource referred to from the result
* [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
* [List](list.html): What the purpose of this list is
* [Medication](medication.html): Returns medications for a specific code
* [MedicationAdministration](medicationadministration.html): Return administrations of this medication code
* [MedicationDispense](medicationdispense.html): Returns dispenses of this medicine code
* [MedicationRequest](medicationrequest.html): Return prescriptions of this medication code
* [MedicationStatement](medicationstatement.html): Return statements of this medication code
* [Observation](observation.html): The code of the observation type
* [Procedure](procedure.html): A code to identify a  procedure
* [ServiceRequest](servicerequest.html): What is being requested/ordered

    */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Date request signed
   */
  authored(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.date("authored", value, prefix);
    return this;
  }

  /**
   * What request fulfills
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Where procedure is going to be done
   */
  bodysite(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("body-site", value, modifier);
    return this;
  }

  /**
   * Classification of service
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Instantiates FHIR protocol or definition
   */
  instantiatescanonical(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("instantiates-canonical", id, modifier);
    return this;
  }

  /**
   * Instantiates external protocol or definition
   */
  instantiatesuri(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.uri("instantiates-uri", value, modifier);
    return this;
  }

  /**
   * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
   */
  intent(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("intent", value, modifier);
    return this;
  }

  /**
   * When service should occur
   */
  occurrence(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.date("occurrence", value, prefix);
    return this;
  }

  /**
   * Requested performer
   */
  performer(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("performer", id, modifier);
    return this;
  }

  /**
   * Performer role
   */
  performertype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("performer-type", value, modifier);
    return this;
  }

  /**
   * routine | urgent | asap | stat
   */
  priority(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("priority", value, modifier);
    return this;
  }

  /**
   * What request replaces
   */
  replaces(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("replaces", id, modifier);
    return this;
  }

  /**
   * Who/what is requesting service
   */
  requester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("requester", id, modifier);
    return this;
  }

  /**
   * Composite Request ID
   */
  requisition(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("requisition", value, modifier);
    return this;
  }

  /**
   * Specimen to be tested
   */
  specimen(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("specimen", id, modifier);
    return this;
  }

  /**
   * draft | active | on-hold | revoked | completed | entered-in-error | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Search by subject
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderServiceRequest {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderServiceRequest =
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "authored"
  | "-authored"
  | "based-on"
  | "-based-on"
  | "body-site"
  | "-body-site"
  | "category"
  | "-category"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "intent"
  | "-intent"
  | "occurrence"
  | "-occurrence"
  | "performer"
  | "-performer"
  | "performer-type"
  | "-performer-type"
  | "priority"
  | "-priority"
  | "replaces"
  | "-replaces"
  | "requester"
  | "-requester"
  | "requisition"
  | "-requisition"
  | "specimen"
  | "-specimen"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderSlot extends BaseResourceSearchBuilder<ResourceSearchBuilderSlot> {
  readonly resourceType = "Slot";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSlot | SortOrderSlot[]
  ): ResourceSearchBuilderSlot {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The style of appointment or patient that may be booked in the slot (not service type)
   */
  appointmenttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("appointment-type", value, modifier);
    return this;
  }

  /**
   * A Slot Identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The Schedule Resource that we are seeking a slot within
   */
  schedule(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.reference("schedule", id, modifier);
    return this;
  }

  /**
   * A broad categorization of the service that is to be performed during this appointment
   */
  servicecategory(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("service-category", value, modifier);
    return this;
  }

  /**
   * The type of appointments that can be booked into the slot
   */
  servicetype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("service-type", value, modifier);
    return this;
  }

  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment
   */
  specialty(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("specialty", value, modifier);
    return this;
  }

  /**
   * Appointment date/time.
   */
  start(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.date("start", value, prefix);
    return this;
  }

  /**
   * The free/busy status of the appointment
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSlot {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderSlot =
  | "appointment-type"
  | "-appointment-type"
  | "identifier"
  | "-identifier"
  | "schedule"
  | "-schedule"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "specialty"
  | "-specialty"
  | "start"
  | "-start"
  | "status"
  | "-status";

class ResourceSearchBuilderSpecimen extends BaseResourceSearchBuilder<ResourceSearchBuilderSpecimen> {
  readonly resourceType = "Specimen";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSpecimen | SortOrderSpecimen[]
  ): ResourceSearchBuilderSpecimen {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The accession number associated with the specimen
   */
  accession(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("accession", value, modifier);
    return this;
  }

  /**
   * The code for the body site from where the specimen originated
   */
  bodysite(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("bodysite", value, modifier);
    return this;
  }

  /**
   * The date the specimen was collected
   */
  collected(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.date("collected", value, prefix);
    return this;
  }

  /**
   * Who collected the specimen
   */
  collector(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.reference("collector", id, modifier);
    return this;
  }

  /**
   * The kind of specimen container
   */
  container(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("container", value, modifier);
    return this;
  }

  /**
   * The unique identifier associated with the specimen container
   */
  containerid(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("container-id", value, modifier);
    return this;
  }

  /**
   * The unique identifier associated with the specimen
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The parent of the specimen
   */
  parent(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.reference("parent", id, modifier);
    return this;
  }

  /**
   * The patient the specimen comes from
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * available | unavailable | unsatisfactory | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The subject of the specimen
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * The specimen type
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimen {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderSpecimen =
  | "accession"
  | "-accession"
  | "bodysite"
  | "-bodysite"
  | "collected"
  | "-collected"
  | "collector"
  | "-collector"
  | "container"
  | "-container"
  | "container-id"
  | "-container-id"
  | "identifier"
  | "-identifier"
  | "parent"
  | "-parent"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "type"
  | "-type";

class ResourceSearchBuilderSpecimenDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderSpecimenDefinition> {
  readonly resourceType = "SpecimenDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSpecimenDefinition | SortOrderSpecimenDefinition[]
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The type of specimen conditioned in container expected by the lab
   */
  container(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("container", value, modifier);
    return this;
  }

  /**
   * The unique identifier associated with the specimen
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The type of collected specimen
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSpecimenDefinition {
    this.builder.token("type", value, modifier);
    return this;
  }
}

export type SortOrderSpecimenDefinition =
  | "container"
  | "-container"
  | "identifier"
  | "-identifier"
  | "type"
  | "-type";

class ResourceSearchBuilderStructureDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderStructureDefinition> {
  readonly resourceType = "StructureDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderStructureDefinition | SortOrderStructureDefinition[]
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for the code system
* [ConceptMap](conceptmap.html): External identifier for the concept map
* [MessageDefinition](messagedefinition.html): External identifier for the message definition
* [StructureDefinition](structuredefinition.html): External identifier for the structure definition
* [StructureMap](structuremap.html): External identifier for the structure map
* [ValueSet](valueset.html): External identifier for the value set

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Whether the structure is abstract
   */
  abstract(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("abstract", value, modifier);
    return this;
  }

  /**
   * Definition that this type is constrained/specialized from
   */
  base(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.reference("base", id, modifier);
    return this;
  }

  /**
   * Path that identifies the base element
   */
  basepath(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("base-path", value, modifier);
    return this;
  }

  /**
   * specialization | constraint - How relates to base definition
   */
  derivation(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("derivation", value, modifier);
    return this;
  }

  /**
   * For testing purposes, not real usage
   */
  experimental(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("experimental", value, modifier);
    return this;
  }

  /**
   * The system is the URL for the context-type: e.g. http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text
   */
  extcontext(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("ext-context", value, modifier);
    return this;
  }

  /**
   * A code for the StructureDefinition
   */
  keyword(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("keyword", value, modifier);
    return this;
  }

  /**
   * primitive-type | complex-type | resource | logical
   */
  kind(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("kind", value, modifier);
    return this;
  }

  /**
   * A path that is constrained in the StructureDefinition
   */
  path(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.token("path", value, modifier);
    return this;
  }

  /**
   * Type defined or constrained by this structure
   */
  type(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.uri("type", value, modifier);
    return this;
  }

  /**
   * A vocabulary binding reference
   */
  valueset(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderStructureDefinition {
    this.builder.reference("valueset", id, modifier);
    return this;
  }
}

export type SortOrderStructureDefinition =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "identifier"
  | "-identifier"
  | "abstract"
  | "-abstract"
  | "base"
  | "-base"
  | "base-path"
  | "-base-path"
  | "derivation"
  | "-derivation"
  | "experimental"
  | "-experimental"
  | "ext-context"
  | "-ext-context"
  | "keyword"
  | "-keyword"
  | "kind"
  | "-kind"
  | "path"
  | "-path"
  | "type"
  | "-type"
  | "valueset"
  | "-valueset";

class ResourceSearchBuilderStructureMap extends BaseResourceSearchBuilder<ResourceSearchBuilderStructureMap> {
  readonly resourceType = "StructureMap";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for the code system
* [ConceptMap](conceptmap.html): External identifier for the concept map
* [MessageDefinition](messagedefinition.html): External identifier for the message definition
* [StructureDefinition](structuredefinition.html): External identifier for the structure definition
* [StructureMap](structuremap.html): External identifier for the structure map
* [ValueSet](valueset.html): External identifier for the value set

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderStructureMap {
    this.builder.token("identifier", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderSubscription extends BaseResourceSearchBuilder<ResourceSearchBuilderSubscription> {
  readonly resourceType = "Subscription";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSubscription | SortOrderSubscription[]
  ): ResourceSearchBuilderSubscription {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Contact details for the subscription
   */
  contact(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("contact", value, modifier);
    return this;
  }

  /**
   * The search rules used to determine when to send a notification
   */
  criteria(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.string("criteria", value, modifier);
    return this;
  }

  /**
   * The mime-type of the notification payload
   */
  payload(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("payload", value, modifier);
    return this;
  }

  /**
   * The current state of the subscription
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The type of channel for the sent notifications
   */
  type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.token("type", value, modifier);
    return this;
  }

  /**
   * The uri that will receive the notifications
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscription {
    this.builder.uri("url", value, modifier);
    return this;
  }
}

export type SortOrderSubscription =
  | "contact"
  | "-contact"
  | "criteria"
  | "-criteria"
  | "payload"
  | "-payload"
  | "status"
  | "-status"
  | "type"
  | "-type"
  | "url"
  | "-url";

class ResourceSearchBuilderSubscriptionStatus extends BaseResourceSearchBuilder<ResourceSearchBuilderSubscriptionStatus> {
  readonly resourceType = "SubscriptionStatus";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionStatus {
    this.builder.token("_type", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderSubscriptionTopic extends BaseResourceSearchBuilder<ResourceSearchBuilderSubscriptionTopic> {
  readonly resourceType = "SubscriptionTopic";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSubscriptionTopic | SortOrderSubscriptionTopic[]
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Date status first applied
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * A server defined search that matches either the url or derivedFrom
   */
  derivedorself(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.uri("derived-or-self", value, modifier);
    return this;
  }

  /**
   * Business Identifier for SubscriptionTopic
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Allowed Data type or Resource (reference to definition) for this definition, searches resourceTrigger, eventTrigger, and notificationShape for matches.
   */
  resource(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.uri("resource", value, modifier);
    return this;
  }

  /**
   * draft | active | retired | unknown
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Name for this SubscriptionTopic (Human friendly)
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * Text representation of the trigger
   */
  triggerdescription(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.string("trigger-description", value, modifier);
    return this;
  }

  /**
   * Logical canonical URL to reference this SubscriptionTopic (globally unique)
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * Business version of the SubscriptionTopic
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubscriptionTopic {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderSubscriptionTopic =
  | "date"
  | "-date"
  | "derived-or-self"
  | "-derived-or-self"
  | "identifier"
  | "-identifier"
  | "resource"
  | "-resource"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "trigger-description"
  | "-trigger-description"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderSubstance extends BaseResourceSearchBuilder<ResourceSearchBuilderSubstance> {
  readonly resourceType = "Substance";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSubstance | SortOrderSubstance[]
  ): ResourceSearchBuilderSubstance {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * The category of the substance
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * The code of the substance or ingredient
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Identifier of the package/container
   */
  containeridentifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("container-identifier", value, modifier);
    return this;
  }

  /**
   * Expiry date of package or container of substance
   */
  expiry(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.date("expiry", value, prefix);
    return this;
  }

  /**
   * Unique identifier for the substance
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Amount of substance in the package
   */
  quantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.quantity("quantity", number, prefix);
    return this;
  }

  /**
   * active | inactive | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * A component of the substance
   */
  substancereference(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSubstance {
    this.builder.reference("substance-reference", id, modifier);
    return this;
  }
}

export type SortOrderSubstance =
  | "category"
  | "-category"
  | "code"
  | "-code"
  | "container-identifier"
  | "-container-identifier"
  | "expiry"
  | "-expiry"
  | "identifier"
  | "-identifier"
  | "quantity"
  | "-quantity"
  | "status"
  | "-status"
  | "substance-reference"
  | "-substance-reference";

class ResourceSearchBuilderSubstanceDefinition extends BaseResourceSearchBuilder<ResourceSearchBuilderSubstanceDefinition> {
  readonly resourceType = "SubstanceDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSubstanceDefinition | SortOrderSubstanceDefinition[]
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * High or low level categorization, e.g. polymer vs. nucleic acid or linear vs. branch chain
   */
  classification(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("classification", value, modifier);
    return this;
  }

  /**
   * The specific code
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * If the substance applies to only human or veterinary use
   */
  domain(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("domain", value, modifier);
    return this;
  }

  /**
   * Identifier by which this substance is known
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The actual name
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSubstanceDefinition {
    this.builder.string("name", value, modifier);
    return this;
  }
}

export type SortOrderSubstanceDefinition =
  | "classification"
  | "-classification"
  | "code"
  | "-code"
  | "domain"
  | "-domain"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name";

class ResourceSearchBuilderSupplyDelivery extends BaseResourceSearchBuilder<ResourceSearchBuilderSupplyDelivery> {
  readonly resourceType = "SupplyDelivery";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSupplyDelivery | SortOrderSupplyDelivery[]
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Who collected the Supply
   */
  receiver(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.reference("receiver", id, modifier);
    return this;
  }

  /**
   * in-progress | completed | abandoned | entered-in-error
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Dispenser
   */
  supplier(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSupplyDelivery {
    this.builder.reference("supplier", id, modifier);
    return this;
  }
}

export type SortOrderSupplyDelivery =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "receiver"
  | "-receiver"
  | "status"
  | "-status"
  | "supplier"
  | "-supplier";

class ResourceSearchBuilderSupplyRequest extends BaseResourceSearchBuilder<ResourceSearchBuilderSupplyRequest> {
  readonly resourceType = "SupplyRequest";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderSupplyRequest | SortOrderSupplyRequest[]
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date first version of the resource instance was recorded
* [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html): Time period team covers
* [ClinicalImpression](clinicalimpression.html): When the assessment was documented
* [Composition](composition.html): Composition editing time
* [Consent](consent.html): When this Consent was created or indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant time of the report
* [Encounter](encounter.html): A date within the period the Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date search value falls within the episode of care's period
* [FamilyMemberHistory](familymemberhistory.html): When history was recorded or last updated
* [Flag](flag.html): Time period when flag is active
* [Immunization](immunization.html): Vaccination  (non)-Administration Date
* [List](list.html): When the list was prepared
* [Observation](observation.html): Obtained date/time. If the obtained element is a period, a date that falls in the period
* [Procedure](procedure.html): When the procedure was performed
* [RiskAssessment](riskassessment.html): When was assessment made?
* [SupplyRequest](supplyrequest.html): When the request was made

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The kind of supply (central, non-stock, etc.)
   */
  category(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("category", value, modifier);
    return this;
  }

  /**
   * Individual making the request
   */
  requester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.reference("requester", id, modifier);
    return this;
  }

  /**
   * draft | active | suspended +
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * The destination of the supply
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.reference("subject", id, modifier);
    return this;
  }

  /**
   * Who is intended to fulfill the request
   */
  supplier(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderSupplyRequest {
    this.builder.reference("supplier", id, modifier);
    return this;
  }
}

export type SortOrderSupplyRequest =
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "category"
  | "-category"
  | "requester"
  | "-requester"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "supplier"
  | "-supplier";

class ResourceSearchBuilderTask extends BaseResourceSearchBuilder<ResourceSearchBuilderTask> {
  readonly resourceType = "Task";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderTask | SortOrderTask[]
  ): ResourceSearchBuilderTask {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * Search by creation date
   */
  authoredon(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.date("authored-on", value, prefix);
    return this;
  }

  /**
   * Search by requests this task is based on
   */
  basedon(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("based-on", id, modifier);
    return this;
  }

  /**
   * Search by business status
   */
  businessstatus(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("business-status", value, modifier);
    return this;
  }

  /**
   * Search by task code
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Search by encounter
   */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Search by task focus
   */
  focus(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("focus", id, modifier);
    return this;
  }

  /**
   * Search by group identifier
   */
  groupidentifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("group-identifier", value, modifier);
    return this;
  }

  /**
   * Search for a task instance by its business identifier
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Search by task intent
   */
  intent(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("intent", value, modifier);
    return this;
  }

  /**
   * Search by last modification date
   */
  modified(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.date("modified", value, prefix);
    return this;
  }

  /**
   * Search by task owner
   */
  owner(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("owner", id, modifier);
    return this;
  }

  /**
   * Search by task this task is part of
   */
  partof(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("part-of", id, modifier);
    return this;
  }

  /**
   * Search by patient
   */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
   * Search by recommended type of performer (e.g., Requester, Performer, Scheduler).
   */
  performer(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("performer", value, modifier);
    return this;
  }

  /**
   * Search by period Task is/was underway
   */
  period(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.date("period", value, prefix);
    return this;
  }

  /**
   * Search by task priority
   */
  priority(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("priority", value, modifier);
    return this;
  }

  /**
   * Search by task requester
   */
  requester(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("requester", id, modifier);
    return this;
  }

  /**
   * Search by task status
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * Search by subject
   */
  subject(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTask {
    this.builder.reference("subject", id, modifier);
    return this;
  }
}

export type SortOrderTask =
  | "authored-on"
  | "-authored-on"
  | "based-on"
  | "-based-on"
  | "business-status"
  | "-business-status"
  | "code"
  | "-code"
  | "encounter"
  | "-encounter"
  | "focus"
  | "-focus"
  | "group-identifier"
  | "-group-identifier"
  | "identifier"
  | "-identifier"
  | "intent"
  | "-intent"
  | "modified"
  | "-modified"
  | "owner"
  | "-owner"
  | "part-of"
  | "-part-of"
  | "patient"
  | "-patient"
  | "performer"
  | "-performer"
  | "period"
  | "-period"
  | "priority"
  | "-priority"
  | "requester"
  | "-requester"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

class ResourceSearchBuilderTerminologyCapabilities extends BaseResourceSearchBuilder<ResourceSearchBuilderTerminologyCapabilities> {
  readonly resourceType = "TerminologyCapabilities";

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTerminologyCapabilities {
    this.builder.token("version", value, modifier);
    return this;
  }
}

class ResourceSearchBuilderTestReport extends BaseResourceSearchBuilder<ResourceSearchBuilderTestReport> {
  readonly resourceType = "TestReport";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderTestReport | SortOrderTestReport[]
  ): ResourceSearchBuilderTestReport {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * An external identifier for the test report
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * The test report generation date
   */
  issued(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.date("issued", value, prefix);
    return this;
  }

  /**
   * The reference to a participant in the test execution
   */
  participant(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.uri("participant", value, modifier);
    return this;
  }

  /**
   * The result disposition of the test execution
   */
  result(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.token("result", value, modifier);
    return this;
  }

  /**
   * The name of the testing organization
   */
  tester(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.string("tester", value, modifier);
    return this;
  }

  /**
   * The test script executed to produce this report
   */
  testscript(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderTestReport {
    this.builder.reference("testscript", id, modifier);
    return this;
  }
}

export type SortOrderTestReport =
  | "identifier"
  | "-identifier"
  | "issued"
  | "-issued"
  | "participant"
  | "-participant"
  | "result"
  | "-result"
  | "tester"
  | "-tester"
  | "testscript"
  | "-testscript";

class ResourceSearchBuilderTestScript extends BaseResourceSearchBuilder<ResourceSearchBuilderTestScript> {
  readonly resourceType = "TestScript";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderTestScript | SortOrderTestScript[]
  ): ResourceSearchBuilderTestScript {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A use context assigned to the test script
   */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
   * A quantity- or range-valued use context assigned to the test script
   */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
   * A type of use context assigned to the test script
   */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
   * The test script publication date
   */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
   * The description of the test script
   */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
   * External identifier for the test script
   */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * Intended jurisdiction for the test script
   */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
   * Computationally friendly name of the test script
   */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
   * Name of the publisher of the test script
   */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
   * The current status of the test script
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
   * TestScript required and validated capability
   */
  testscriptcapability(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("testscript-capability", value, modifier);
    return this;
  }

  /**
   * The human-friendly name of the test script
   */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
   * The uri that identifies the test script
   */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
   * The business version of the test script
   */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderTestScript {
    this.builder.token("version", value, modifier);
    return this;
  }
}

export type SortOrderTestScript =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "testscript-capability"
  | "-testscript-capability"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

class ResourceSearchBuilderValueSet extends BaseResourceSearchBuilder<ResourceSearchBuilderValueSet> {
  readonly resourceType = "ValueSet";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderValueSet | SortOrderValueSet[]
  ): ResourceSearchBuilderValueSet {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
* [CodeSystem](codesystem.html): A use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
* [NamingSystem](namingsystem.html): A use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
* [StructureMap](structuremap.html): A use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A use context assigned to the value set

    */
  context(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("context", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set

    */
  contextquantity(
    number: Parameters<FhirSearchBuilder["quantity"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.quantity("context-quantity", number, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
* [CodeSystem](codesystem.html): A type of use context assigned to the code system
* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
* [StructureMap](structuremap.html): A type of use context assigned to the structure map
* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of use context assigned to the value set

    */
  contexttype(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("context-type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The capability statement publication date
* [CodeSystem](codesystem.html): The code system publication date
* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
* [ConceptMap](conceptmap.html): The concept map publication date
* [GraphDefinition](graphdefinition.html): The graph definition publication date
* [ImplementationGuide](implementationguide.html): The implementation guide publication date
* [MessageDefinition](messagedefinition.html): The message definition publication date
* [NamingSystem](namingsystem.html): The naming system publication date
* [OperationDefinition](operationdefinition.html): The operation definition publication date
* [SearchParameter](searchparameter.html): The search parameter publication date
* [StructureDefinition](structuredefinition.html): The structure definition publication date
* [StructureMap](structuremap.html): The structure map publication date
* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
* [ValueSet](valueset.html): The value set publication date

    */
  date(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.date("date", value, prefix);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The description of the capability statement
* [CodeSystem](codesystem.html): The description of the code system
* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
* [ConceptMap](conceptmap.html): The description of the concept map
* [GraphDefinition](graphdefinition.html): The description of the graph definition
* [ImplementationGuide](implementationguide.html): The description of the implementation guide
* [MessageDefinition](messagedefinition.html): The description of the message definition
* [NamingSystem](namingsystem.html): The description of the naming system
* [OperationDefinition](operationdefinition.html): The description of the operation definition
* [SearchParameter](searchparameter.html): The description of the search parameter
* [StructureDefinition](structuredefinition.html): The description of the structure definition
* [StructureMap](structuremap.html): The description of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
* [ValueSet](valueset.html): The description of the value set

    */
  description(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("description", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
* [CodeSystem](codesystem.html): Intended jurisdiction for the code system
* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
* [StructureMap](structuremap.html): Intended jurisdiction for the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
* [ValueSet](valueset.html): Intended jurisdiction for the value set

    */
  jurisdiction(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("jurisdiction", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
* [CodeSystem](codesystem.html): Computationally friendly name of the code system
* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
* [StructureMap](structuremap.html): Computationally friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
* [ValueSet](valueset.html): Computationally friendly name of the value set

    */
  name(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("name", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
* [CodeSystem](codesystem.html): Name of the publisher of the code system
* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
* [ConceptMap](conceptmap.html): Name of the publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
* [NamingSystem](namingsystem.html): Name of the publisher of the naming system
* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
* [StructureMap](structuremap.html): Name of the publisher of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
* [ValueSet](valueset.html): Name of the publisher of the value set

    */
  publisher(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("publisher", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
* [CodeSystem](codesystem.html): The current status of the code system
* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
* [ConceptMap](conceptmap.html): The current status of the concept map
* [GraphDefinition](graphdefinition.html): The current status of the graph definition
* [ImplementationGuide](implementationguide.html): The current status of the implementation guide
* [MessageDefinition](messagedefinition.html): The current status of the message definition
* [NamingSystem](namingsystem.html): The current status of the naming system
* [OperationDefinition](operationdefinition.html): The current status of the operation definition
* [SearchParameter](searchparameter.html): The current status of the search parameter
* [StructureDefinition](structuredefinition.html): The current status of the structure definition
* [StructureMap](structuremap.html): The current status of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
* [ValueSet](valueset.html): The current status of the value set

    */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("status", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
* [CodeSystem](codesystem.html): The human-friendly name of the code system
* [ConceptMap](conceptmap.html): The human-friendly name of the concept map
* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
* [StructureMap](structuremap.html): The human-friendly name of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
* [ValueSet](valueset.html): The human-friendly name of the value set

    */
  title(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.string("title", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
* [CodeSystem](codesystem.html): The uri that identifies the code system
* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies the concept map
* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
* [SearchParameter](searchparameter.html): The uri that identifies the search parameter
* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
* [StructureMap](structuremap.html): The uri that identifies the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
* [ValueSet](valueset.html): The uri that identifies the value set

    */
  url(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.uri("url", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
* [CodeSystem](codesystem.html): The business version of the code system
* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
* [ConceptMap](conceptmap.html): The business version of the concept map
* [GraphDefinition](graphdefinition.html): The business version of the graph definition
* [ImplementationGuide](implementationguide.html): The business version of the implementation guide
* [MessageDefinition](messagedefinition.html): The business version of the message definition
* [OperationDefinition](operationdefinition.html): The business version of the operation definition
* [SearchParameter](searchparameter.html): The business version of the search parameter
* [StructureDefinition](structuredefinition.html): The business version of the structure definition
* [StructureMap](structuremap.html): The business version of the structure map
* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
* [ValueSet](valueset.html): The business version of the value set

    */
  version(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("version", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for the code system
* [ConceptMap](conceptmap.html): External identifier for the concept map
* [MessageDefinition](messagedefinition.html): External identifier for the message definition
* [StructureDefinition](structuredefinition.html): External identifier for the structure definition
* [StructureMap](structuremap.html): External identifier for the structure map
* [ValueSet](valueset.html): External identifier for the value set

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
   * This special parameter searches for codes in the value set. See additional notes on the ValueSet resource
   */
  code(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.token("code", value, modifier);
    return this;
  }

  /**
   * Identifies the value set expansion (business identifier)
   */
  expansion(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.uri("expansion", value, modifier);
    return this;
  }

  /**
   * A code system included or excluded in the value set or an imported value set
   */
  reference(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderValueSet {
    this.builder.uri("reference", value, modifier);
    return this;
  }
}

export type SortOrderValueSet =
  | "context"
  | "-context"
  | "context-quantity"
  | "-context-quantity"
  | "context-type"
  | "-context-type"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version"
  | "identifier"
  | "-identifier"
  | "code"
  | "-code"
  | "expansion"
  | "-expansion"
  | "reference"
  | "-reference";

class ResourceSearchBuilderVerificationResult extends BaseResourceSearchBuilder<ResourceSearchBuilderVerificationResult> {
  readonly resourceType = "VerificationResult";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderVerificationResult | SortOrderVerificationResult[]
  ): ResourceSearchBuilderVerificationResult {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
   * A resource that was validated
   */
  target(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderVerificationResult {
    this.builder.reference("target", id, modifier);
    return this;
  }
}

export type SortOrderVerificationResult = "target" | "-target";

class ResourceSearchBuilderVisionPrescription extends BaseResourceSearchBuilder<ResourceSearchBuilderVisionPrescription> {
  readonly resourceType = "VisionPrescription";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SortOrderVisionPrescription | SortOrderVisionPrescription[]
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.string("_sort", parameters, null, "replace");
    return this;
  }

  /**
   * Search on the narrative of the resource
   */
  _text(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.string("_text", value, modifier);
    return this;
  }

  /**
   * Search on the entire content of the resource
   */
  _content(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.string("_content", value, modifier);
    return this;
  }

  /**
   * Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
   */
  _filter(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("_filter", value, modifier);
    return this;
  }

  /**
   * Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
   */
  _has(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.string("_has", value, modifier);
    return this;
  }

  /**
   * Logical id of this artifact
   */
  _id(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("_id", value, modifier);
    return this;
  }

  /**
   * When the resource version last changed
   */
  _lastUpdated(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.date("_lastUpdated", value, prefix);
    return this;
  }

  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List types)
   */
  _list(
    value: Parameters<FhirSearchBuilder["string"]>[1],
    modifier?: StringModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.string("_list", value, modifier);
    return this;
  }

  /**
   * Profiles this resource claims to conform to
   */
  _profile(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.uri("_profile", value, modifier);
    return this;
  }

  /**
   * A custom search profile that describes a specific defined query operation
   */
  _query(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("_query", value, modifier);
    return this;
  }

  /**
   * Security Labels applied to this resource
   */
  _security(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("_security", value, modifier);
    return this;
  }

  /**
   * Identifies where the resource comes from
   */
  _source(
    value: Parameters<FhirSearchBuilder["uri"]>[1],
    modifier?: UriModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.uri("_source", value, modifier);
    return this;
  }

  /**
   * Tags applied to this resource
   */
  _tag(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("_tag", value, modifier);
    return this;
  }

  /**
   * Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
   */
  _type(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("_type", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): External ids for this item
* [CarePlan](careplan.html): External Ids for this plan
* [CareTeam](careteam.html): External Ids for this team
* [Composition](composition.html): Version-independent identifier for the Composition
* [Condition](condition.html): A unique identifier of the condition record
* [Consent](consent.html): Identifier for this record (external references)
* [DetectedIssue](detectedissue.html): Unique id for the detected issue
* [DeviceRequest](devicerequest.html): Business identifier for request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for the set of documents
* [DocumentReference](documentreference.html): Master Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business Identifier(s) relevant for this EpisodeOfCare
* [FamilyMemberHistory](familymemberhistory.html): A search by a record identifier
* [Goal](goal.html): External Ids for this goal
* [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM Study Instance UID and Accession number
* [Immunization](immunization.html): Business identifier
* [List](list.html): Business identifier
* [MedicationAdministration](medicationadministration.html): Return administrations with this external identifier
* [MedicationDispense](medicationdispense.html): Returns dispenses with this external identifier
* [MedicationRequest](medicationrequest.html): Return prescriptions with this external identifier
* [MedicationStatement](medicationstatement.html): Return statements with this external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this external identifier
* [Observation](observation.html): The unique id for a particular observation
* [Procedure](procedure.html): A unique identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique identifier for the assessment
* [ServiceRequest](servicerequest.html): Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html): External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier for SupplyRequest
* [VisionPrescription](visionprescription.html): Return prescriptions with this external identifier

    */
  identifier(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("identifier", value, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
* [CareTeam](careteam.html): Who care team is for
* [ClinicalImpression](clinicalimpression.html): Patient or group assessed
* [Composition](composition.html): Who and/or what the composition is about
* [Condition](condition.html): Who has the condition?
* [Consent](consent.html): Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated patient
* [DeviceRequest](devicerequest.html): Individual the service is ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the report if a patient
* [DocumentManifest](documentmanifest.html): The subject of the set of documents
* [DocumentReference](documentreference.html): Who/what is the subject of the document
* [Encounter](encounter.html): The patient or group present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who is the focus of this episode of care
* [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to list family member history items for
* [Flag](flag.html): The identity of a subject to list flags for
* [Goal](goal.html): Who this goal is intended for
* [ImagingStudy](imagingstudy.html): Who the study is about
* [Immunization](immunization.html): The patient for the vaccination record
* [List](list.html): If all resources have the same subject
* [MedicationAdministration](medicationadministration.html): The identity of a patient to list administrations  for
* [MedicationDispense](medicationdispense.html): The identity of a patient to list dispenses  for
* [MedicationRequest](medicationrequest.html): Returns prescriptions for a specific patient
* [MedicationStatement](medicationstatement.html): Returns statements for a specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the person who requires the diet, formula or nutritional supplement
* [Observation](observation.html): The subject that the observation is about (if patient)
* [Procedure](procedure.html): Search by subject - a patient
* [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
* [ServiceRequest](servicerequest.html): Search by subject - a patient
* [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
* [VisionPrescription](visionprescription.html): The identity of a patient to list dispenses for

    */
  patient(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.reference("patient", id, modifier);
    return this;
  }

  /**
    * Multiple Resources: 

* [Composition](composition.html): Context of the Composition
* [DeviceRequest](devicerequest.html): Encounter during which request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter when the order was made
* [DocumentReference](documentreference.html): Context of the document  content
* [Flag](flag.html): Alert relevant during encounter
* [List](list.html): Context in which list created
* [NutritionOrder](nutritionorder.html): Return nutrition orders with this encounter identifier
* [Observation](observation.html): Encounter related to the observation
* [Procedure](procedure.html): Encounter created as part of
* [RiskAssessment](riskassessment.html): Where was assessment performed?
* [ServiceRequest](servicerequest.html): An encounter in which this request is made
* [VisionPrescription](visionprescription.html): Return prescriptions with this encounter identifier

    */
  encounter(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.reference("encounter", id, modifier);
    return this;
  }

  /**
   * Return prescriptions written on this date
   */
  datewritten(
    value: Parameters<FhirSearchBuilder["date"]>[1],
    prefix?: Prefix | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.date("datewritten", value, prefix);
    return this;
  }

  /**
   * Who authorized the vision prescription
   */
  prescriber(
    id: Parameters<FhirSearchBuilder["reference"]>[1],
    modifier?: ":identifier" | ResourceType | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.reference("prescriber", id, modifier);
    return this;
  }

  /**
   * The status of the vision prescription
   */
  status(
    value: Parameters<FhirSearchBuilder["token"]>[1],
    modifier?: TokenModifier | null | undefined
  ): ResourceSearchBuilderVisionPrescription {
    this.builder.token("status", value, modifier);
    return this;
  }
}

export type SortOrderVisionPrescription =
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "encounter"
  | "-encounter"
  | "datewritten"
  | "-datewritten"
  | "prescriber"
  | "-prescriber"
  | "status"
  | "-status";

export type ResourceSearchBuilder =
  | ResourceSearchBuilderAccount
  | ResourceSearchBuilderActivityDefinition
  | ResourceSearchBuilderAdministrableProductDefinition
  | ResourceSearchBuilderAdverseEvent
  | ResourceSearchBuilderAllergyIntolerance
  | ResourceSearchBuilderAppointment
  | ResourceSearchBuilderAppointmentResponse
  | ResourceSearchBuilderAuditEvent
  | ResourceSearchBuilderBasic
  | ResourceSearchBuilderBiologicallyDerivedProduct
  | ResourceSearchBuilderBodyStructure
  | ResourceSearchBuilderCapabilityStatement
  | ResourceSearchBuilderCarePlan
  | ResourceSearchBuilderCareTeam
  | ResourceSearchBuilderCatalogEntry
  | ResourceSearchBuilderChargeItem
  | ResourceSearchBuilderChargeItemDefinition
  | ResourceSearchBuilderCitation
  | ResourceSearchBuilderClaim
  | ResourceSearchBuilderClaimResponse
  | ResourceSearchBuilderClinicalImpression
  | ResourceSearchBuilderClinicalUseDefinition
  | ResourceSearchBuilderCodeSystem
  | ResourceSearchBuilderCommunication
  | ResourceSearchBuilderCommunicationRequest
  | ResourceSearchBuilderCompartmentDefinition
  | ResourceSearchBuilderComposition
  | ResourceSearchBuilderConceptMap
  | ResourceSearchBuilderCondition
  | ResourceSearchBuilderConsent
  | ResourceSearchBuilderContract
  | ResourceSearchBuilderCoverage
  | ResourceSearchBuilderCoverageEligibilityRequest
  | ResourceSearchBuilderCoverageEligibilityResponse
  | ResourceSearchBuilderDetectedIssue
  | ResourceSearchBuilderDevice
  | ResourceSearchBuilderDeviceDefinition
  | ResourceSearchBuilderDeviceMetric
  | ResourceSearchBuilderDeviceRequest
  | ResourceSearchBuilderDeviceUseStatement
  | ResourceSearchBuilderDiagnosticReport
  | ResourceSearchBuilderDocumentManifest
  | ResourceSearchBuilderDocumentReference
  | ResourceSearchBuilderEncounter
  | ResourceSearchBuilderEndpoint
  | ResourceSearchBuilderEnrollmentRequest
  | ResourceSearchBuilderEnrollmentResponse
  | ResourceSearchBuilderEpisodeOfCare
  | ResourceSearchBuilderEventDefinition
  | ResourceSearchBuilderEvidence
  | ResourceSearchBuilderEvidenceReport
  | ResourceSearchBuilderEvidenceVariable
  | ResourceSearchBuilderExampleScenario
  | ResourceSearchBuilderExplanationOfBenefit
  | ResourceSearchBuilderFamilyMemberHistory
  | ResourceSearchBuilderFlag
  | ResourceSearchBuilderGoal
  | ResourceSearchBuilderGraphDefinition
  | ResourceSearchBuilderGroup
  | ResourceSearchBuilderGuidanceResponse
  | ResourceSearchBuilderHealthcareService
  | ResourceSearchBuilderImagingStudy
  | ResourceSearchBuilderImmunization
  | ResourceSearchBuilderImmunizationEvaluation
  | ResourceSearchBuilderImmunizationRecommendation
  | ResourceSearchBuilderImplementationGuide
  | ResourceSearchBuilderIngredient
  | ResourceSearchBuilderInsurancePlan
  | ResourceSearchBuilderInvoice
  | ResourceSearchBuilderLibrary
  | ResourceSearchBuilderLinkage
  | ResourceSearchBuilderList
  | ResourceSearchBuilderLocation
  | ResourceSearchBuilderManufacturedItemDefinition
  | ResourceSearchBuilderMeasure
  | ResourceSearchBuilderMeasureReport
  | ResourceSearchBuilderMedia
  | ResourceSearchBuilderMedication
  | ResourceSearchBuilderMedicationAdministration
  | ResourceSearchBuilderMedicationDispense
  | ResourceSearchBuilderMedicationKnowledge
  | ResourceSearchBuilderMedicationRequest
  | ResourceSearchBuilderMedicationStatement
  | ResourceSearchBuilderMedicinalProductDefinition
  | ResourceSearchBuilderMessageDefinition
  | ResourceSearchBuilderMessageHeader
  | ResourceSearchBuilderMolecularSequence
  | ResourceSearchBuilderNamingSystem
  | ResourceSearchBuilderNutritionOrder
  | ResourceSearchBuilderNutritionProduct
  | ResourceSearchBuilderObservation
  | ResourceSearchBuilderObservationDefinition
  | ResourceSearchBuilderOperationDefinition
  | ResourceSearchBuilderOperationOutcome
  | ResourceSearchBuilderOrganization
  | ResourceSearchBuilderOrganizationAffiliation
  | ResourceSearchBuilderPackagedProductDefinition
  | ResourceSearchBuilderPatient
  | ResourceSearchBuilderPaymentNotice
  | ResourceSearchBuilderPaymentReconciliation
  | ResourceSearchBuilderPerson
  | ResourceSearchBuilderPlanDefinition
  | ResourceSearchBuilderPractitioner
  | ResourceSearchBuilderPractitionerRole
  | ResourceSearchBuilderProcedure
  | ResourceSearchBuilderProvenance
  | ResourceSearchBuilderQuestionnaire
  | ResourceSearchBuilderQuestionnaireResponse
  | ResourceSearchBuilderRegulatedAuthorization
  | ResourceSearchBuilderRelatedPerson
  | ResourceSearchBuilderRequestGroup
  | ResourceSearchBuilderResearchDefinition
  | ResourceSearchBuilderResearchElementDefinition
  | ResourceSearchBuilderResearchStudy
  | ResourceSearchBuilderResearchSubject
  | ResourceSearchBuilderRiskAssessment
  | ResourceSearchBuilderSchedule
  | ResourceSearchBuilderSearchParameter
  | ResourceSearchBuilderServiceRequest
  | ResourceSearchBuilderSlot
  | ResourceSearchBuilderSpecimen
  | ResourceSearchBuilderSpecimenDefinition
  | ResourceSearchBuilderStructureDefinition
  | ResourceSearchBuilderStructureMap
  | ResourceSearchBuilderSubscription
  | ResourceSearchBuilderSubscriptionStatus
  | ResourceSearchBuilderSubscriptionTopic
  | ResourceSearchBuilderSubstance
  | ResourceSearchBuilderSubstanceDefinition
  | ResourceSearchBuilderSupplyDelivery
  | ResourceSearchBuilderSupplyRequest
  | ResourceSearchBuilderTask
  | ResourceSearchBuilderTerminologyCapabilities
  | ResourceSearchBuilderTestReport
  | ResourceSearchBuilderTestScript
  | ResourceSearchBuilderValueSet
  | ResourceSearchBuilderVerificationResult
  | ResourceSearchBuilderVisionPrescription;

/**
 * Allow referencing a search builder type from its string ResourceType representation.
 */
export type ExtractSearchBuilder<TResourceType extends ResourceType> = Extract<
  ResourceSearchBuilder,
  { resourceType: TResourceType }
>;

export type SummaryValue = "true" | "text" | "data" | "count" | "false";
