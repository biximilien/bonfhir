{{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
import type { {{type}} } from "fhir/r4";
{{/each}}
import type { ExtractResource, ResourceType } from "./types";
import { fhirSearch, FhirSearchBuilder, Prefix, StringModifier, TokenModifier, UriModifier } from "./search-builder";

/**
 * Return a typed search builder for a specific resource.
 * 
 * @example
 *  > resourceSearch("Patient").name("John").active("true").href
 *  > "name=John&active=true"
 */
export function resourceSearch<TResource extends ResourceType>(type: TResource): ExtractSearchBuilder<TResource> {
  switch(type) {
    {{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
    case "{{type}}":
      return new ResourceSearchBuilder{{type}}() as ExtractSearchBuilder<TResource>;
    {{/each}}
    default:
      throw new Error(`Unsupported resourceSearch for resource type ${type}`);
  }
}

/**
 * Base class for all ResourceSearchBuilder{type}
 */
class BaseResourceSearchBuilder<TResourceSearchBuilder> {
  /**
   * The underlying `FhirSearchBuilder`, that can be used directly if needed.
   */
  public builder: FhirSearchBuilder = fhirSearch();

  /**
   * Get the final string containing the whole URL.
   */
  public get href(): string {
    return this.builder.href;
  }

  /**
   * The number of primary resources to return by page.
   *
   * @see https://hl7.org/fhir/search.html#count
   */
  _count(value: number): TResourceSearchBuilder {
    this.builder.string("_count", `${value}`, null, "replace");
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   * Include a related resource directly referenced by the main resource.
   *
   * @see https://hl7.org/fhir/search.html#include
   */
  _include<TResourceType extends ResourceType>(
    sourceResource: TResourceType,
    searchParameter: keyof ExtractResource<TResourceType>,
    options?: {
      targetResourceType?: ResourceType | null | undefined,
      iterate?: boolean | null | undefined
    }
  ): TResourceSearchBuilder {
    this.builder.string(
      `_include${(options?.iterate == null) ? "" : ":iterate"}`,
      `${sourceResource}:${String(searchParameter)}${options?.targetResourceType ? `:${options.targetResourceType}` : ""}`
    );
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   * Include a related resource referencing the main resource.
   *
   * @see https://hl7.org/fhir/search.html#revinclude
   */
  _revinclude<TResourceType extends ResourceType>(
    sourceResource: TResourceType,
    searchParameter: keyof ExtractResource<TResourceType>,
    options?: {
      targetResourceType?: ResourceType | null | undefined,
      iterate?: boolean | null | undefined
    }
  ): TResourceSearchBuilder {
    this.builder.string(
      `_revinclude${(options?.iterate == null) ? "" : ":iterate"}`,
      `${sourceResource}:${String(searchParameter)}${options?.targetResourceType ? `:${options.targetResourceType}` : ""}`
    );
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   *  Return only a portion of the resources.
   *
   * @see https://hl7.org/fhir/search.html#summary
   */
  _summary(value: SummaryValue): TResourceSearchBuilder {
    this.builder.string("_summary", `${value}`, null, "replace");
    return this as unknown as TResourceSearchBuilder;
  }

  /**
   * Add a `total` element to the returned `Bundle` which is the number of resources that match the search parameters.
   * Note that `Bundle.total` represents the total number of matches, not how many resources are returned in a particular response
   * 
   * @see https://hl7.org/fhir/search.html#total
   */
  _total(value: "none" | "estimate" | "accurate"): TResourceSearchBuilder {
    this.builder.string("_total", value, null, "replace");
    return this as unknown as TResourceSearchBuilder;
  }
}

{{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
class ResourceSearchBuilder{{type}} extends BaseResourceSearchBuilder<ResourceSearchBuilder{{type}}> {

  readonly resourceType = "{{type}}";

{{#if (notIn type "BiologicallyDerivedProduct,CatalogEntry,ObservationDefinition,OperationOutcome,StructureMap,SubscriptionStatus,TerminologyCapabilities")}}
  /**
   * Indicate the sort order.
   * 
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: SortOrder{{type}} | SortOrder{{type}}[] | null | undefined): ResourceSearchBuilder{{type}} {
    this.builder.string("_sort", parameters, null, parameters == null ? "remove" : "replace");
    return this;
  }
{{/if}}

  {{#each (uniqBy (fhirPath @root.data.[search-parameters] (replace "Bundle.entry.select(resource).ofType(SearchParameter).where(base='DomainResource' or base='Resource' or base='CURRENTYPE' or base contains 'CURRENTYPE')" "CURRENTYPE" type)) "code")}}
  {{#if (notIn type "composite,special")}}
    /**
    * {{description}}
    */
    {{safeNameAsVar code}}({{searchArgs type}}): ResourceSearchBuilder{{../type}} {
      this.builder.{{type}}("{{code}}", {{searchArgsInvoke type}});
      return this;
    }

  {{/if}}
  {{/each}}
}

{{#if (notIn type "BiologicallyDerivedProduct,CatalogEntry,ObservationDefinition,OperationOutcome,StructureMap,SubscriptionStatus,TerminologyCapabilities")}}
export type SortOrder{{type}} = 
  {{#each (uniqBy (fhirPath @root.data.[search-parameters] (replace "Bundle.entry.select(resource).ofType(SearchParameter).where(base='DomainResource' or base='Resource' or base='CURRENTYPE' or base contains 'CURRENTYPE')" "CURRENTYPE" type)) "code")}}
    {{#if (notIn type "composite,special")}}
      {{#startsWith "_" code}}
      {{else}}
        | "{{code}}" | "-{{code}}"
      {{/startsWith}}
    {{/if}}
  {{/each}};
{{/if}}

{{/each}}

export type ResourceSearchBuilder = 
  {{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
  | ResourceSearchBuilder{{type}}
  {{/each}};

/**
 * Allow referencing a search builder type from its string ResourceType representation.
 */
export type ExtractSearchBuilder<TResourceType extends ResourceType> =
  Extract<ResourceSearchBuilder, { resourceType: TResourceType }>;

export type SummaryValue = "true" | "text" | "data" | "count" | "false";
